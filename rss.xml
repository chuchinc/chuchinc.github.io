<?xml version="1.0" encoding="utf-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>ChuChin</title><link>https://chuchin.cn/</link><description>这里是ChuChin的个人博客，关键词：生活、技术</description><generator>Hugo 0.87.0 https://gohugo.io/</generator><language>zh-CN</language><managingEditor>edmond1122@foxmail.com (Chu)</managingEditor><webMaster>edmond1122@foxmail.com (Chu)</webMaster><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><lastBuildDate>Thu, 02 Sep 2021 13:08:53 +0800</lastBuildDate><atom:link rel="self" type="application/rss+xml" href="https://chuchin.cn/rss.xml"/><item><title>SCA核心组件 Dubbo</title><link>https://chuchin.cn/tech/distributed-micro-service/springcloud/sca-core-dubbo/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/springcloud/sca-core-dubbo/</guid><pubDate>Sat, 17 Oct 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>&lt;em>本文源代码下载：&lt;a href="https://chuchin.cn/file/springcloud/spring-cloud-dubbo.zip">spring-cloud-dubbo.zip&lt;/a>&lt;/em>&lt;/p>
&lt;h2 id="nacos--sentinel--dubbo-整合">Nacos + Sentinel + Dubbo 整合&lt;/h2>
&lt;p>改造“⾃动投递微服务”和“简历微服务”，删除OpenFeign 和 Ribbon，使⽤Dubbo RPC 和 Dubbo LB ⾸先，需要删除或者注释掉父工程中的热部署依赖&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="c">&amp;lt;!-- &amp;lt;dependency&amp;gt;--&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;--&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- &amp;lt;artifactId&amp;gt;spring-boot-devtools&amp;lt;/artifactId&amp;gt;--&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;--&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- &amp;lt;/dependency&amp;gt;--&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="服务提供者改造">服务提供者改造&lt;/h2>
&lt;ol>
&lt;li>新建service-resume-dubbo-api模块,新增接口&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">ResumeService&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Integer&lt;/span> &lt;span class="nf">findDefaultResumeByUserId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">userId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>改造服务提供者（简历微服务）
&lt;ul>
&lt;li>pom文件添加spring cloud + dubbo整合的依赖，同时添加dubbo服务接口⼯程依赖&lt;/li>
&lt;li>删除原有ResumeService接⼝，引⼊dubbo服务接⼝⼯程中的ResumeService接口，适当调整代码，在service的实现类上添加dubbo的@Service注解&lt;/li>
&lt;li>application.yml或者bootstrap.yml配置⽂件中添加dubbo配置&lt;/li>
&lt;li>服务发布后，查看nacos控制台注册信息，从元数据中可以看出,是dubbo注 册上来的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.alibaba.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-dubbo&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.alibaba.csp&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>sentinel-apache-dubbo-adapter&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>cn.chuchin&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>service-dubbo-api&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.0-SNAPSHOT&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">cn.chuchin.pojo.Resume&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">cn.chuchin.dao.ResumeDao&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">cn.chuchin.service.ResumeService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.apache.dubbo.config.annotation.Service&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.beans.factory.annotation.Autowired&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.data.domain.Example&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Service&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ResumeServiceImpl&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">ResumeService&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">ResumeDao&lt;/span> &lt;span class="n">resumeDao&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="nf">findDefaultResumeByUserId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">userId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Resume&lt;/span> &lt;span class="n">resume&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Resume&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">resume&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setUserId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">userId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 查询默认简历
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">resume&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setIsDefault&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Example&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Resume&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">example&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Example&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">of&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">resume&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">resumeDao&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">findOne&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">example&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getIsOpenResume&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">server&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8084&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">dubbo&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scan&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># dubbo 服务扫描基准包&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">base-packages&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cn.chuchin.service.impl&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># dubbo 协议&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dubbo&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># dubbo 协议端⼝（ -1 表示⾃增端⼝，从 20880 开始）&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>-&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">registry&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 挂载到 Spring Cloud 的注册中⼼&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">address&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">spring-cloud://localhost&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">application&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">service-resume&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">main&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#Spring Boot 2.1 需要设置&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">allow-bean-definition-overriding&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201209-143730-0927.png" alt="20201209-143730-0927.png">&lt;/p>
&lt;h2 id="服务消费者工程改造">服务消费者工程改造&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>改造服务消费者⼯程—&amp;gt;⾃动投递微服务&lt;/p>
&lt;ul>
&lt;li>
&lt;p>pom.xml中删除OpenFeign相关内容&lt;/p>
&lt;/li>
&lt;li>
&lt;p>application.yml配置⽂件中删除和Feign、Ribbon相关的内容；代码中删除Feign客户端内容；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>pom.xml添加内容和服务提供者⼀样&lt;/p>
&lt;/li>
&lt;li>
&lt;p>application.yml配置⽂件中添加dubbo相关内容&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">dubbo&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">registry&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 挂载到 Spring Cloud 的注册中⼼&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">address&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">spring-cloud://localhost&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cloud&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">subscribed-services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">service-resume&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">main&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#Spring Boot 2.1 需要设置&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">allow-bean-definition-overriding&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>controller代码改造，其他不变&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@RestController&lt;/span>
&lt;span class="nd">@RequestMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/autodeliver&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AutodeliverController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//引入dubbo的Reference
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@Reference&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">ResumeService&lt;/span> &lt;span class="n">resumeService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@GetMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/checkState/{userId}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@SentinelResource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;findResumeOpenState&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">blockHandlerClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SentinelHandlersClass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">blockHandler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;handleException&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">fallbackClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SentinelHandlersClass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">fallback&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;handleError&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="nf">findResumeOpenState&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@PathVariable&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">userId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">resumeService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">findDefaultResumeByUserId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">userId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>测试&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>GET http://localhost:8099/autodeliver/checkState/1545136
Accept: application/json
###
##返回
3
&lt;/code>&lt;/pre></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/springcloud/">springcloud</category><category domain="https://chuchin.cn/tags/java/">Java</category><category domain="https://chuchin.cn/tags/spring-cloud/">Spring Cloud</category><category domain="https://chuchin.cn/tags/dubbo/">Dubbo</category></item><item><title>SCA核心组件 Sentinel</title><link>https://chuchin.cn/tech/distributed-micro-service/springcloud/sca-core-sentinel/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/springcloud/sca-core-sentinel/</guid><pubDate>Fri, 16 Oct 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>&lt;em>本文源代码下载：&lt;a href="https://chuchin.cn/file/springcloud/spring-cloud-sentinel.zip">spring-cloud-sentinel.zip&lt;/a>&lt;/em>&lt;/p>
&lt;h2 id="sentinel-介绍">Sentinel 介绍&lt;/h2>
&lt;p>Sentinel是⼀个⾯向云原⽣微服务的流量控制、熔断降级组件。替代Hystrix，针对问题：服务雪崩、服务降级、服务熔断、服务限流&lt;/p>
&lt;p>&lt;strong>Hystrix：&lt;/strong>&lt;/p>
&lt;p>服务消费者（自动投递微服务）—&amp;gt;调⽤服务提供者（简历微服务）&lt;/p>
&lt;p>在调用方引入Hystrix—&amp;gt; 单独搞了⼀个Dashboard项⽬—&amp;gt;Turbine&lt;/p>
&lt;ol>
&lt;li>自己搭建监控平台 dashboard&lt;/li>
&lt;li>没有提供UI界面进⾏服务熔断、服务降级等配置（而是写代码，入侵了我们源程序环境）&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Sentinel：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>独立可部署Dashboard控制台组件&lt;/li>
&lt;li>减少代码开发，通过UI界⾯配置即可完成细粒度控制（自动投递微服务）&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Sentinel 分为两个部分:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>核心库：（Java客户端）不依赖任何框架/库，能够运⾏于所有 Java 运⾏时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的⽀持&lt;/li>
&lt;li>控制台：（Dashboard）基于 Spring Boot 开发，打包后可以直接运⾏，不需要额外的 Tomcat 等 应⽤容器&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Sentinel 具有以下特征:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>丰富的应⽤场景：Sentinel 承接了阿⾥巴巴近 10 年的双⼗⼀⼤促流量的核⼼场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。&lt;/li>
&lt;li>完备的实时监控：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器 秒级数据，甚至 500 台以下规模的集群的汇总运⾏情况。&lt;/li>
&lt;li>⼴泛的开源生态：Sentinel 提供开箱即⽤的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo的整合。您只需要引入相应的依赖并进⾏简单的配置即可快速地接⼊ Sentinel。&lt;/li>
&lt;li>完善的 SPI 扩展点：Sentinel 提供简单易用、完善的 SPI 扩展接⼝。您可以通过实现扩展接⼝来快速地定制逻辑。例如定制规则管理、适配动态数据源等。&lt;/li>
&lt;/ul>
&lt;p>Sentinel特性（来自官网）&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2020/12/08/8d4ltxN5aV216IW.png" alt="up-2ba39572a1e10a01ca50460f470f599905e.png">&lt;/p>
&lt;p>Sentinel 生态（来自官网）&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2020/12/08/SJXkMrwW7D6BHqu.png" alt="up-f82e88eac21b9eb66b9a79af0ab0afe844b.png">&lt;/p>
&lt;h2 id="sentinel-部署">Sentinel 部署&lt;/h2>
&lt;p>下载地址：&lt;a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases&lt;/a> 版本为V1.8.0&lt;/p>
&lt;p>启动：java -jar sentinel-dashboard-1.8.0.jar &amp;amp;&lt;/p>
&lt;p>访问dashboard: http://localhost:8080/&lt;/p>
&lt;p>用户名/密码 sentinel/sentinel&lt;/p>
&lt;h2 id="服务改造">服务改造&lt;/h2>
&lt;p>在我们已有的业务场景中，“⾃动投递微服务”调⽤了“简历微服务”，我们在自动动投递微服务进⾏的熔断 降级等控制，那么接下来我们改造⾃动投递微服务，引入Sentinel核⼼包。
为了不污染之前的代码，复制⼀个⾃动投递微服务 service-autodeliver-8098-sentinel&lt;/p>
&lt;ol>
&lt;li>pom.xml引入依赖&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.alibaba.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-alibaba-sentinel&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>application.yml (配置sentinel dashboard，暴露端点依然要有，删除原有hystrix配置，删除原有OpenFeign的降级配置)&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">server&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8098&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">application&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">service-autodeliver&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cloud&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nacos&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">discovery&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">server-addr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8848&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8849&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8850&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">sentinel&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">transport&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dashboard&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># sentinel dashboard/console 地址&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8719&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># sentinel会在该端口启动http server，那么这样的话，控制台定义的一些限流等规则才能发送传递过来，&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#如果8719端口被占用，那么会依次+1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">management&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">endpoints&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">web&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">exposure&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">include&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;*&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 暴露健康接口的细节&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">endpoint&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">health&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">show-details&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c">#针对的被调用方微服务名称,不加就是全局生效&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">lagou-service-resume&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ribbon&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#请求连接超时时间&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ConnectTimeout&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">2000&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#请求处理超时时间&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">##########################################Feign超时时长设置&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ReadTimeout&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3000&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#对所有操作都进行重试&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">OkToRetryOnAllOperations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">####根据如上配置，当访问到故障请求的时候，它会再尝试访问一次当前实例（次数由MaxAutoRetries配置），&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">####如果不行，就换一个实例进行访问，如果还不行，再换一次实例访问（更换次数由MaxAutoRetriesNextServer配置），&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">####如果依然不行，返回失败信息。&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">MaxAutoRetries&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#对当前选中实例重试次数，不包括第一次调用&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">MaxAutoRetriesNextServer&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#切换实例的重试次数&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">NFLoadBalancerRuleClassName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">com.netflix.loadbalancer.RoundRobinRule&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#负载策略调整&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">logging&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">level&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Feign日志只会对日志级别为debug的做出响应&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">com.lagou.edu.controller.service.ResumeServiceFeignClient&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">debug&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>上述配置之后，启动⾃动投递微服务，使⽤ Sentinel 监控⾃动投递微服务，此时我们发现控制台没有任何变化，因为懒加载，我们只需要发起⼀次请求触发即可&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.loli.net/2020/12/08/BRZcEDqLxCOpoXa.png" alt="76accaef2bdc1ddd0ac844bcb37630e.png">&lt;/p>
&lt;h2 id="sentinel-关键概念">Sentinel 关键概念&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>概念名称&lt;/th>
&lt;th>概念描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>资源&lt;/td>
&lt;td>它可以是 Java 应⽤程序中的任何内容，例如，由应⽤程序提供的服务，或由应⽤程序调⽤ 的其它应⽤提供的服务，甚⾄可以是⼀段代码。我们请求的API接⼝就是资源&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>规则&lt;/td>
&lt;td>围绕资源的实时状态设定的规则，可以包括流量控制规则、熔断降级规则以及系统保护规 则。所有规则可以动态实时调整。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="sentinel-流控规则模块">Sentinel 流控规则模块&lt;/h2>
&lt;p>系统并发能⼒有限，比如系统A的QPS⽀持1个，如果太多请求过来，那么A就应该进行流量控制了，比如其他请求直接拒绝&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2020/12/08/sK2PjmEqpGRkMg3.png" alt="87aa4d1fb2b5dbd2923bea2c69a52f7.png">&lt;/p>
&lt;p>&lt;strong>资源名&lt;/strong>：默认请求路径&lt;/p>
&lt;p>&lt;strong>针对来源&lt;/strong>：Sentinel可以针对调⽤者进⾏限流，填写微服务名称，默认default（不区分来源）&lt;/p>
&lt;p>&lt;strong>阈值类型/单机阈值&lt;/strong>&lt;/p>
&lt;p>QPS：（每秒钟请求数量）当调⽤该资源的QPS达到阈值时进⾏限流&lt;/p>
&lt;p>线程数：当调⽤该资源的线程数达到阈值的时候进⾏限流（线程处理请求的时候，如果说业务逻辑执⾏ 时间很⻓，流量洪峰来临时，会耗费很多线程资源，这些线程资源会堆积，最终可能造成服务不可⽤， 进⼀步上游服务不可⽤，最终可能服务雪崩）&lt;/p>
&lt;p>&lt;strong>是否集群&lt;/strong>：是否集群限流&lt;/p>
&lt;p>&lt;strong>流控模式&lt;/strong>：
直接：资源调⽤达到限流条件时，直接限流&lt;/p>
&lt;p>关联：关联的资源调⽤达到阈值时候限流自己&lt;/p>
&lt;p>链路：只记录指定链路上的流量&lt;/p>
&lt;p>&lt;strong>流控效果&lt;/strong>：
快速失败：直接失败，抛出异常
Warm Up：根据冷加载因⼦（默认3）的值，从阈值/冷加载因⼦，经过预热时⻓，才达到设置的QPS阈 值
排队等待：匀速排队，让请求匀速通过，阈值类型必须设置为QPS，否则⽆效&lt;/p>
&lt;p>&lt;strong>流控模式之关联限流&lt;/strong>：
关联的资源调用达到阈值时候限流⾃⼰，比如用户注册接⼝，需要调⽤身份证校验接口（往往身份证校验接⼝），如果身份证校验接⼝请求达到阈值，使用关联，可以对用户注册接⼝进⾏限流。&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2020/12/08/TOF42v1oMVPabuf.png" alt="7a9ec0d08e146119eee0bcac2f5bca6.png">&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@RestController&lt;/span>
&lt;span class="nd">@RequestMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/user&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 用户注册接口
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@GetMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/register&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">register&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SimpleDateFormat&lt;/span> &lt;span class="n">simpleDateFormat&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SimpleDateFormat&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;yyyy/mm/dd HH:MM:ss&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">simpleDateFormat&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">format&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Date&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; Register success!&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;Register success!&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 验证注册身份证接口（需要调用公安户籍资源）
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@GetMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/validateID&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">findResumeOpenState&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;validateID&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;ValidateID success!&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>模拟密集式请求/user/validateID验证接口，我们会发现/user/register接⼝也被限流了&lt;/p>
&lt;p>&lt;strong>流控模式之链路限流&lt;/strong>&lt;/p>
&lt;p>链路指的是请求链路（调⽤链）&lt;/p>
&lt;p>链路模式下会控制该资源所在的调用链路入口的流量。需要在规则中配置入口资源，即该调用链路入口的上下⽂名称。&lt;/p>
&lt;p>⼀棵典型的调⽤树如下图所示：（阿⾥云提供）&lt;/p>
&lt;pre>&lt;code> machine-root
/ \
/ \
Entrance1 Entrance2
/ \
DefaultNode(nodeA) DefaultNode(nodeA)
&lt;/code>&lt;/pre>&lt;p>上图中来⾃入口 Entrance1 和 Entrance2 的请求都调用到了资源 NodeA，Sentinel 允许只根据某 个调⽤⼊⼝的统计信息对资源限流。⽐如链路模式下设置⼊⼝资源为 Entrance1 来表示只有从入口哦Entrance1 的调用才会记录到 NodeA 的限流统计当中，而不关心经 Entrance2 到来的调⽤。&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2020/12/08/H5awLufM71mnKOp.png" alt="426ae23f80708c3517ab65d72b284ae.png">&lt;/p>
&lt;p>&lt;strong>流控效果之Warm up&lt;/strong>&lt;/p>
&lt;p>当系统长期处于空闲的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮，比如如电商网站的秒杀模块。
通过 Warm Up 模式（预热模式），让通过的流量缓慢增加，经过设置的预热时间以后，到达系统处理请求速率的设定值。
Warm Up 模式默认会从设置的 QPS 阈值的 1/3 开始慢慢往上增加⾄ QPS 设置值。&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2020/12/08/7qd3FPHSvIGOEnw.png" alt="6ed7e1f1f02ab7c4a8ef849ce74d045.png">&lt;/p>
&lt;p>&lt;strong>流控效果之排队等待&lt;/strong>&lt;/p>
&lt;p>排队等待模式下会严格控制请求通过的间隔时间，即请求会匀速通过，允许部分请求排队等待，通常用于消息队列削峰填谷等场景。需设置具体的超时时间，当计算的等待时间超过超时时间时请求就会被拒 绝。
很多流量过来了，并不是直接拒绝请求，而是请求进行排队，⼀个⼀个匀速通过（处理），请求能等就等着被处理，不能等（等待时间&amp;gt;超时时间）就会被拒绝
例如，QPS 配置为 5，则代表请求每 200 ms 才能通过⼀个，多出的请求将排队等待通过。超时时间代 表最⼤排队时间，超出最⼤排队时间的请求将会直接被拒绝。排队等待模式下，QPS 设置值不要超过 1000（请求间隔 1 ms）。&lt;/p>
&lt;h2 id="sentinel-降级规则模块">Sentinel 降级规则模块&lt;/h2>
&lt;p>流控是对外部来的⼤流量进⾏控制，熔断降级的视角是对内部问题进⾏处理。&lt;/p>
&lt;p>Sentinel 降级会在调⽤链路中某个资源出现不稳定状态时（例如调用超时或异常⽐例升⾼），对这个资源的调⽤进⾏限制，让请求快速失败，避免影响到其它的资源⽽导致级联错误。当资源被降级后，在接 下来的降级时间窗⼝之内，对该资源的调用都自动熔断.&lt;/p>
&lt;p>这⾥的降级其实是Hystrix中的熔断，工作流程如下：&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2020/12/08/wRnGchNq2Txki6t.png" alt="6d1c48457aa5c15a6a593cab03ca8e9.png">&lt;/p>
&lt;p>&lt;strong>策略&lt;/strong>&lt;/p>
&lt;p>Sentinel不会像Hystrix那样放过⼀个请求尝试⾃我修复，就是明明确确按照时间窗⼝来，熔断触发后， 时间窗⼝内拒绝请求，时间窗口后就恢复。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>RT（平均响应时间 ）&lt;/p>
&lt;p>当 1s 内持续进⼊ &amp;gt;=5 个请求，平均响应时间超过阈值（以 ms 为单位），那么在接下的时间窗⼝ （以 s 为单位）之内，对这个⽅法的调⽤都会⾃动地熔断（抛出 DegradeException）。注意 Sentinel 默认统计的 RT 上限是 4900 ms，超出此阈值的都会算作 4900 ms，若需要变更此上限 可以通过启动配置项 -Dcsp.sentinel.statistic.max.rt=xxx 来配置。&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2020/12/08/pJMzePKlA6I8cBf.png" alt="a50931d37d15d5e5e0feb49c360cb29.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>异常比例&lt;/p>
&lt;p>当资源的每秒请求量 &amp;gt;= 5，并且每秒异常总数占通过量的比值超过阈值之后，资源进⼊降级状态，即在接下的时间窗口（以 s 为单位）之内，对这个方法的调用都会⾃动地返回。异常比率的阈 值范围是 [0.0, 1.0]，代表 0% - 100%。&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2020/12/08/xOce7w869JInMNu.png" alt="a506e5aa440a7f95a4bc51bc397e049.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>异常数&lt;/p>
&lt;p>当资源近 1 分钟的异常数目超过阈值之后会进⾏熔断。注意由于统计时间窗口是分钟级别的，若 timeWindow 小于 60s，则结束熔断状态后仍可能再进⼊熔断状态。
时间窗口 &amp;gt;= 60s&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2020/12/08/8dBy5CMtrcx32ZL.png" alt="d373afab0152ed39247327aa9b37b77.png">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="sentinel-其他模块">Sentinel 其他模块&lt;/h2>
&lt;p>参考 &lt;a href="https://github.com/alibaba/Sentinel/wiki/%E4%B8%BB%E9%A1%B5">wiki&lt;/a>&lt;/p>
&lt;h2 id="sentinel-自定义兜底逻辑">Sentinel 自定义兜底逻辑&lt;/h2>
&lt;p>@SentinelResource注解类似于Hystrix中的@HystrixCommand注解
@SentinelResource注解中有两个属性需要我们进⾏区分，blockHandler属性⽤来指定不满⾜Sentinel 规则的降级兜底⽅法，fallback属性⽤于指定Java运⾏时异常兜底⽅法&lt;/p>
&lt;ol>
&lt;li>在API接口资源处配置&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @SentinelResource
&lt;/span>&lt;span class="cm"> * value： 定义资源名
&lt;/span>&lt;span class="cm"> * blockHandlerClass：指定Sentinel规则异常兜底逻辑所在的class类
&lt;/span>&lt;span class="cm"> * blockHandler：指定Sentinel规则异常兜底逻辑具体哪个方法
&lt;/span>&lt;span class="cm"> * fallbackClass：指定Java运⾏时异常兜底逻辑所在class类
&lt;/span>&lt;span class="cm"> * fallback：指定Java运⾏时异常兜底逻辑具体哪个⽅法
&lt;/span>&lt;span class="cm"> * @param userId
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@GetMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/checkState/{userId}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1">// @SentinelResource注解类似于Hystrix中的@HystrixCommand注解
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@SentinelResource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;findResumeOpenState&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">blockHandlerClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SentinelHandlersClass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">blockHandler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;handleException&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">fallbackClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SentinelHandlersClass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">fallback&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;handleError&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="nf">findResumeOpenState&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@PathVariable&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">userId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 模拟降级：
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="cm">/*try {
&lt;/span>&lt;span class="cm"> Thread.sleep(1000);
&lt;/span>&lt;span class="cm"> } catch (InterruptedException e) {
&lt;/span>&lt;span class="cm"> e.printStackTrace();
&lt;/span>&lt;span class="cm"> }*/&lt;/span>
&lt;span class="c1">// 模拟降级：异常比例
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//int i = 1/0;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="n">defaultResumeState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">resumeServiceFeignClient&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">findDefaultResumeState&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">userId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">defaultResumeState&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>自定义兜底类&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SentinelHandlersClass&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 整体要求和当时Hystrix一样，这里还需要在形参中添加BlockException参数，用于接收异常
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 注意：方法是静态的
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="nf">handleException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">userId&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BlockException&lt;/span> &lt;span class="n">blockException&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">100&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="nf">handleError&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">userId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">500&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="基于-nacos-实现-sentinel-规则持久化">基于 Nacos 实现 Sentinel 规则持久化&lt;/h2>
&lt;p>⽬前，Sentinel Dashboard中添加的规则数据存储在内存，微服务停掉规则数据就消失，在生产环境下不合适。我们可以将Sentinel规则数据持久化到Nacos配置中心，让微服务从Nacos获取规则数据。&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2020/12/08/G1tWbASXYkInVlw.png" alt="9b52707e5d0b1d6eeffd197582cd4e4.png">&lt;/p>
&lt;ol>
&lt;li>自动投递微服务的pom.xml中添加依赖&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="c">&amp;lt;!-- Sentinel支持采用 Nacos 作为规则配置数据源，引入该适配依赖 --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.alibaba.csp&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>sentinel-datasource-nacos&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>⾃动投递微服务的application.yml中配置Nacos数据源&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">application&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">service-autodeliver&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cloud&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nacos&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">discovery&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">server-addr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8848&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8849&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8850&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">sentinel&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">transport&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dashboard&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># sentinel dashboard/console 地址&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8719&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># sentinel会在该端口启动http server，那么这样的话，控制台定义的一些限流等规则才能发送传递过来，&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#如果8719端口被占用，那么会依次+1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Sentinel Nacos数据源配置，Nacos中的规则会⾃动同步到sentinel控制台的流控规则中&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">datasource&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#此处的flow为自定义数据源名&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">flow&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nacos&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">server-addr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${spring.cloud.nacos.discovery.server-addr}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">data-id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${spring.application.name}-flow-rules&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">groupId&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">DEFAULT_GROUP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">data-type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">json&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">rule-type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">flow&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 类型来自RuleType类&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">degrade&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nacos&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">server-addr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${spring.cloud.nacos.discovery.server-addr}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">data-id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${spring.application.name}-degrade-rules&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">groupId&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">DEFAULT_GROUP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">data-type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">json &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">rule-type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">degrade&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 类型来⾃RuleType类&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>
&lt;p>Nacos Server中添加对应规则配置集（public命名空间—&amp;gt;DEFAULT_GROUP中添加）&lt;/p>
&lt;p>&lt;strong>新建流控规则配置集service-autodeliver-flow-rules&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">[&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;resource&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;findResumeOpenState&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;limitApp&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;default&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;grade&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;count&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;strategy&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;controlBehavior&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;clusterMode&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="kc">false&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>所有属性来自源码FlowRule类&lt;/p>
&lt;ul>
&lt;li>resource：资源名称&lt;/li>
&lt;li>limitApp：来源应⽤&lt;/li>
&lt;li>grade：阈值类型 0 线程数 1 QPS&lt;/li>
&lt;li>count：单机阈值&lt;/li>
&lt;li>strategy：流控模式，0 直接 1 关联 2 链路&lt;/li>
&lt;li>controlBehavior：流控效果，0 快速失败 1 Warm Up 2 排队等待&lt;/li>
&lt;li>clusterMode：true/false 是否集群&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>新建降级规则配置集 service-autodeliver-degrade-rules&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">[&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;resource&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;findResumeOpenState&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;grade&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;count&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;timeWindow&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">5&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>所有属性来⾃源码DegradeRule类：&lt;/p>
&lt;ul>
&lt;li>resource：资源名称&lt;/li>
&lt;li>grade：降级策略 0 RT 1 异常⽐例 2 异常数&lt;/li>
&lt;li>count：阈值&lt;/li>
&lt;li>timeWindow：时间窗&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>注意&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>⼀个资源可以同时有多个限流规则和降级规则，所以配置集中是⼀个json数组&lt;/li>
&lt;li>Sentinel控制台中修改规则，仅是内存中生效，不会修改Nacos中的配置值，重启后恢复原来的值； Nacos控制台中修改规则，不仅内存中生效，Nacos中持久化规则也⽣效，重启后规则依然保持&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/springcloud/">springcloud</category><category domain="https://chuchin.cn/tags/java/">Java</category><category domain="https://chuchin.cn/tags/spring-cloud/">Spring Cloud</category><category domain="https://chuchin.cn/tags/sentinel/">Sentinel</category></item><item><title>SCA核心组件 Nacos</title><link>https://chuchin.cn/tech/distributed-micro-service/springcloud/sca-core-nacos/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/springcloud/sca-core-nacos/</guid><pubDate>Thu, 15 Oct 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>&lt;em>本文源代码下载：&lt;a href="https://chuchin.cn/file/springcloud/spring-cloud-nacos.zip">spring-cloud-nacos.zip&lt;/a>&lt;/em>&lt;/p>
&lt;h2 id="nacos-介绍">Nacos 介绍&lt;/h2>
&lt;p>Nacos （Dynamic Naming and Configuration Service）是阿里巴巴开源的⼀个针对微服务架构中服务发现、配置管理和服务管理平台。&lt;/p>
&lt;p>Nacos就是注册中心+配置中心的组合（Nacos=Eureka+Config+Bus）&lt;/p>
&lt;p>官网 &lt;a href="https://nacos.io/zh-cn/">home (nacos.io)&lt;/a> 下载地址 &lt;a href="https://github.com/alibaba/Nacos">alibaba/nacos&lt;/a>&lt;/p>
&lt;p>&lt;strong>Nacos功能特性&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>服务发现与健康检查&lt;/li>
&lt;li>动态配置管理&lt;/li>
&lt;li>动态DNS服务&lt;/li>
&lt;li>服务和元数据管理（管理平台的⻆度，nacos也有⼀个ui页面，可以看到注册的服务及其实例信息 （元数据信息）等），动态的服务权重调整、动态服务优雅下线，都可以去做&lt;/li>
&lt;/ul>
&lt;h2 id="nacos-单例服务部署">Nacos 单例服务部署&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>下载解压安装包，执行命令启动（nacos-server-1.3.1.tar.gz）&lt;/p>
&lt;p>Linux/Unix/Mac&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">sh startup.sh -m standalone
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>​ 如果您使用的是ubuntu系统，或者运行脚本报错提示[[符号找不到，可尝试如下运行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">bash startup.sh -m standalone
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>​ Windows&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="n">cmd&lt;/span> &lt;span class="n">startup&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cmd&lt;/span> &lt;span class="n">-m&lt;/span> &lt;span class="n">standalone&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>
&lt;p>访问nacos管理界面：&lt;a href="http://127.0.0.1:8848/nacos/#/login">http://127.0.0.1:8848/nacos/#/login&lt;/a>（默认端口8848，账号和密码 nacos/nacos）&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2020/12/08/PO1D4kaj5BwGUJd.png" alt="416096ac8f092aecc838e9ba19c8f0b.png">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="nacos-服务注册中心">Nacos 服务注册中心&lt;/h2>
&lt;h3 id="服务提供者注册到nacos改造简历微服务">服务提供者注册到Nacos（改造简历微服务）&lt;/h3>
&lt;ol>
&lt;li>在父pom引入SCA依赖&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependencyManagement&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.alibaba.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-alibaba-dependencies&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>2.1.0.RELEASE&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;scope&amp;gt;&lt;/span>import&lt;span class="nt">&amp;lt;/scope&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependencyManagement&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>在服务提供者工程中引入nacos客户端依赖（注释eureka客户端）&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!--nacos service discovery client依赖--&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.alibaba.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-alibaba-nacos-discovery&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!--nacos config client 依赖--&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.alibaba.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-alibaba-nacos-config&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>application.yml修改，添加nacos配置信息&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">server&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8082&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">application&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">service-resume&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">datasource&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">driver-class-name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">com.mysql.jdbc.Driver&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">url&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">jdbc:mysql://localhost:3306/springcloud?useUnicode=true&amp;amp;characterEncoding=utf8&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">username&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">root&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">password&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">123456&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">jpa&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">database&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MySQL&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">show-sql&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hibernate&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">naming&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">physical-strategy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#避免将驼峰命名转换为下划线命名&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># nacos配置&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cloud&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nacos&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">discovery&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">server-addr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">172.20.158.74&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8848&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">management&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">endpoints&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">web&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">exposure&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">include&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;*&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>启动简历微服务，观察nacos控制台&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.loli.net/2020/12/08/qQyseC68bEUzTZP.png" alt="f44766641a5f24046c6bf1cb48c455b.png">&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2020/12/08/BLvZGC1VJYNzq75.png" alt="001b1f493a6794824cf269953a5c151.png">&lt;/p>
&lt;p>保护阈值：可以设置为0-1之间的浮点数，它其实是⼀个比例值（当前服务健康实例数/当前服务总实例数）&lt;/p>
&lt;p>场景：
⼀般流程下，nacos是服务注册中心，服务消费者要从nacos获取某⼀个服务的可用实例信息，对于服务实例有健康/不健康状态之分，nacos在返回给消费者实例信息的时候，会返回健康实例。这个时候在⼀些⾼并发、⼤流量场景下会存在⼀定的问题
如果服务A有100个实例，98个实例都不健康了，只有2个实例是健康的，如果nacos只返回这两个健康实例的信息的话，那么后续消费者的请求将全部被分配到这两个实例，流量洪峰到来，2个健康的实例也扛不住了，整个服务A 就扛不住，上游的微服务也会导致崩溃产生雪崩效应。
保护阈值的意义在于
当服务A健康实例数/总实例数 &amp;lt; 保护阈值 的时候，说明健康实例真的不多了，这个时候保护阈值会被触 发（状态true）
nacos将会把该服务所有的实例信息（健康的+不健康的）全部提供给消费者，消费者可能访问到不健康 的实例，请求失败，但这样也比造成雪崩要好，牺牲了⼀些请求，保证了整个系统的⼀个可⽤。 注意：阿里内部在使⽤nacos的时候，也经常调整这个保护阈值参数。&lt;/p>
&lt;h3 id="服务消费者从nacos获取服务提供者改造自动投递微服务">服务消费者从Nacos获取服务提供者（改造自动投递微服务）&lt;/h3>
&lt;ol>
&lt;li>同服务提供者&lt;/li>
&lt;li>测试&lt;/li>
&lt;/ol>
&lt;h3 id="负载均衡">负载均衡&lt;/h3>
&lt;p>Nacos客户端引⼊的时候，会关联引⼊Ribbon的依赖包，我们使用OpenFiegn的时候也会引⼊Ribbon 的依赖，Ribbon包括Hystrix都按原来⽅式进⾏配置即可
此处，我们将简历微服务，又启动了⼀个8083端⼝，注册到Nacos上，便于测试负载均衡，我们通过后台也可以看出。&lt;/p>
&lt;h3 id="nacos-数据模型领域模型">Nacos 数据模型（领域模型）&lt;/h3>
&lt;p>Namespace命名空间、Group分组、集群这些都是为了进行归类管理，把服务和配置文件进行归类， 归类之后就可以实现⼀定的效果，比如隔离&lt;/p>
&lt;p>比如，对于服务来说，不同命名空间中的服务不能够互相访问调用&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2020/12/08/R9XC6Odv2Sz3hnq.png" alt="6d492cfd1e863cbf83507a8ac010506.png">&lt;/p>
&lt;p>&lt;strong>Namespace&lt;/strong>：命名空间，对不同的环境进⾏隔离，比如隔离开发环境、测试环境和⽣产环境&lt;/p>
&lt;p>&lt;strong>Group&lt;/strong>：分组，将若干个服务或者若干个配置集归为⼀组，通常习惯⼀个系统归为⼀个组&lt;/p>
&lt;p>&lt;strong>Service&lt;/strong>：某一个服务，比如简历服务&lt;/p>
&lt;p>&lt;strong>DataId&lt;/strong>：配置集或者可以认为是⼀个配置文件&lt;/p>
&lt;p>Namespace + Group + Service 如同 Maven 中的GAV坐标，GAV坐标是为了锁定Jar，⼆这⾥是为了 锁定服务&lt;/p>
&lt;p>Namespace + Group + DataId 如同 Maven 中的GAV坐标，GAV坐标是为了锁定Jar，⼆这⾥是为了 锁定配置文件&lt;/p>
&lt;p>&lt;strong>最佳实践&lt;/strong>&lt;/p>
&lt;p>Nacos抽象出了Namespace、Group、Service、DataId等概念，具体代表什么取决于怎么用（非常灵活），推荐用法如下&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>概念&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Namespace&lt;/td>
&lt;td>代表不同的环境，如开发dev、测试test、生产环境prod&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Group&lt;/td>
&lt;td>代表某项目&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Service&lt;/td>
&lt;td>某个项目中具体XXX服务&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DataId&lt;/td>
&lt;td>某个项目中的XXX配置文件&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>Nacos服务的分级模型&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2020/12/08/X1EMWpbhaY8VQlP.png" alt="1a8500bc6177bade9cf7610b9dcdbd4.png">&lt;/p>
&lt;h3 id="nacos-server-数据持久化">Nacos Server 数据持久化&lt;/h3>
&lt;p>Nacos 默认使用嵌入式数据库进⾏数据存储，它⽀持改为外部Mysql存储&lt;/p>
&lt;ol>
&lt;li>新建数据库 nacos_config，数据库初始化脚本⽂件 ${nacoshome}/conf/nacos-mysql.sql&lt;/li>
&lt;li>修改${nacoshome}/conf/application.properties，增加Mysql数据源配置&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">
#*************** Config Module Related Configurations ***************#
### If use MySQL as datasource:
spring.datasource.platform=mysql
### Count of DB:
db.num=1
### Connect URL of DB:
db.url.0=jdbc:mysql://127.0.0.1:3306/nacos-config?characterEncoding=utf8&lt;span class="err">&amp;amp;&lt;/span>connectTimeout=1000&lt;span class="err">&amp;amp;&lt;/span>socketTimeout=3000&lt;span class="err">&amp;amp;&lt;/span>autoReconnect=true&lt;span class="err">&amp;amp;&lt;/span>useUnicode=true&lt;span class="err">&amp;amp;&lt;/span>useSSL=false&lt;span class="err">&amp;amp;&lt;/span>serverTimezone=UTC
db.user=root
db.password=123456
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="nacos-server-集群">Nacos Server 集群&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>安装3个或3个以上的Nacos，复制解压后的nacos⽂件夹，分别命名为nacos-01、nacos-02、nacos-03&lt;/p>
&lt;/li>
&lt;li>
&lt;p>修改配置文件&lt;/p>
&lt;ul>
&lt;li>
&lt;p>同⼀台机器模拟，将上述三个⽂件夹中application.properties中的server.port分别改为 8848、8849、8850&lt;/p>
&lt;p>同时给当前实例节点绑定ip，因为服务器可能绑定多个ip&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="l">nacos.inetutils.ip-address=127.0.0.1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>复制⼀份conf/cluster.conf.example⽂件，命名为cluster.conf 在配置⽂件中设置集群中每⼀个节点的信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="c"># 集群节点配置 &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8848&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8849&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8850&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>分别启动每一个实例（可以批处理脚本完成）&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">sh startup.sh -m cluster
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>服务注册&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cloud&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nacos&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">discovery&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">server-addr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8848&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8849&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8850&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="nacos-配置中心">Nacos 配置中心&lt;/h2>
&lt;p>之前：Spring Cloud Config + Bus&lt;/p>
&lt;ol>
&lt;li>Github 上添加配置⽂件&lt;/li>
&lt;li>创建Config Server 配置中⼼—&amp;gt;从Github上去下载配置信息&lt;/li>
&lt;li>具体的微服务(最终使用配置信息的)中配置Config Client—&amp;gt; ConfigServer获取配置信息&lt;/li>
&lt;/ol>
&lt;p>有nacos之后，分布式配置就简单很多&lt;/p>
&lt;p>Github不需要了（配置信息直接配置在Nacos server中），Bus也不需要了(依然可以完成动态刷新)&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Nacos Server 添加配置集&lt;/p>
&lt;p>新建命名空间---&amp;gt;新建命名空间下的配置&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.loli.net/2020/12/08/8zakO4IgmJeAV63.png" alt="3867e6821808191d99e2179ccc4cf06.png">&lt;/p>
&lt;p>Nacos 服务端已经搭建完毕，那么我们可以在我们的微服务中开启 Nacos 配置管理&lt;/p>
&lt;ol start="2">
&lt;li>添加依赖&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="c">&amp;lt;!--nacos config client 依赖--&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.alibaba.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-alibaba-nacos-config&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>微服务中如何锁定 Nacos Server 中的配置文件（dataId）&lt;/li>
&lt;/ol>
&lt;p>通过 Namespace + Group + dataId 来锁定配置⽂件，Namespace不指定就默认public，Group不指定 就默认 DEFAULT_GROUP&lt;/p>
&lt;p>dataId的完整格式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="l">${prefix}-${spring.profile.active}.${file-extension}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>prefix 默认为 spring.application.name 的值，也可以通过配置项 spring.cloud.nacos.config.prefix来配置。&lt;/p>
&lt;p>spring.profile.active 即为当前环境对应的 profile。 注意：当 spring.profile.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 ${prefix}.${fileextension}&lt;/p>
&lt;p>file-exetension 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。⽬前只⽀持 properties 和 yaml 类型。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># nacos配置&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cloud&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nacos&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">discovery&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">server-addr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8848&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8849&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8850&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">config&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">server-addr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8848&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8849&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8850&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">0ac49e33-bc71-47d2-9320-17789cb4adf6&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">DEFAULT_GROUP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">file-extension&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>通过 Spring Cloud 原⽣注解 @RefreshScope 实现配置自动更新&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@RestController&lt;/span>
&lt;span class="nd">@RequestMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/config&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@RefreshScope&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ConfigController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Value&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;${chuchin.test}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@GetMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/viewConfig&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">viewConfig&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>​ 一个微服务希望从配置中心Nacos Server 中获取多个dataId的配置信息，拓展多个配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># nacos配置&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cloud&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nacos&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">discovery&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">server-addr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8848&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8849&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8850&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">config&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">server-addr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8848&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8849&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8850&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">0ac49e33-bc71-47d2-9320-17789cb4adf6&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">DEFAULT_GROUP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">file-extension&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 根据规则拼接出来的dataId效果：service-resume.yml&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ext-config[0]&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">data-id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">abc.yml&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">DEFAULT_GROUP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">refresh&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ext-config[1]&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">data-id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">def.yml&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">DEFAULT_GROUP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">refresh&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>优先级：根据规则⽣成的dataId &amp;gt; 扩展的dataId（对于扩展的dataId，[n] n越⼤优先级越⾼）&lt;/p></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/springcloud/">springcloud</category><category domain="https://chuchin.cn/tags/java/">Java</category><category domain="https://chuchin.cn/tags/spring-cloud/">Spring Cloud</category><category domain="https://chuchin.cn/tags/nacos/">Nacos</category></item><item><title>统一认证 OAuth2+JWT</title><link>https://chuchin.cn/tech/distributed-micro-service/springcloud/oauth2+jwt/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/springcloud/oauth2+jwt/</guid><pubDate>Wed, 14 Oct 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>&lt;em>本文源代码下载：&lt;a href="https://chuchin.cn/file/springcloud/spring-cloud-oauth2+jwt.zip">spring-cloud-oauth2+jwt.zip&lt;/a>&lt;/em>&lt;/p>
&lt;p>认证：验证用户的合法身份，比如输入用户名和密码，系统会在后台验证⽤户名和密码是否合法， 合法的前提下，才能够进行后续的操作，访问受保护的资源&lt;/p>
&lt;h2 id="微服务架构下统一认证场景">微服务架构下统一认证场景&lt;/h2>
&lt;p>分布式系统的每个服务都会有认证需求，如果每个服务都实现⼀套认证逻辑会非常冗余，考虑分布式系统共享性的特点，需要由独⽴的认证服务处理系统认证的请求。&lt;/p>
&lt;h2 id="微服务架构下统一认证思路">微服务架构下统一认证思路&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>基于Session的认证方式&lt;/p>
&lt;p>在分布式的环境下，基于session的认证会出现⼀个问题，每个应⽤服务都需要在session中存储用户身份信息，通过负载均衡将本地的请求分配到另⼀个应用服务需要将session信息带过去，否则会重新认证。我们可以使用Session共享、Session黏贴等⽅案。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>基于token的认证方式&lt;/p>
&lt;p>基于token的认证⽅式，服务端不用存储认证数据，易维护扩展性强， 客户端可以把token存在任意地⽅，并且可以实现web和app统⼀认证机制。其缺点也很明显，token由于⾃包含信息，因此⼀般数据量较⼤，⽽且每次请求都需要传递，因此比较占带宽。另外，token的签名验签操作也会 给cpu带来额外的处理负担。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="oauth2-开放授权协议标准">OAuth2 开放授权协议/标准&lt;/h2>
&lt;h3 id="oauth2-介绍">OAuth2 介绍&lt;/h3>
&lt;p>OAuth（开放授权）是⼀个开放协议/标准，允许⽤户授权第三方应用访问他们存储在另外的服务提供者上的信息，而不需要将⽤户名和密码提供给第三⽅应用或分享他们数据的所有内容。&lt;/p>
&lt;p>&lt;strong>允许用户授权第三⽅应用访问他们存储在另外的服务提供者上的信息，而不需要将用户名和密码提供给第三⽅应用或分享他们数据的所有内容&lt;/strong>&lt;/p>
&lt;p>结合“使用QQ登录第三方网站”这个场景拆分理解上述那句话&lt;/p>
&lt;p>用户：我们自己&lt;/p>
&lt;p>第三方应用：网站&lt;/p>
&lt;p>另外的服务提供者：QQ&lt;/p>
&lt;p>OAuth2是OAuth协议的延续版本，但不向后兼容OAuth1即完全废除OAuth1&lt;/p>
&lt;h3 id="oauth2-协议角色和流程">OAuth2 协议角色和流程&lt;/h3>
&lt;p>网站要开发使用QQ登录这个功能的话，那么是需要提前到QQ平台进行登记的&lt;/p>
&lt;ol>
&lt;li>网站--&amp;gt;登记--&amp;gt;QQ平台&lt;/li>
&lt;li>QQ 平台会颁发⼀些参数给网站，后续上线进行授权登录的时候（刚才打开授权⻚⾯）需要携带这些参数&lt;/li>
&lt;/ol>
&lt;p>client_id：客户端id （QQ最终相当于⼀个认证授权服务器，网站就相当于⼀个客户端了，所以会给⼀个客户端id），相当于账号&lt;/p>
&lt;p>secret：相当于密码&lt;/p>
&lt;ul>
&lt;li>资源所有者（Resource Owner）：可以理解为用户自己&lt;/li>
&lt;li>客户端（Client）：我们想登陆的网站或应⽤，比如拉勾网&lt;/li>
&lt;li>认证服务器（Authorization Server）：可以理解为微信或者QQ&lt;/li>
&lt;li>资源服务器（Resource Server）：可以理解为微信或者QQ&lt;/li>
&lt;/ul>
&lt;h3 id="什么情况下需要使用oauth2">什么情况下需要使用OAuth2&lt;/h3>
&lt;p>&lt;strong>第三⽅授权登录的场景&lt;/strong>：比如，我们经常登录⼀些⽹站或者应⽤的时候，可以选择使⽤第三⽅授权登录 的⽅式，比如：微信授权登录、QQ授权登录、微博授权登录等，这是典型的 OAuth2 使⽤场景。&lt;/p>
&lt;p>&lt;strong>单点登录的场景&lt;/strong>：如果项目中有很多微服务或者公司内部有很多服务，可以专门做⼀个认证中心（充当 认证平台⻆⾊），所有的服务都要到这个认证中心做认证，只做⼀次登录，就可以在多个授权范围内的 服务中⾃由串⾏。&lt;/p>
&lt;h3 id="oauth2的颁发token授权方式">OAuth2的颁发Token授权方式&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>授权码（authorization-code）&lt;/strong>&lt;/li>
&lt;li>&lt;strong>密码式（password）提供用户名+密码换取token&lt;/strong>&lt;/li>
&lt;li>&lt;strong>隐藏式（implicit）&lt;/strong>&lt;/li>
&lt;li>&lt;strong>客户端凭证（client credentials）&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>授权码模式使⽤到了回调地址，是最复杂的授权方式，微博、微信、QQ等第三⽅登录就是这种模式。 这里重点介绍接口对接中常使用的password密码模式（提供用户名+密码换取token）&lt;/p>
&lt;h2 id="spring-cloud-oauth2--jwt-实现">Spring Cloud OAuth2 + JWT 实现&lt;/h2>
&lt;h3 id="spring-cloud-oauth2-介绍">Spring Cloud OAuth2 介绍&lt;/h3>
&lt;p>Spring Cloud OAuth2 是 Spring Cloud 体系对OAuth2协议的实现，可以用来做多个微服务的统⼀认证 （验证身份合法性）授权（验证权限）。通过向OAuth2服务（统⼀认证授权服务）发送某个类型的 grant_type进行集中认证和授权，从而获得access_token（访问令牌），而这个token是受其他微服务信任的。&lt;/p>
&lt;p>&lt;strong>注意：使用OAuth2解决问题的本质是，引⼊了⼀个认证授权层，认证授权层连接了资源的拥有者，在授权层⾥⾯，资源的拥有者可以给第三⽅应⽤授权去访问我们的某些受保护资源。&lt;/strong>&lt;/p>
&lt;h3 id="spring-cloud-oauth2-构建微服务统一认证服务思路">Spring Cloud OAuth2 构建微服务统一认证服务思路&lt;/h3>
&lt;p>在我们统⼀认证的场景中，Resource Server其实就是我们的各种受保护的微服务，微服务中的各种API访问接口就是资源，发起http请求的浏览器就是Client客户端（对应为第三⽅应⽤）&lt;/p>
&lt;h3 id="搭建认证服务器authorization-server">搭建认证服务器（Authorization Server）&lt;/h3>
&lt;p>认证服务器（Authorization Server），负责颁发token&lt;/p>
&lt;ol>
&lt;li>新建子模块 cloud-oauth-server-9999&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-netflix-eureka-client&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-oauth2&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;exclusions&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;exclusion&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.security.oauth.boot&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-security-oauth2-autoconfigure&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/exclusion&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/exclusions&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.security.oauth.boot&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-security-oauth2-autoconfigure&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>2.1.11.RELEASE&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.security.oauth&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-security-oauth2&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>2.3.4.RELEASE&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>配置&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">server&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">9999&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">eureka&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">client&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">service-url&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">defaultZone&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http://a.eureka.server:8761/eureka/,http://b.eureka.server:8762/eureka/&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">instance&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#使⽤ip注册，否则会使⽤主机名注册了（此处考虑到对⽼版本的兼容，新版本经过实验都是ip）&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">prefer-ip-address&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#⾃定义实例显示格式，加上版本号，便于多版本管理，注意是ip-address，早期版本是ipAddress&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">instance-id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${spring.cloud.client.ipaddress}:${spring.application.name}:${server.port}:@project.version@&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">application&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cloud-oauth-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>启动类&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@SpringBootApplication&lt;/span>
&lt;span class="nd">@EnableDiscoveryClient&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">CloudOauthServer9999&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SpringApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CloudOauthServer9999&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>认证服务器配置类&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;span class="lnt">89
&lt;/span>&lt;span class="lnt">90
&lt;/span>&lt;span class="lnt">91
&lt;/span>&lt;span class="lnt">92
&lt;/span>&lt;span class="lnt">93
&lt;/span>&lt;span class="lnt">94
&lt;/span>&lt;span class="lnt">95
&lt;/span>&lt;span class="lnt">96
&lt;/span>&lt;span class="lnt">97
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 当前类为Oauth2 Server的配置类（需要继承特定的父类）
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="nd">@EnableAuthorizationServer&lt;/span> &lt;span class="c1">//开启认证服务器功能
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">OauthServerConfigurer&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">AuthorizationServerConfigurerAdapter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">AuthenticationManager&lt;/span> &lt;span class="n">authenticationManager&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 认证服务器最终是以api接口的方式对外提供服务（检验合法性并生成令牌、校验令牌等）
&lt;/span>&lt;span class="cm"> * 那么，以api接口方式对外的话，就涉及到接口的访问权限，为此在此进行必要的配置
&lt;/span>&lt;span class="cm"> * @param security
&lt;/span>&lt;span class="cm"> * @throws Exception
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">configure&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AuthorizationServerSecurityConfigurer&lt;/span> &lt;span class="n">security&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">super&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">configure&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">security&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">security&lt;/span> &lt;span class="c1">//允许客户端表单认证
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">allowFormAuthenticationForClients&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="c1">//开启端口/oauth/token_key的访问权限（允许）
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">tokenKeyAccess&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;permitAll&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1">//开启端口/oauth/check_token的访问权限（允许）
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">checkTokenAccess&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;permitAll&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 客户端详情配置
&lt;/span>&lt;span class="cm"> * 比如client_id, secret
&lt;/span>&lt;span class="cm"> * 当前这个服务就如同QQ平台，网站作为客户端需要QQ平台进行登录授权认证等，提前需要到QQ平台注册
&lt;/span>&lt;span class="cm"> * QQ平台会给网站
&lt;/span>&lt;span class="cm"> * 颁发client_id等必要参数，说明客户端是谁
&lt;/span>&lt;span class="cm"> * @param clients
&lt;/span>&lt;span class="cm"> * @throws Exception
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">configure&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ClientDetailsServiceConfigurer&lt;/span> &lt;span class="n">clients&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">super&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">configure&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">clients&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//客户端信息存储到什么地方，可以在内存中，可以在数据库里
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">clients&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">inMemory&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="c1">//添加一个client配置，指定其client_id
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">withClient&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;client_edm&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1">//指定客户端的密码/安全码
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">secret&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;abcxyz&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1">//指定客户端所能访问资源id清单，此处的资源id是需要在具体的资源服务器上配置也一样
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">resourceIds&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;autodeliver&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1">//认证类型/令牌颁发模式，可以配置多个在这里，但不一定都用，
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 具体使用哪种方式颁发token，需要客户端调用的使用传递参数指定
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">authorizedGrantTypes&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;refresh_token&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1">//客户端权限范围，此处配置为all即可
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">scopes&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;all&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 配置token令牌管理相关，当下的token需要在服务器端存储
&lt;/span>&lt;span class="cm"> * @param endpoints
&lt;/span>&lt;span class="cm"> * @throws Exception
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">configure&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AuthorizationServerEndpointsConfigurer&lt;/span> &lt;span class="n">endpoints&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">super&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">configure&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">endpoints&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//指定token存储方式
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">endpoints&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">tokenStore&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">getTokenStore&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="c1">//token服务的一个描述，可以认为是token生成细节的描述，比如有效时间多少等
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">tokenServices&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">getAuthorizationServerTokenServices&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="c1">//指定认证器，随后注入一个到当前类使用即可
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">authenticationManager&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">authenticationManager&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">allowedTokenEndpointRequestMethods&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpMethod&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">GET&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">HttpMethod&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">POST&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 创建tokenStore对象
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">TokenStore&lt;/span> &lt;span class="nf">getTokenStore&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InMemoryTokenStore&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 该方法用户获取一个token服务对象（该对象描述了一个token有效期等信息）
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">AuthorizationServerTokenServices&lt;/span> &lt;span class="nf">getAuthorizationServerTokenServices&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//使用默认实现
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DefaultTokenServices&lt;/span> &lt;span class="n">defaultTokenServices&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DefaultTokenServices&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//是否开启令牌刷新
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">defaultTokenServices&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSupportRefreshToken&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">defaultTokenServices&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setTokenStore&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">getTokenStore&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">//设置令牌有效时间（一般设置为20小时）
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//access_token就是我们请求资源需要携带的令牌
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">defaultTokenServices&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAccessTokenValiditySeconds&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">20&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//3天
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">defaultTokenServices&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setRefreshTokenValiditySeconds&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">259200&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">defaultTokenServices&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>关于三个configure方法&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>configure(ClientDetailServiceConfigurer clients)&lt;/strong>&lt;/p>
&lt;p>用来配置客户端详情服务（ClientDetailService），客户端详情信息在 这⾥进⾏初始化，你 能够把客户端详情信息写死在这⾥或者是通过数据库来存储调取详情信息&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>configure(AuthorizationServerEndpointsConfigurer endpoints)&lt;/strong>&lt;/p>
&lt;p>⽤来配置令牌（token）的访问端点和令牌服务(token services)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>configure(AuthorizationServerSecurityConfigurer oauthServer)&lt;/strong>&lt;/p>
&lt;p>⽤来配置令牌端点的安全约束.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>关于TokenStore&lt;/p>
&lt;ul>
&lt;li>
&lt;p>InMemoryTokenStore&lt;/p>
&lt;p>默认采⽤，它可以完美的⼯作在单服务器上（即访问并发量 压⼒不⼤的情况下，并且它 在失败的时候不会进⾏备份），⼤多数的项⽬都可以使⽤这个版本的实现来进⾏ 尝试， 你可以在开发的时候使⽤它来进⾏管理，因为不会被保存到磁盘中，所以更易于调试。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>JdbcTokenStore&lt;/p>
&lt;p>这是⼀个基于JDBC的实现版本，令牌会被保存进关系型数据库。使⽤这个版本的实现 时， 你可以在不同的服务器之间共享令牌信息，使⽤这个版本的时候请注意把&amp;quot;springjdbc&amp;quot;这个依赖加⼊到你的 classpath当中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>JwtTokenStore&lt;/p>
&lt;p>这个版本的全称是 JSON Web Token（JWT），它可以把令牌相关的数 据进⾏编码（因此对于后端服务来说，它不需要进⾏存储，这将是⼀个重⼤优势），缺 点就是这个令牌占⽤的空间会⽐较⼤，如果你加⼊了⽐较多⽤户凭证信息， JwtTokenStore 不会保存任何数据。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol start="5">
&lt;li>认证服务器安全配置类&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SecurityConfigure&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">WebSecurityConfigurerAdapter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">PasswordEncoder&lt;/span> &lt;span class="n">passwordEncoder&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 注册一个认证管理器对象到容器
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> * @throws Exception
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">AuthenticationManager&lt;/span> &lt;span class="nf">authenticationManagerBean&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kd">super&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">authenticationManagerBean&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">PasswordEncoder&lt;/span> &lt;span class="nf">passwordEncoder&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">NoOpPasswordEncoder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstance&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 处理用户名和密码验证事宜
&lt;/span>&lt;span class="cm"> * 1. 客户端传递username和password 参数到认证服务器
&lt;/span>&lt;span class="cm"> * 2. 一般来说username 和password 会存储在数据库中的用户表
&lt;/span>&lt;span class="cm"> * 3. 根据用户表中数据，验证当前传递过来的用户信息的合法性
&lt;/span>&lt;span class="cm"> * @param auth
&lt;/span>&lt;span class="cm"> * @throws Exception
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">configure&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AuthenticationManagerBuilder&lt;/span> &lt;span class="n">auth&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//在这个方法中就可以去关联数据库了，当前先把用户信息配置在内存中
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//实例化一个用户对象（相当于数据表中的一条用户记录）
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">UserDetails&lt;/span> &lt;span class="n">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">User&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;admin&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="s">&amp;#34;123456&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;());&lt;/span>
&lt;span class="n">auth&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">inMemoryAuthentication&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withUser&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">passwordEncoder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">passwordEncoder&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="6">
&lt;li>请求测试&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">#获取token
GET http://localhost:9999/oauth/token?client_secret=abcxyz&lt;span class="err">&amp;amp;&lt;/span>grant_type=password&lt;span class="err">&amp;amp;&lt;/span>username=admin&lt;span class="err">&amp;amp;&lt;/span>password=123456&lt;span class="err">&amp;amp;&lt;/span>client_id=client_edm
Accept: application/json
#返回信息
{
&amp;#34;access_token&amp;#34;: &amp;#34;04639609-681d-48bf-97c6-27745de02d6c&amp;#34;,
&amp;#34;token_type&amp;#34;: &amp;#34;bearer&amp;#34;,
&amp;#34;refresh_token&amp;#34;: &amp;#34;116de92c-5a7d-4e10-b0d0-c6bccc814814&amp;#34;,
&amp;#34;expires_in&amp;#34;: 19,
&amp;#34;scope&amp;#34;: &amp;#34;all&amp;#34;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">#校验token
GET http://localhost:9999/oauth/check_token?token=5f757406-e9bf-43ac-9549-3e886e830727
Accept: application/json
#返回信息
{
&amp;#34;aud&amp;#34;: [
&amp;#34;autodeliver&amp;#34;
],
&amp;#34;active&amp;#34;: true,
&amp;#34;exp&amp;#34;: 1607312081,
&amp;#34;user_name&amp;#34;: &amp;#34;admin&amp;#34;,
&amp;#34;client_id&amp;#34;: &amp;#34;client_edm&amp;#34;,
&amp;#34;scope&amp;#34;: [
&amp;#34;all&amp;#34;
]
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">#刷新token
GET http://localhost:9999/oauth/token?grant_type=refresh_token&lt;span class="err">&amp;amp;&lt;/span>client_edm&lt;span class="err">&amp;amp;&lt;/span>client_secret=abcxyz&lt;span class="err">&amp;amp;&lt;/span>refresh_token=43189dc1-fd13-4a12-ba71-a865544d95b8
Accept: application/json
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="7">
&lt;li>资源服务器（希望访问被认证的微服务）Resource Server配置&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="nd">@EnableResourceServer&lt;/span> &lt;span class="c1">//开启资源服务器功能
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@EnableWebSecurity&lt;/span> &lt;span class="c1">//开启web访问安全
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ResourceServerConfigurer&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">ResourceServerConfigurerAdapter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">sing_key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;edm123&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//jwt签名密钥
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 该方法用于定义资源服务器向远程认证服务器发起请求，进行token校验等事宜
&lt;/span>&lt;span class="cm"> * @param resources
&lt;/span>&lt;span class="cm"> * @throws Exception
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">configure&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ResourceServerSecurityConfigurer&lt;/span> &lt;span class="n">resources&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//设置当前资源服务器id
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">resources&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">resourceId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;autodeliver&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//定义token服务对象（token校验靠token服务器对象）
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">RemoteTokenServices&lt;/span> &lt;span class="n">remoteTokenServices&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RemoteTokenServices&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//校验端点/接口设置
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">remoteTokenServices&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setCheckTokenEndpointUrl&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;http://localhost:9999/oauth/check_token&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//携带客户端id和客户端安全码
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">remoteTokenServices&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setClientId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;client_edm&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">remoteTokenServices&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setClientSecret&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;abcxyz&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//设置参数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">resources&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">tokenServices&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">remoteTokenServices&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 场景：⼀个服务中可能有很多资源（API接⼝）
&lt;/span>&lt;span class="cm"> * 某⼀些API接⼝，需要先认证，才能访问
&lt;/span>&lt;span class="cm"> * 某⼀些API接⼝，压根就不需要认证，本来就是对外开放的接⼝
&lt;/span>&lt;span class="cm"> * 我们就需要对不同特点的接⼝区分对待（在当前configure⽅法中完成），设置
&lt;/span>&lt;span class="cm"> * 是否需要经过认证
&lt;/span>&lt;span class="cm"> * @param http
&lt;/span>&lt;span class="cm"> * @throws Exception
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">configure&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpSecurity&lt;/span> &lt;span class="n">http&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">http&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sessionManagement&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">sessionCreationPolicy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SessionCreationPolicy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">IF_REQUIRED&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">and&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="c1">//需要认证
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">authorizeRequests&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">antMatchers&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/autodeliver/**&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">authenticated&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">antMatchers&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/demo/**&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">authenticated&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="c1">//不需要认证
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">anyRequest&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">permitAll&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当我们第⼀次登陆之后，认证服务器颁发token并将其存储在认证服务器中，后期我们访问资源服务器时会携带token，资源服务器会请求认证服务器验证token有效性，如果资源服务器有很多，那么认证服务器压力会很⼤.......&lt;/p>
&lt;p>另外，资源服务器向认证服务器check_token，获取的也是⽤户信息UserInfo，能否把⽤户信息存储到令牌中，让客户端⼀直持有这个令牌，令牌的验证也在资源服务器进⾏，这样避免和认证服务器频繁的交互...... 我们可以考虑使⽤ JWT 进行改造，使⽤JWT机制之后资源服务器不需要访问认证服务器......&lt;/p>
&lt;h3 id="jwt-改造统一认证授权中心的令牌存储机制">JWT 改造统一认证授权中心的令牌存储机制&lt;/h3>
&lt;p>&lt;strong>JWT令牌介绍&lt;/strong>&lt;/p>
&lt;p>通过上边的测试我们发现，当资源服务和授权服务不在⼀起时资源服务使用RemoteTokenServices 远程请求授权服务验证token，如果访问量较大将会影响系统的性能。&lt;/p>
&lt;p>解决上边问题： 令牌采用JWT格式即可解决上边的问题，⽤户认证通过会得到⼀个JWT令牌，JWT令牌中已经包括了用户相关的信息，客户端只需要携带JWT访问资源服务，资源服务根据事先约定的算法自行完成令牌校验，无需每次都请求认证服务完成授权。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>什么是JWT?&lt;/p>
&lt;p>JSON Web Token（JWT）是⼀个开放的⾏业标准（RFC 7519），它定义了⼀种简介的、⾃包含的协议 格式，用于在通信双方传递json对象，传递的信息经过数字签名可以被验证和信任。JWT可以使用HMAC算法或使用RSA的公钥/私钥对来签名，防止被篡改。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>JWT令牌结构&lt;/p>
&lt;p>JWT令牌由三部分组成，每部分中间使用点（.）分隔，⽐如：xxxxx.yyyyy.zzzzz&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Header&lt;/p>
&lt;p>头部包括令牌的类型（即JWT）及所使用的哈希算法（如HMAC SHA256或RSA），例如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;alg&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;HS256&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;JWT&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将上边的内容使用Base64Url编码，得到的一个字符串就是JWT令牌的第一部分&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Payload&lt;/p>
&lt;p>第二部分是负载，内容也是一个json对象，它是存放有效信息的地⽅，它可以存放jwt提供的现成字段，比如：iss（签发者）,exp（过期时间戳）, sub（面向的⽤户）等，也可⾃定义字段。 此部分不建议存放敏感信息，因为此部分可以解码还原原始内容。 最后将第⼆部分负载使用Base64Url 编码，得到⼀个字符串就是JWT令牌的第⼆部分。 ⼀个例⼦：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;sub&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1234567890&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Mark&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;iat&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1516239022&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>Signature&lt;/p>
&lt;p>第三部分是签名，此部分⽤于防止jwt内容被篡改。 这个部分使用base64url将前两部分进⾏编 码，编码后使用点（.）连接组成字符串，最后使⽤header中声明签名算法进行签名。&lt;/p>
&lt;pre>&lt;code>HMACSHA256(
base64UrlEncode(header) + &amp;quot;.&amp;quot; +
base64UrlEncode(payload),
secret)
&lt;/code>&lt;/pre>&lt;p>base64UrlEncode(header)：jwt令牌的第⼀部分&lt;/p>
&lt;p>base64UrlEncode(payload)：jwt令牌的第⼆部分&lt;/p>
&lt;p>secret：签名所使⽤的密钥&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>认证服务器端JWT改造&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>改造主配置类 OauthServerConfigurer&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 创建tokenStore对象
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">TokenStore&lt;/span> &lt;span class="nf">getTokenStore&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//return new InMemoryTokenStore();
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">JwtTokenStore&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jwtAccessTokenConverter&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">SIGN_KEY&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;dweqe&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 返回jwt令牌转换器
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">JwtAccessTokenConverter&lt;/span> &lt;span class="nf">jwtAccessTokenConverter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">JwtAccessTokenConverter&lt;/span> &lt;span class="n">jwtAccessTokenConverter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">JwtAccessTokenConverter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">jwtAccessTokenConverter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSigningKey&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SIGN_KEY&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">jwtAccessTokenConverter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setVerifier&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">MacSigner&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SIGN_KEY&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">jwtAccessTokenConverter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>修改JWT令牌服务方法 OauthServerConfigurer&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 该方法用户获取一个token服务对象（该对象描述了一个token有效期等信息）
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm">*/&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">AuthorizationServerTokenServices&lt;/span> &lt;span class="nf">getAuthorizationServerTokenServices&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//使用默认实现
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DefaultTokenServices&lt;/span> &lt;span class="n">defaultTokenServices&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DefaultTokenServices&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//是否开启令牌刷新
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">defaultTokenServices&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSupportRefreshToken&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">defaultTokenServices&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setTokenStore&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">getTokenStore&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">//针对JWT令牌的添加
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">defaultTokenServices&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setTokenEnhancer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jwtAccessTokenConverter&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">//设置令牌有效时间（一般设置为20小时）
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//access_token就是我们请求资源需要携带的令牌
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">defaultTokenServices&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAccessTokenValiditySeconds&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">20&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//3天
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">defaultTokenServices&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setRefreshTokenValiditySeconds&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">259200&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">defaultTokenServices&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>
&lt;p>资源服务器校验JWT令牌 ResourceServerConfigurer&lt;/p>
&lt;p>不需要和远程认证服务器交互，添加本地 tokenStore&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">SIGN_KEY&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;dweqe&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 该方法用于定义资源服务器向远程认证服务器发起请求，进行token校验等事宜
&lt;/span>&lt;span class="cm"> * @param resources
&lt;/span>&lt;span class="cm"> * @throws Exception
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">configure&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ResourceServerSecurityConfigurer&lt;/span> &lt;span class="n">resources&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">resources&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">resourceId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;autodeliver&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">tokenStore&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">getTokenStore&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">stateless&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 创建tokenStore对象
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">TokenStore&lt;/span> &lt;span class="nf">getTokenStore&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//return new InMemoryTokenStore();
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">JwtTokenStore&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jwtAccessTokenConverter&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 返回jwt令牌转换器
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">JwtAccessTokenConverter&lt;/span> &lt;span class="nf">jwtAccessTokenConverter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">JwtAccessTokenConverter&lt;/span> &lt;span class="n">jwtAccessTokenConverter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">JwtAccessTokenConverter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">jwtAccessTokenConverter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSigningKey&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SIGN_KEY&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">jwtAccessTokenConverter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setVerifier&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">MacSigner&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SIGN_KEY&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">jwtAccessTokenConverter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="从数据库加载-oauth2-客户端信息">从数据库加载 Oauth2 客户端信息&lt;/h3>
&lt;ol>
&lt;li>创建数据库并初始化数据（表名及字段保持固定）&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NAMES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">utf8mb4&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">FOREIGN_KEY_CHECKS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">-- ----------------------------
&lt;/span>&lt;span class="c1">-- Table structure for oauth_client_details -- ---------------------------
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">DROP&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">IF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">EXISTS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">oauth_client_details&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">oauth_client_details&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">client_id&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">48&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">resource_ids&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">256&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">client_secret&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">256&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="k">scope&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">256&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">authorized_grant_types&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">256&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">web_server_redirect_uri&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">256&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">authorities&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">256&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">access_token_validity&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">refresh_token_validity&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">additional_information&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4096&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">autoapprove&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">256&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">client_id&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ENGINE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">InnoDB&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">CHARSET&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">utf8&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">-- ----------------------------- Records of oauth_client_details -- ---------------------------
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">BEGIN&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">oauth_client_details&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;client_lagou123&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;autodeliver,resume&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;abcxyz&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;all&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;password,refresh_token&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">7200&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">259200&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">COMMIT&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">FOREIGN_KEY_CHECKS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>配置数据源&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>mysql&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>mysql-connector-java&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.alibaba&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>druid-spring-boot-starter&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.1.10&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!--操作数据库需要事务控制--&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-tx&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-jdbc&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>cn.chuchin&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>service-common&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.0-SNAPSHOT&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">datasource&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">driver-class-name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">com.mysql.cj.jdbc.Driver&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">url&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">jdbc:mysql://localhost:3306/springcloud?useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;useSSL=false&amp;amp;allowMultiQueries=true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">username&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">root&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">password&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">123456&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">druid&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">initial-size&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">min-idle&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">max-active&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">30&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">max-wait&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">50000&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>认证服务器主配置类改造&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">DataSource&lt;/span> &lt;span class="n">dataSource&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 客户端详情配置
&lt;/span>&lt;span class="cm"> * 比如client_id, secret
&lt;/span>&lt;span class="cm"> * 当前这个服务就如同QQ平台，网站作为客户端需要QQ平台进行登录授权认证等，提前需要到QQ平台注册
&lt;/span>&lt;span class="cm"> * QQ平台会给网站
&lt;/span>&lt;span class="cm"> * 颁发client_id等必要参数，说明客户端是谁
&lt;/span>&lt;span class="cm"> * @param clients
&lt;/span>&lt;span class="cm"> * @throws Exception
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">configure&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ClientDetailsServiceConfigurer&lt;/span> &lt;span class="n">clients&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">super&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">configure&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">clients&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">clients&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">withClientDetails&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">createJdbcClientDetailsService&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">JdbcClientDetailsService&lt;/span> &lt;span class="nf">createJdbcClientDetailsService&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">JdbcClientDetailsService&lt;/span> &lt;span class="n">jdbcClientDetailsService&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">JdbcClientDetailsService&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="n">dataSource&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">jdbcClientDetailsService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="从数据库验证用户合法性">从数据库验证用户合法性&lt;/h3>
&lt;ol>
&lt;li>创建数据表users，初始化数据&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NAMES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">utf8mb4&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">FOREIGN_KEY_CHECKS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">-- ----------------------------- Table structure for users -- ---------------------------
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">DROP&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">IF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">EXISTS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">AUTO_INCREMENT&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">char&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">password&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">char&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ENGINE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">InnoDB&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">AUTO_INCREMENT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">CHARSET&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">utf8&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">-- ----------------------------- Records of users
&lt;/span>&lt;span class="c1">-- ---------------------------
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">BEGIN&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;lagou-user&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;iuxyzds&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">COMMIT&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">FOREIGN_KEY_CHECKS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>操作数据表的JPA配置以及针对表的操作的Dao接口&lt;/li>
&lt;li>开发UserDetailService接口的实现类，根据用户名从数据库加载用户信息&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Service&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">JdbcUserDetailsService&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">UserDetailsService&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">UsersRepository&lt;/span> &lt;span class="n">usersRepository&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 根据username查询出该用户的所有信息，封装成UserDetails类型的对象返回，至于密码，框架会自动匹配
&lt;/span>&lt;span class="cm"> * @param username
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> * @throws UsernameNotFoundException
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">UserDetails&lt;/span> &lt;span class="nf">loadUserByUsername&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">UsernameNotFoundException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Users&lt;/span> &lt;span class="n">users&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">usersRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">findByUsername&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">User&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getUsername&lt;/span>&lt;span class="o">(),&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getPassword&lt;/span>&lt;span class="o">(),&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>使用自定义的用户详情服务对象&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">JdbcUserDetailsService&lt;/span> &lt;span class="n">jdbcUserDetailsService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 处理用户名和密码验证事宜
&lt;/span>&lt;span class="cm"> * 1. 客户端传递username和password 参数到认证服务器
&lt;/span>&lt;span class="cm"> * 2. 一般来说username 和password 会存储在数据库中的用户表
&lt;/span>&lt;span class="cm"> * 3. 根据用户表中数据，验证当前传递过来的用户信息的合法性
&lt;/span>&lt;span class="cm"> * @param auth
&lt;/span>&lt;span class="cm"> * @throws Exception
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">configure&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AuthenticationManagerBuilder&lt;/span> &lt;span class="n">auth&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">auth&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">userDetailsService&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jdbcUserDetailsService&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">passwordEncoder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">passwordEncoder&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="基于oauth2-的-jwt-令牌信息拓展">基于Oauth2 的 JWT 令牌信息拓展&lt;/h3>
&lt;p>OAuth2帮我们⽣成的JWT令牌载荷部分信息有限，关于⽤户信息只有⼀个user_name，有些场景下我 们希望放⼊⼀些扩展信息项，比如，之前我们经常向session中存⼊userId，或者现在我希望在JWT的载 荷部分存⼊当时请求令牌的客户端IP，客户端携带令牌访问资源服务时，可以对比当前请求的客户端真实IP和令牌中存放的客户端IP是否匹配，不匹配拒绝请求，以此进⼀步提⾼安全性。那么如何在OAuth2 环境下向JWT令牌中存如扩展信息？&lt;/p>
&lt;p>&lt;strong>认证服务器生成JWT令牌时存入拓展信息（比如ClientIp）&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>继承DefaultAccessTokenConverter类，重写convertAccessToken⽅法存⼊扩展信息&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Component&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AccessTokenConvertor&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">DefaultAccessTokenConverter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="o">?&amp;gt;&lt;/span> &lt;span class="n">convertAccessToken&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">OAuth2AccessToken&lt;/span> &lt;span class="n">token&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">OAuth2Authentication&lt;/span> &lt;span class="n">authentication&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 获取到request对象
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">ServletRequestAttributes&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">RequestContextHolder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRequestAttributes&lt;/span>&lt;span class="o">())).&lt;/span>&lt;span class="na">getRequest&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">// 获取客户端ip（注意：如果是经过代理之后到达当前服务的话，那么这种方式获取的并不是真实的浏览器客户端ip）
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">remoteAddr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRemoteAddr&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">stringMap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;)&lt;/span> &lt;span class="kd">super&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">convertAccessToken&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">token&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">authentication&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">stringMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;clientIp&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">remoteAddr&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">stringMap&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>将自定义的转换器对象注入（OauthServerConfiger）&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 返回jwt令牌转换器（帮助我们生成jwt令牌的）
&lt;/span>&lt;span class="cm"> * 在这里，我们可以把签名密钥传递进去给转换器对象
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">JwtAccessTokenConverter&lt;/span> &lt;span class="nf">jwtAccessTokenConverter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">JwtAccessTokenConverter&lt;/span> &lt;span class="n">jwtAccessTokenConverter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">JwtAccessTokenConverter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">jwtAccessTokenConverter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSigningKey&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">sign_key&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// 签名密钥
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">jwtAccessTokenConverter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setVerifier&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">MacSigner&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">sign_key&lt;/span>&lt;span class="o">));&lt;/span> &lt;span class="c1">// 验证时使用的密钥，和签名密钥保持一致
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">jwtAccessTokenConverter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAccessTokenConverter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">accessTokenConvertor&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">jwtAccessTokenConverter&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>资源服务器取出 JWT 令牌拓展信息&lt;/strong>&lt;/p>
&lt;p>资源服务器也需要⾃定义⼀个转换器类，继承DefaultAccessTokenConverter，重写 extractAuthentication提取方法，把载荷信息设置到认证对象的details属性中&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Component&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AccessTokenConvertor&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">DefaultAccessTokenConverter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">OAuth2Authentication&lt;/span> &lt;span class="nf">extractAuthentication&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="o">?&amp;gt;&lt;/span> &lt;span class="n">map&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">OAuth2Authentication&lt;/span> &lt;span class="n">oAuth2Authentication&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="kd">super&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">extractAuthentication&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">oAuth2Authentication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDetails&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 将map放⼊认证对象中，认证对象在controller中可以拿到 return oAuth2Authentication;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将自定义的转换器注入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 返回jwt令牌转换器（帮助我们生成jwt令牌的）
&lt;/span>&lt;span class="cm"> * 在这里，我们可以把签名密钥传递进去给转换器对象
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">JwtAccessTokenConverter&lt;/span> &lt;span class="nf">jwtAccessTokenConverter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">JwtAccessTokenConverter&lt;/span> &lt;span class="n">jwtAccessTokenConverter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">JwtAccessTokenConverter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">jwtAccessTokenConverter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSigningKey&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">sign_key&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// 签名密钥
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">jwtAccessTokenConverter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setVerifier&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">MacSigner&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">sign_key&lt;/span>&lt;span class="o">));&lt;/span> &lt;span class="c1">// 验证时使用的密钥，和签名密钥保持一致
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">jwtAccessTokenConverter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAccessTokenConverter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">accessTokenConvertor&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">jwtAccessTokenConverter&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>业务类⽐如Controller类中，可以通过SecurityContextHolder.getContext().getAuthentication()获取到认证对象，进⼀步获取到扩展信息&lt;/p>
&lt;h3 id="其他">其他&lt;/h3>
&lt;p>关于JWT令牌我们需要注意&lt;/p>
&lt;ul>
&lt;li>WT令牌就是⼀种可以被验证的数据组织格式，它的玩法很灵活，这里是基于Spring Cloud Oauth2 创建、校验JWT令牌&lt;/li>
&lt;li>我们也可以自己写⼯具类⽣成、校验JWT令牌&lt;/li>
&lt;li>JWT令牌中不要存放过于敏感的信息，因为我们知道拿到令牌后，我们可以解码看到载荷部分的信息&lt;/li>
&lt;li>JWT令牌每次请求都会携带，内容过多，会增加网络带宽占用&lt;/li>
&lt;/ul></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/springcloud/">springcloud</category><category domain="https://chuchin.cn/tags/java/">Java</category><category domain="https://chuchin.cn/tags/spring-cloud/">Spring Cloud</category><category domain="https://chuchin.cn/tags/oauth2/">OAuth2</category><category domain="https://chuchin.cn/tags/jwt/">JWT</category></item><item><title>链路追踪 Sleuth+Zipkin</title><link>https://chuchin.cn/tech/distributed-micro-service/springcloud/sleuth+zipkin/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/springcloud/sleuth+zipkin/</guid><pubDate>Tue, 13 Oct 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>&lt;em>本文源代码下载：&lt;a href="https://chuchin.cn/file/springcloud/spring-cloud-sleuth+zipkin.zip">spring-cloud-sleuth+zipkin.zip&lt;/a>&lt;/em>&lt;/p>
&lt;h2 id="分布式链路追踪技术适用场景">分布式链路追踪技术适用场景&lt;/h2>
&lt;h3 id="场景描述">场景描述&lt;/h3>
&lt;p>为了支撑⽇益增⻓的庞大业务量，我们会使⽤微服务架构设计我们的系统，使得我们的系统不仅能够通过集群部署抵挡流量的冲击，⼜能根据业务进行灵活的扩展。&lt;/p>
&lt;p>那么，在微服务架构下，⼀次请求少则经过三四次服务调⽤完成，多则跨越几十个甚⾄是上百个服务节点。那么问题接踵而来：&lt;/p>
&lt;ol>
&lt;li>如何动态展示服务的调用链路？（比如A服务调用了哪些服务，依赖关系）&lt;/li>
&lt;li>如何分析服务调⽤链路中的瓶颈节点并对其进行调优？(⽐如A—&amp;gt;B—&amp;gt;C，C服务处理时间特别长)&lt;/li>
&lt;li>如何快速进行服务链路的故障发现？&lt;/li>
&lt;/ol>
&lt;h3 id="分布式链路追踪技术">分布式链路追踪技术&lt;/h3>
&lt;p>如果我们在⼀个请求的调用处理过程中，在各个链路节点都能够记录下⽇志，并最终将⽇志进行集中可视化展示，那么我们想监控调用链路中的⼀些指标就有希望了~~~⽐如，请求到达哪个服务实 例？请求被处理的状态怎样？处理耗时怎样？这些都能够分析出来了。&lt;/p>
&lt;p>分布式环境下基于这种想法实现的监控技术就是就是分布式链路追踪（全链路追踪）。&lt;/p>
&lt;h3 id="技术方案">技术方案&lt;/h3>
&lt;p>分布式链路追踪技术已然成熟，产品也不少，国内外都有，比如：&lt;/p>
&lt;ul>
&lt;li>Spring Cloud Sleuth + Twitter Zipkin&lt;/li>
&lt;li>阿⾥巴巴的“鹰眼”&lt;/li>
&lt;li>⼤众点评的“CAT”&lt;/li>
&lt;li>美团的“Mtrace”&lt;/li>
&lt;li>京东的“Hydra”&lt;/li>
&lt;li>新浪的“Watchman”&lt;/li>
&lt;/ul>
&lt;p>另外还有最近也被提到很多的 Apache Skywalking&lt;/p>
&lt;h2 id="分布式链路追踪技术核心思想">分布式链路追踪技术核心思想&lt;/h2>
&lt;p>本质：记录日志，作为⼀个完整的技术，分布式链路追踪也有自己的理论和概念&lt;/p>
&lt;p>&lt;strong>Trace&lt;/strong>：服务追踪的追踪单元是从客户发起请求（request）抵达被追踪系统的边界开始，到被追踪系统 向客户返回响应（response）为止的过程&lt;/p>
&lt;p>&lt;strong>Trace ID&lt;/strong>：了实现请求跟踪，当请求发送到分布式系统的入口端点时，只需要服务跟踪框架为该请求 创建⼀个唯⼀的跟踪标识Trace ID，同时在分布式系统内部流转的时候，框架始终保持该唯⼀标识，直到返回给请求方&lt;/p>
&lt;p>⼀个Trace由⼀个或者多个Span组成，每⼀个Span都有⼀个SpanId，Span中会记录TraceId，同时还有⼀个叫做ParentId，指向了另外⼀个Span的SpanId，表明父子关系，其实本质表达了依赖关系&lt;/p>
&lt;p>&lt;strong>Span ID&lt;/strong>：为了统计各处理单元的时间延迟，当请求到达各个服务组件时，也是通过⼀个唯⼀标识Span ID来标记它的开始，具体过程以及结束。对每⼀个Span来说，它必须有开始和结束两个节点，通过记录 开始Span和结束Span的时间戳，就能统计出该Span的时间延迟，除了时间戳记录之外，它还可以包含 ⼀些其他元数据，比如时间名称、请求信息等。&lt;/p>
&lt;p>每⼀个Span都会有⼀个唯⼀跟踪标识 Span ID,若⼲个有序的 span 就组成了⼀个 trace。&lt;/p>
&lt;p>Span可以认为是⼀个⽇志数据结构，在⼀些特殊的时机点会记录了⼀些⽇志信息，比如有时间戳、 spanId、TraceId，parentIde等，Span中也抽象出了另外⼀个概念，叫做事件，核⼼事件如下：&lt;/p>
&lt;ul>
&lt;li>CS ：client send/start 客户端/消费者发出⼀个请求，描述的是⼀个span开始&lt;/li>
&lt;li>SR: server received/start 服务端/⽣产者接收请求 SR-CS属于请求发送的网络延迟&lt;/li>
&lt;li>SS: server send/finish 服务端/⽣产者发送应答 SS-SR属于服务端消耗时间&lt;/li>
&lt;li>CR：client received/finished 客户端/消费者接收应答 CR-SS表示回复需要的时间(响应的网络延迟)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Spring Cloud Sleuth&lt;/strong> （追踪服务框架）可以追踪服务之间的调⽤，Sleuth可以记录⼀个服务请求经过哪些服务、服务处理时长等，根据这些，我们能够理清各微服务间的调⽤关系及进⾏问题追踪分析。&lt;/p>
&lt;ul>
&lt;li>耗时分析：通过 Sleuth 了解采样请求的耗时，分析服务性能问题（哪些服务调用比较耗时）&lt;/li>
&lt;li>链路优化：发现频繁调⽤的服务，针对性优化等&lt;/li>
&lt;/ul>
&lt;p>Sleuth就是通过记录⽇志的⽅式来记录踪迹数据的&lt;/p>
&lt;p>我们往往把Spring Cloud Sleuth 和 Zipkin ⼀起使⽤，把 Sleuth 的数据信息发送给 Zipkin 进行聚合，利⽤ Zipkin 存储并展示数据。&lt;/p>
&lt;h2 id="sleuth追踪日志">Sleuth追踪日志&lt;/h2>
&lt;ol>
&lt;li>每一个需要被追踪的微服务工程都需要引入&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="c">&amp;lt;!--链路追踪--&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-sleuth&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>每一个微服务都修改application.yml配置文件，添加日志级别&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="c">#分布式链路追踪 &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">logging&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">level&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">org.springframework.web.servlet.DispatcherServlet&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">debug&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">org.springframework.cloud.sleuth&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">debug&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>请求到来时，我们在控制台可以观察到 Sleuth 输出的⽇志（全局 TraceId、SpanId等）。&lt;/p>
&lt;p>这样的⽇志⾸先不容易阅读观察，另外⽇志分散在各个微服务服务器上，接下来我们使⽤Zipkin统⼀聚合轨迹⽇志并进行存储展示。&lt;/p>
&lt;h2 id="zipkin统一聚合日志">Zipkin统一聚合日志&lt;/h2>
&lt;p>结合 Zipkin 展示追踪数据&lt;/p>
&lt;p>Zipkin 包括Zipkin Server和 Zipkin Client两部分，Zipkin Server是⼀个单独的服务，Zipkin Client就是具体的微服务&lt;/p>
&lt;ol>
&lt;li>Zipkin Server 构建，新建子模块 cloud-zipkin-server-9411&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- zipkin server--&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>io.zipkin.java&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>zipkin-server&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>2.12.3&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;exclusions&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- 排除掉log4j的传递依赖，避免和Springboot依赖的日志组件冲突--&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;exclusion&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-log4j2&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/exclusion&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/exclusions&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- zipkin server ui 界面依赖坐标--&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>io.zipkin.java&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>zipkin-autoconfigure-ui&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>2.12.3&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@SpringBootApplication&lt;/span>
&lt;span class="nd">@EnableZipkinServer&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ZipkinServerApplication9411&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SpringApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ZipkinServerApplication9411&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">server&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">9411&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">management&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metrics&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">web&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">server&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">auto-time-requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#关闭自动检测请求&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>Zipkin Client 构建（在具体微服务中修改）&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-zipkin&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">spring:
zipkin:
base-url: http://127.0.0.1:9411
sender:
# web 客户端将踪迹日志数据通过网络请求的方式传送到服务端，另外还有配置
# kafka/rabbit 客户端将踪迹日志数据传递到mq进行中转
type: web
sleuth:
sampler:
# 采样率 1 代表100%全部采集 ，默认0.1 代表10% 的请求踪迹数据会被采集
# 生产环境下，请求量⾮常⼤，没有必要所有请求的踪迹数据都采集分析，对于网络包括
# server端压⼒都是⽐较⼤的，可以配置采样率采集⼀定比例的请求的踪迹数据进⾏分析即可
probability: 1
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>​ 另外，对于log日志，依然开启debug状态，Zipkin Server 页⾯⽅便我们查看服务调⽤依赖关系及⼀些性能指标和异常信息&lt;/p>
&lt;ol start="3">
&lt;li>
&lt;p>追踪数据持久化到MySQL&lt;/p>
&lt;p>mysql中创建数据库zipkin，并执行SQL语句（官方提供）&lt;a href="https://chuchin.cn/file/springcloud/zipkin.sql">zipkin.sql&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml"> &lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>io.zipkin.java&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>zipkin-autoconfigure-storage-mysql&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>2.12.3&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>mysql&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>mysql-connector-java&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.alibaba&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>druid-spring-boot-starter&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.1.10&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-tx&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-jdbc&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">datasource&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">driver-class-name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">com.mysql.cj.jdbc.Driver&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">url&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">jdbc:mysql://localhost:3306/zipkin? useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;useSSL=false&amp;amp;allowMultiQueries=true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">username&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">root&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">password&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">123456&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">druid&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">initial-size&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">min-idle&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">max-active&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">30&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">max-wait&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">50000&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c">#指定zipkin持久化介质为MySQL&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">zipkin&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mysql&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>启动类注入事务管理器&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">PlatformTransactionManager&lt;/span> &lt;span class="nf">txManager&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">DataSource&lt;/span> &lt;span class="n">dataSource&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DataSourceTransactionManager&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">dataSource&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>访问 &lt;a href="http://127.0.0.1:9411/zipkin/">http://127.0.0.1:9411/zipkin/&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/springcloud/">springcloud</category><category domain="https://chuchin.cn/tags/java/">Java</category><category domain="https://chuchin.cn/tags/spring-cloud/">Spring Cloud</category><category domain="https://chuchin.cn/tags/sleuth/">Sleuth</category><category domain="https://chuchin.cn/tags/zipkin/">Zipkin</category></item><item><title>各组件超时时间设置</title><link>https://chuchin.cn/tech/distributed-micro-service/springcloud/timeout-setting/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/springcloud/timeout-setting/</guid><pubDate>Mon, 12 Oct 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>在SpringCloud中，应⽤的组件较多，只要涉及通信，就有可能会发⽣请求超时。那么如何设置超时时间？ 在 Spring Cloud 中，超时时间只需要重点关注 Ribbon 和 Hystrix 即可。&lt;/p>
&lt;h2 id="ribbon-设置">Ribbon 设置&lt;/h2>
&lt;p>如果采⽤的是服务发现⽅式，就可以通过服务名去进⾏转发，需要配置Ribbon的超时。 Ribbon的超时可以配置全局的ribbon.ReadTimeout和ribbon.ConnectTimeout。也可以在前⾯指定服务名，为每个服务单独配置，比如 user-service.ribbon.ReadTimeout。&lt;/p>
&lt;p>其次是Hystrix的超时配置，&lt;strong>Hystrix的超时时间要⼤于Ribbon的超时时间&lt;/strong>，因为Hystrix将请求包装了起来，特别需要注意的是，如果Ribbon开启了重试机制，⽐如重试3 次，Ribbon 的超时为 1 秒，那么 Hystrix 的超时时间应该⼤于 3 秒，否则就会出现 Ribbon 还在重试中，而 Hystrix 已经超时的现象。&lt;/p>
&lt;h2 id="hystrix-设置">Hystrix 设置&lt;/h2>
&lt;p>Hystrix全局超时配置就可以⽤default来代替具体的command名称。 hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=3000 如果想对具体的 command 进行配置，那么就需要知道 command 名称的⽣成规则，才能准确的配置。&lt;/p>
&lt;p>如果我们使⽤ @HystrixCommand 的话，可以⾃定义 commandKey。如果使⽤FeignClient的话，可以 为FeignClient来指定超时时间： hystrix.command.UserRemoteClient.execution.isolation.thread.timeoutInMilliseconds = 3000&lt;/p>
&lt;p>如果想对FeignClient中的某个接⼝设置单独的超时，可以在FeignClient名称后加上具体的⽅法： hystrix.command.UserRemoteClient#getUser(Long).execution.isolation.thread.timeoutInMilliseconds = 3000&lt;/p>
&lt;h2 id="feign-设置">Feign 设置&lt;/h2>
&lt;p>Feign本身也有超时时间的设置，如果此时设置了Ribbon的时间就以Ribbon的时间为准，如果没设置Ribbon的时间但配置了Feign的时间，就以Feign的时间为准。Feign的时间同样也配置了连接超时 时间（feign.client.config.服务名称.connectTimeout）和读取超时时间（feign.client.config.服务名 称.readTimeout）。&lt;/p></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/springcloud/">springcloud</category><category domain="https://chuchin.cn/tags/java/">Java</category><category domain="https://chuchin.cn/tags/spring-cloud/">Spring Cloud</category></item><item><title>Eureka 服务发现时间慢</title><link>https://chuchin.cn/tech/distributed-micro-service/springcloud/eureka-slow/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/springcloud/eureka-slow/</guid><pubDate>Sun, 11 Oct 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>问题场景上线⼀个新的服务实例，但是服务消费者无感知，过了⼀段时间才知道 某⼀个服务实例下线了，服务消费者⽆感知，仍然向这个服务实例在发起请求
这其实就是服务发现的⼀个问题，当我们需要调用服务实例时，信息是从注册中心Eureka获取的，然后通过Ribbon选择⼀个服务实例发起调⽤，如果出现调⽤不到或者下线后还可以调⽤的问题，原因肯定是服务实例的信息更新不及时导致的。&lt;/p>
&lt;p>Eureka 服务发现慢的原因主要有两个，⼀部分是因为服务缓存导致的，另⼀部分是因为客户端缓存导致的。&lt;/p>
&lt;h2 id="服务端缓存">服务端缓存&lt;/h2>
&lt;p>服务注册到注册中⼼后，服务实例信息是存储在注册表中的，也就是内存中。但Eureka为了提⾼响应速 度，在内部做了优化，加⼊了两层的缓存结构，将Client需要的实例信息，直接缓存起来，获取的时候 直接从缓存中拿数据然后响应给 Client。&lt;/p>
&lt;p>第⼀层缓存是&lt;strong>readOnlyCacheMap&lt;/strong>，readOnlyCacheMap是 采⽤ConcurrentHashMap来存储数据的，主要负责定时与readWriteCacheMap进⾏数据同步，默认同 步时间为 30 秒⼀次。&lt;/p>
&lt;p>第⼆层缓存是&lt;strong>readWriteCacheMap&lt;/strong>，readWriteCacheMap采⽤Guava来实现缓存。缓存过期时间默认 为180秒，当服务下线、过期、注册、状态变更等操作都会清除此缓存中的数据。&lt;/p>
&lt;p>Client获取服务实例数据时，会先从⼀级缓存中获取，如果⼀级缓存中不存在，再从⼆级缓存中获取， 如果⼆级缓存也不存在，会触发缓存的加载，从存储层拉取数据到缓存中，然后再返回给 Client。&lt;/p>
&lt;p>Eureka 之所以设计⼆级缓存机制，也是为了提⾼ Eureka Server 的响应速度，缺点是缓存会导致 Client 获取不到最新的服务实例信息，然后导致⽆法快速发现新的服务和已下线的服务。 了解了服务端的实现后，想要解决这个问题就变得很简单了，我们可以缩短只读缓存的更新时间 （eureka.server.response-cache-update-interval-ms）让服务发现变得更加及时，或者直接将只读缓 存关闭（eureka.server.use-read-only-response-cache=false），多级缓存也导致C层⾯（数据⼀致 性）很薄弱。 Eureka Server 中会有定时任务去检测失效的服务，将服务实例信息从注册表中移除，也可以将这个失 效检测的时间缩短，这样服务下线后就能够及时从注册表中清除。&lt;/p>
&lt;h2 id="客户端缓存">客户端缓存&lt;/h2>
&lt;p>客户端缓存 客户端缓存主要分为两块内容，⼀块是 Eureka Client 缓存，⼀块是 Ribbon 缓存。&lt;/p>
&lt;p>&lt;strong>Eureka Client缓存&lt;/strong>&lt;/p>
&lt;p>Eureka Client 负责跟Eureka Server 进行交互，在Eureka Client中的 com.netflix.discovery.DiscoveryClient.initScheduledTasks()方法中，初始化了一个CacheRefreshThread 定时任务专门用来拉取 Eureka Server 的实例信息到本地。所以我们需要缩短这个定时拉取服务信息的时间间隔（eureka.client.registryFetchIntervalSeconds） 来快速发现新的服务。&lt;/p>
&lt;p>&lt;strong>Ribbon缓存&lt;/strong>&lt;/p>
&lt;p>Ribbon会从EurekaClient中获取服务信息，ServerListUpdater是Ribbon中负责服务实例 更新的组件，默认的实现是PollingServerListUpdater，通过线程定时去更新实例信息。定时刷新的时间间隔默认是30秒，当服务停⽌或者上线后，这边最快也需要30秒才能将实例信息更新成最新的。我们 可以将这个时间调短⼀点，比如 3 秒。&lt;/p>
&lt;p>刷新间隔的参数是通过 getRefreshIntervalMs ⽅法来获取的，⽅法中的逻辑也是从 Ribbon 的配置中进 ⾏取值的。&lt;/p>
&lt;p>将这些服务端缓存和客户端缓存的时间全部缩短后，跟默认的配置时间相比，快了很多。我们通过调整参数的⽅式来尽量加快服务发现的速度，但是还是不能完全解决报错的问题，间隔时间设置为3秒，也 还是会有间隔。所以我们⼀般都会开启重试功能，当路由的服务出现问题时，可以重试到另⼀个服务来 保证这次请求的成功。&lt;/p></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/springcloud/">springcloud</category><category domain="https://chuchin.cn/tags/java/">Java</category><category domain="https://chuchin.cn/tags/spring-cloud/">Spring Cloud</category><category domain="https://chuchin.cn/tags/eureka/">Eureka</category></item><item><title>SCN核心组件 Stream</title><link>https://chuchin.cn/tech/distributed-micro-service/springcloud/scn-core-stream/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/springcloud/scn-core-stream/</guid><pubDate>Sat, 10 Oct 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>&lt;em>本文源代码下载：&lt;a href="https://chuchin.cn/file/springcloud/spring-cloud-stream.zip">spring-cloud-stream.zip&lt;/a>&lt;/em>&lt;/p>
&lt;p>Spring Cloud Stream 消息驱动组件帮助我们更快速，更⽅便，更友好的去构建消息驱动微服务的。 当时定时任务和消息驱动的⼀个对比。（消息驱动：基于消息机制做⼀些事情） MQ：消息队列/消息中间件/消息代理，产品有很多，ActiveMQ RabbitMQ RocketMQ Kafka&lt;/p>
&lt;h2 id="stream-解决的痛点问题">Stream 解决的痛点问题&lt;/h2>
&lt;p>MQ消息中间件⼴泛应⽤在应⽤解耦合、异步消息处理、流量削峰等场景中。&lt;/p>
&lt;p>不同的MQ消息中间件内部机制包括使⽤⽅式都会有所不同，比如RabbitMQ中有Exchange（交换机/交换器）这⼀概念，kafka有Topic、Partition分区这些概念，MQ消息中间件的差异性不利于我们上层的开发应用，当我们的系统希望从原有的RabbitMQ切换到Kafka时，我们会发现⽐较困难，很多要操作可能重来，&lt;strong>因为应⽤程序和具体的某⼀款MQ消息中间件耦合在⼀起了&lt;/strong>。&lt;/p>
&lt;p>Spring Cloud Stream进⾏了很好的上层抽象，可以让我们与具体消息中间件解耦合，屏蔽掉了底层具体MQ消息中间件的细节差异，就像Hibernate屏蔽掉了具体数据库（Mysql/Oracle⼀样）。如此⼀来，我们学习、开发、维护MQ都会变得轻松。目前Spring Cloud Stream⽀持RabbitMQ和Kafka。&lt;/p>
&lt;p>本质：&lt;strong>屏蔽掉了底层不同MQ消息中间件之间的差异，统⼀了MQ的编程模型，降低了学习、开发、维护MQ的成本&lt;/strong>&lt;/p>
&lt;h2 id="stream-重要概念">Stream 重要概念&lt;/h2>
&lt;p>Spring Cloud Stream 是⼀个构建消息驱动微服务的框架。应⽤程序通过inputs（相当于消息消费者 consumer）或者outputs（相当于消息⽣产者producer）来与Spring Cloud Stream中的binder对象交互，而Binder对象是⽤来屏蔽底层MQ细节的，它负责与具体的消息中间件交互。&lt;/p>
&lt;p>&lt;strong>对于我们来说，只需要知道如何使⽤Spring Cloud Stream与Binder对象交互即可&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Binder绑定器&lt;/strong>&lt;/p>
&lt;p>Binder绑定器是Spring Cloud Stream 中非常核心的概念，就是通过它来屏蔽底层不同MQ消息中间件的细节差异，当需要更换为其他消息中间件时，我们需要做的就是更换对应的Binder绑定器而不需要修改任何应用逻辑（Binder绑定器的实现是框架内置的，Spring Cloud Stream⽬前⽀持Rabbit、Kafka两种消息队列）&lt;/p>
&lt;h2 id="传统mq模型与stream消息驱动模型">传统MQ模型与Stream消息驱动模型&lt;/h2>
&lt;h2 id="steam-消息通信方式及编程模型">Steam 消息通信方式及编程模型&lt;/h2>
&lt;h3 id="stream-消息通信方式">Stream 消息通信方式&lt;/h3>
&lt;p>Stream中的消息通信方式遵循了发布—订阅模式。&lt;/p>
&lt;p>在Spring Cloud Stream中的消息通信方式遵循了发布-订阅模式，当⼀条消息被投递到消息中间件之后，它会通过共享的 Topic 主题进行广播，消息消费者在订阅的主题中收到它并触发⾃身的业务逻辑处理。这⾥所提到的 Topic 主题是Spring Cloud Stream中的⼀个抽象概念，⽤来代表发布共享消息给消 费者的地方。在不同的消息中间件中， Topic 可能对应着不同的概念，比如：在RabbitMQ中的它对应 了Exchange、在Kakfa中则对应了Kafka中的Topic。&lt;/p>
&lt;h3 id="stream-编程注解">Stream 编程注解&lt;/h3>
&lt;p>&lt;strong>如下的注解无非在做⼀件事，把我们结构图中那些组成部分上下关联起来，打通通道（这样的话生产者 的message数据才能进⼊mq，mq中数据才能进⼊消费者工程）&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>注解&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>@Input（在消费者工程中使用）&lt;/td>
&lt;td>注解标识输入通道，通过该输入通道接收到的消息进入应用程序&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@Output（在⽣产者⼯程中使⽤）&lt;/td>
&lt;td>注解标识输出通道，发布的消息将通过该通道离开应用程序&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@StreamListener（在消费者工程中使用，监听message的到来）&lt;/td>
&lt;td>监听队列，⽤于消费者的队列的消息的接收 （有消息监听.....）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@EnableBinding&lt;/td>
&lt;td>把Channel和Exchange（对于RabbitMQ）绑定在⼀起&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>接下来，创建三个工程（基于RabbitMQ，安装过程略 &lt;a href="https://www.rabbitmq.com/">Messaging that just works — RabbitMQ&lt;/a>）&lt;/p>
&lt;ul>
&lt;li>cloud-stream-producer-9090 生产者端发消息&lt;/li>
&lt;li>cloud-stream-consumer-9091 消费者端接收信息&lt;/li>
&lt;li>cloud-stream-consumer-9092 消费者端接收信息&lt;/li>
&lt;/ul>
&lt;h3 id="开发生产者端">开发生产者端&lt;/h3>
&lt;ol>
&lt;li>新建子模块：cloud-stream-producer-9090&lt;/li>
&lt;li>添加依赖&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml"> &lt;span class="nt">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-netflix-eureka-client&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-stream-rabbit&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>application.yml 配置&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">server&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c">#注册到Eureka服务中心&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">eureka&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">client&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">service-url&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 注册到集群，就把多个Eurekaserver地址使用逗号连接起来即可；注册到单实例（非集群模式），那就写一个就ok&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">defaultZone&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http://a.eureka.server:8761/eureka,http://b.eureka.server:8762/eureka&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">instance&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">prefer-ip-address&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#服务实例中显示ip，而不是显示主机名（兼容老的eureka版本）&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 实例名称： 192.168.1.103:lagou-service-resume:8080，我们可以自定义它&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">instance-id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${spring.cloud.client.ip-address}:${spring.application.name}:${server.port}:@project.version@&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">application&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cloud-stream-producer&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cloud&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">stream&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">binders&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#绑定mq的信息，此处是RabbitMQ&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">edmRabbitBinder&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#给binder自定义的名成，用于后面的关联&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rabbit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#mq类型&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># MQ环境配置（用户名、密码等）&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">rabbitmq&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">host&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">172.30.193.64&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">5672&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">username&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">admin&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">password&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">111111&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">bindings&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 关联整合通道和binder对象&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">output&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># output是我们定义的通道名称，此处不能乱改&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">destination&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">lagouExchange&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 要使用的Exchange名称（消息队列主题名称）&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">content-type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">text/plain # application/json&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 消息类型设置，比如json&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">binder&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">edmRabbitBinder&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 关联MQ服务&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>启动类&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@SpringBootApplication&lt;/span>
&lt;span class="nd">@EnableDiscoveryClient&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">StreamProducerApplication9090&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SpringApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">StreamProducerApplication9090&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="5">
&lt;li>业务类开发&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">IMessageProducer&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">sendMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">//Source.class里面就是对输出通道的定义（这是Spring Cloud Stream 内置的通道封装）
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@EnableBinding&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Source&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MessageProducerImpl&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">IMessageProducer&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="c1">// 将MessageChannel的封装对象Source注⼊到这⾥使⽤
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Source&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//将MessageChannel的封装对象Source注入到这里使用
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sendMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 向mq中发送消息（并不是直接操作mq，应该操作的是spring cloud stream）
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 使⽤通道向外发出消息(指的是Source⾥⾯的output通道)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">output&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MessageBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">withPayload&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="6">
&lt;li>定时任务发送消息&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="err">#&lt;/span>&lt;span class="n">启动类加上注解开启&lt;/span>
&lt;span class="nd">@EnableScheduling&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Component&lt;/span>
&lt;span class="nd">@Slf4j&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SendScheduled&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">IMessageProducer&lt;/span> &lt;span class="n">iMessageProducer&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Scheduled&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cron&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;*/5 * * * * ?&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">testSendMessage&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">iMessageProducer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sendMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Hello world&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;======send=======&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="开发消费端">开发消费端&lt;/h3>
&lt;ol>
&lt;li>新建子模块：cloud-stream-consumer-9091，9092工程类似，仅列出需要修改部分&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">server&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">9091&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#修改端口&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">application&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cloud-stream-consumer&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cloud&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">stream&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">bindind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">input&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#ouput改为input&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>消息消费者监听&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Slf4j&lt;/span>
&lt;span class="nd">@EnableBinding&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Sink&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MessageConsumerService&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@StreamListener&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Sink&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">INPUT&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">receiveMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Message&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;==========接收到的消息：&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="自定义消息通道">自定义消息通道&lt;/h2>
&lt;p>Stream 内置了两种接⼝Source和Sink分别定义了 binding 为 “input” 的输⼊流和 “output” 的输出流， 我们也可以⾃定义各种输⼊输出流（通道），但实际我们可以在我们的服务中使⽤多个binder、多个输入通道和输出通道，然⽽默认就带了⼀个input的输⼊通道和⼀个output的输出通道，怎么办？ 我们是可以⾃定义消息通道的，学着Source和Sink的样⼦，给你的通道定义个⾃⼰的名字，多个输入通道和输出通道是可以写在⼀个类中的。&lt;/p>
&lt;p>定义接口&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">interface&lt;/span> &lt;span class="nc">CustomChannel&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">INPUT_LOG&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;inputLog&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">OUTPUT_LOG&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;outputLog&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Input&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">INPUT_LOG&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">SubscribableChannel&lt;/span> &lt;span class="nf">inputLog&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="nd">@Output&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">OUTPUT_LOG&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">MessageChannel&lt;/span> &lt;span class="nf">outputLog&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如何使用？&lt;/p>
&lt;ol>
&lt;li>在 @EnableBinding 注解中，绑定⾃定义的接⼝&lt;/li>
&lt;li>使⽤ @StreamListener 做监听的时候，需要指定 CustomChannel.INPUT_LOG&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">bindings&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">inputLog&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">destination&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">aExchange &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">outputLog&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">destination&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">bduExchange&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="消息分组">消息分组&lt;/h2>
&lt;p>如上我们的情况，消费者端有两个（消费同⼀个MQ的同⼀个主题），但是呢我们的业务场景中希望这 个主题的⼀个Message只能被⼀个消费者端消费处理，此时我们就可以使⽤消息分组。&lt;/p>
&lt;p>&lt;strong>解决的问题：能解决消息重复消费问题&lt;/strong>&lt;/p>
&lt;p>我们仅仅需要在服务消费者端设置 spring.cloud.stream.bindings.input.group 属性，多个消费者实例 配置为同⼀个group名称（在同⼀个group中的多个消费者只有⼀个可以获取到消息并消费）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">bindings&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 关联整合通道和binder对象&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">input&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># output是我们定义的通道名称，此处不能乱改&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">destination&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">edmExchange&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 要使用的Exchange名称（消息队列主题名称）&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">content-type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">text/plain # application/json&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 消息类型设置，比如json&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">binder&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">edmRabbitBinder&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 关联MQ服务&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">a&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/springcloud/">springcloud</category><category domain="https://chuchin.cn/tags/java/">Java</category><category domain="https://chuchin.cn/tags/spring-cloud/">Spring Cloud</category><category domain="https://chuchin.cn/tags/stream/">Stream</category></item><item><title>SCN核心组件 Config+Bus</title><link>https://chuchin.cn/tech/distributed-micro-service/springcloud/scn-core-config+bus/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/springcloud/scn-core-config+bus/</guid><pubDate>Fri, 09 Oct 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>&lt;em>本文源代码下载：&lt;a href="https://chuchin.cn/file/springcloud/spring-cloud-config+bus.zip">spring-cloud-config+bus.zip&lt;/a>&lt;/em>&lt;/p>
&lt;h2 id="分布式配置中心应用场景">分布式配置中心应用场景&lt;/h2>
&lt;h2 id="spring-cloud-config">Spring Cloud Config&lt;/h2>
&lt;h3 id="config-简介">Config 简介&lt;/h3>
&lt;h3 id="config-分布式配置应用">Config 分布式配置应用&lt;/h3>
&lt;p>&lt;strong>说明：Config Server是集中式的配置服务，用于集中管理应⽤程序各个环境下的配置。 默认使用Git储存配置⽂件内容，也可以SVN。&lt;/strong>&lt;/p>
&lt;p>比如，我们要对“简历微服务”的application.yml进⾏管理（区分开发环境、测试环境、⽣产环境）&lt;/p>
&lt;ol>
&lt;li>
&lt;p>上传码云，创建项目cloud-config-repo&lt;/p>
&lt;/li>
&lt;li>
&lt;p>上传yml配置文件，命名规则如下：&lt;/p>
&lt;p>{application}-{profile}.yml 或者 {application}-{profile}.properties 其中，application为应⽤名称，profile指的是环境（⽤于区分开发环境，测试环境、⽣产环境等）
示例：lagou-service-resume-dev.yml、lagou-service-resume-test.yml、lagou-service-resumeprod.yml&lt;/p>
&lt;p>仓库文件路径为 /config/XXXXX.yml&lt;/p>
&lt;/li>
&lt;li>
&lt;p>构建Config Server 统一配置中心，新建子模块 cloud-config-server-9006&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;parent&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>cn.chuchin&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.0-SNAPSHOT&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/parent&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;modelVersion&amp;gt;&lt;/span>4.0.0&lt;span class="nt">&amp;lt;/modelVersion&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>cloud-config-server-9006&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-netflix-eureka-client&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-config-server&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>启动类&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@SpringBootApplication&lt;/span>
&lt;span class="nd">@EnableDiscoveryClient&lt;/span>
&lt;span class="nd">@EnableConfigServer&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">CloudConfig9006&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SpringApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CloudConfig9006&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="5">
&lt;li>配置&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">server:
port: 9006
#注册到Eureka服务中心
eureka:
client:
service-url:
# 注册到集群，就把多个Eurekaserver地址使用逗号连接起来即可；注册到单实例（非集群模式），那就写一个就ok
defaultZone: http://a.eureka.server:8761/eureka,http://b.eureka.server:8762/eureka
instance:
prefer-ip-address: true #服务实例中显示ip，而不是显示主机名（兼容老的eureka版本）
# 实例名称： 192.168.1.103:lagou-service-resume:8080，我们可以自定义它
instance-id: ${spring.cloud.client.ip-address}:${spring.application.name}:${server.port}:@project.version@
spring:
application:
name: cloud-config-server
cloud:
config:
server:
git:
uri: https://gitee.com/chuchin/cloud-config-repo.git #配置git服务地址
username: XXXXXX #配置git用户名
password: XXXXXX #配置git密码
# 配置文件路径，仓库目录为根路径
search-paths:
- config
# 读取分支
label: master
# springboot中暴露健康检查等断点接口
management:
endpoints:
web:
exposure:
include: &amp;#34;*&amp;#34;
# 暴露健康接口的细节
endpoint:
health:
show-details: always
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>测试访问：&lt;a href="http://localhost:9006/master/service-resume-dev.yml">localhost:9006/master/service-resume-dev.yml&lt;/a>，可以查看到配置内容&lt;/p>
&lt;ol start="6">
&lt;li>构建Client客户端（在已有简历微服务基础上），添加依赖&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">spring:
cloud:
config:
name: service-resume
profile: dev
label: master
uri: http://localhost:9006
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="config配置手动刷新">Config配置手动刷新&lt;/h3>
&lt;p>不⽤重启微服务，只需要⼿动的做⼀些其他的操作（访问⼀个地址/refresh）刷新，之后再访问即可
此时，客户端取到了配置中⼼的值，但当我们修改GitHub上⾯的值时，服务端（Config Server）能实 时获取最新的值，但客户端（Config Client）读的是缓存，⽆法实时获取最新值。Spring Cloud已 经为 我们解决了这个问题，那就是客户端使⽤post去触发refresh，获取最新数据。&lt;/p>
&lt;ol>
&lt;li>Client客户端添加依赖springboot-starter-actuator（已添加）&lt;/li>
&lt;li>Client客户端bootstrap.yml中添加配置（暴露通信端点）&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">management:
endpoints:
web:
exposure:
include: refresh
#也可以暴露所有的端口
management:
endpoints:
web:
exposure:
include: &amp;#34;*&amp;#34;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>
&lt;p>Client客户端使用带配置信息的类上添加@RefreshScope&lt;/p>
&lt;/li>
&lt;li>
&lt;p>手动向Client客户端发起POST请求，&lt;a href="http://localhost:8080/actuator/refresh">localhost:8080/actuator/refresh&lt;/a>刷新配置信息&lt;/p>
&lt;p>&lt;strong>手动刷新方式避免了服务重启（流程：Git改配置--&amp;gt;for循环脚本手动刷新每个微服务）&lt;/strong>&lt;/p>
&lt;p>那么，可否使用广播机制，一次通知，处处生效，方便大范围配置刷新&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="config配置自动更新">Config配置自动更新&lt;/h3>
&lt;p>实现一次通知处处生效，在做分布式配置，可以用zk（存储+通知），zk中数据变更，可以通知各个监听的客户端，客户 端收到通知之后可以做出相应的操作（内存级别的数据直接⽣效，对于数据库连接信息、连接池等信息变化更新的，那么会在通知逻辑中进⾏处理，比如重新初始化连接池）。在微服务架构中，我们可以结合消息总线（Bus）实现分布式配置的自动更新（Spring Cloud + Spring Cloud Bus）&lt;/p>
&lt;h4 id="消息总线bus">消息总线Bus&lt;/h4>
&lt;p>所谓消息总线Bus，即我们经常会使用MQ消息代理构建⼀个共⽤的Topic，通过这个Topic连接各个微服务实例，MQ⼴播的消息会被所有在注册中⼼的微服务实例监听和消费。&lt;strong>换言之就是通过⼀个主题连接 各个微服务，打通脉络。&lt;/strong>&lt;/p>
&lt;p>Spring Cloud Bus（基于MQ的，⽀持RabbitMq/Kafka） 是Spring Cloud中的消息总线⽅案，Spring Cloud Config + Spring Cloud Bus 结合可以实现配置信息的自动更新。&lt;/p>
&lt;h4 id="spring-cloud-config--spring-cloud-bus-实现自动刷新">Spring Cloud Config + Spring Cloud Bus 实现自动刷新&lt;/h4>
&lt;p>MQ消息代理，我们还选择使⽤RabbitMQ，ConfigServer和ConfigClient都添加都消息总线的⽀持以及 与RabbitMq的连接信息&lt;/p>
&lt;ol>
&lt;li>Config Sever 服务端添加消息总线支持&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-bus-amqp&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>ConfigServer 添加配置&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">spring:
rabbitmq:
host: 127.0.0.1
port: 5672
username: guest
password: guest
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>微服务暴露端口&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">management:
endpoints:
web:
exposure:
include: bus-refresh
#建议暴露所有端口
management:
endpoints:
web:
exposure:
include: &amp;#34;*&amp;#34;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>
&lt;p>重启各个服务之后，更改配置，向配置中心服务端发送get请求&lt;a href="http://localhost:9006/actuator/bus-refresh">localhost:9006/actuator/bus-refresh&lt;/a>，各个客户端配置即可自动刷新&lt;/p>
&lt;p>在广播模式下实现了⼀次请求，处处更新，如果我只想定向更新呢？ 在发起刷新请求的时候&lt;a href="http://localhost:9006/actuator/bus-refresh/service-resume:8080">localhost:9006/actuator/bus-refresh/service-resume:8080&lt;/a>即为最后⾯跟上要定向刷新的实例的服务名:端⼝号即可&lt;/p>
&lt;/li>
&lt;/ol></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/springcloud/">springcloud</category><category domain="https://chuchin.cn/tags/java/">Java</category><category domain="https://chuchin.cn/tags/spring-cloud/">Spring Cloud</category><category domain="https://chuchin.cn/tags/config/">Config</category><category domain="https://chuchin.cn/tags/bus/">Bus</category></item><item><title>SCN核心组件 GateWay</title><link>https://chuchin.cn/tech/distributed-micro-service/springcloud/scn-core-gateway/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/springcloud/scn-core-gateway/</guid><pubDate>Thu, 08 Oct 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>&lt;em>本文源代码下载：&lt;a href="https://chuchin.cn/file/springcloud/spring-cloud-gateway.zip">spring-cloud-gateway.zip&lt;/a>&lt;/em>&lt;/p>
&lt;h2 id="gateway-简介">GateWay 简介&lt;/h2>
&lt;p>网关（翻译过来就叫做GateWay）：微服务架构中的重要组成部分。局域网中就有⽹关这个概念，局域⽹接收或者发送数据出去通过这个网关，比如⽤Vmware虚拟机软件 搭建虚拟机集群的时候，往往我们需要选择IP段中的⼀个IP作为网关地址。&lt;/p>
&lt;p>Spring Cloud GateWay是Spring Cloud的⼀个全新项⽬，⽬标是取代Netflix Zuul，它基于 Spring5.0+SpringBoot2.0+WebFlux（基于⾼性能的Reactor模式响应式通信框架Netty，异步非阻塞模型）等技术开发，性能⾼于Zuul，官方测试，GateWay是Zuul的1.6倍，旨在为微服务架构提供⼀种简 单有效的统⼀的API路由管理⽅式。
Spring Cloud GateWay不仅提供统⼀的路由方式（反向代理）并且基于 Filter(定义过滤器对请求过滤， 完成⼀些功能) 链的⽅式提供了网关基本的功能，例如：鉴权、流量控制、熔断、路径重写、⽇志监控 等。&lt;/p>
&lt;h2 id="gateway-核心概念">GateWay 核心概念&lt;/h2>
&lt;h2 id="gateway-工作过程">GateWay 工作过程&lt;/h2>
&lt;h2 id="gateway-应用">GateWay 应用&lt;/h2>
&lt;p>使⽤⽹关对⾃动投递微服务进行代理（添加在它的上游，相当于隐藏了具体微服务的信息，对外暴露的是网关）&lt;/p>
&lt;ol>
&lt;li>
&lt;p>创建工程cloud-gateway-9002导入依赖&lt;/p>
&lt;p>&lt;em>&lt;a href="https://chuchin.cn/file/springcloud/gateway-pom.xml">pom.xml&lt;/a>&lt;/em>&lt;/p>
&lt;p>不要引入web模块，需要引入web-flux模块&lt;/p>
&lt;/li>
&lt;li>
&lt;p>application.yml配置&lt;/p>
&lt;pre>&lt;code>server:
port: 9002
eureka:
client:
serviceUrl: # eureka server的路径
defaultZone: http://a.eureka.server:8761/eureka/,http://b.eureka.server:8762/eureka/ #把 eureka 集群中的所有 url 都填写了进来，也可以只写一台，因为各个 eureka server 可以同步注册表
instance:
#使用ip注册，否则会使用主机名注册了（此处考虑到对老版本的兼容，新版本经过实验都是ip）
prefer-ip-address: true
#自定义实例显示格式，加上版本号，便于多版本管理，注意是ip-address，早期版本是ipAddress
instance-id: ${spring.cloud.client.ip-address}:${spring.application.name}:${server.port}:@project.version@
spring:
application:
name: cloud-gateway
cloud:
gateway:
routes: # 路由可以有多个
- id: service-autodeliver-router # 我们自定义的路由 ID，保持唯一
uri: http://127.0.0.1:8091/autodeliver # 目标服务地址 自动投递微服务（部署多实例） 动态路由：uri配置的应该是一个服务名称，而不应该是一个具体的服务实例的地址 # gateway网关从服务注册中心获取实例信息然后负载后路由
predicates: # 断言：路由条件，Predicate 接受一个输入参数，返回一个布尔值结果。该接口包含多种默 认方法来将 Predicate 组合成其他复杂的逻辑（比如：与，或，非）。
- Path=/autodeliver/**
- id: service-resume-router # 我们自定义的路由 ID，保持唯一
uri: http://127.0.0.1:8081/resume # 目标服务地址
predicates: # 断言：路由条件，Predicate 接受一个输入参数，返回一个布尔值结果。该接口包含多种默 认方法来将 Predicate 组合成其他复杂的逻辑（比如：与，或，非）。
- Path=/resume/**
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>发送http请求，test.http添加：&lt;/p>
&lt;pre>&lt;code>GET http://localhost:9002/autodeliver/checkState/1545136
Accept: application/json
###
GET http://localhost:9002/resume/openstate/1545136
Accept: application/json
###
&lt;/code>&lt;/pre>&lt;pre>&lt;code>GET http://localhost:9002/autodeliver/checkState/1545136
HTTP/1.1 200 OK
transfer-encoding: chunked
Content-Type: application/json;charset=UTF-8
Date: Wed, 02 Dec 2020 07:46:40 GMT
3
Response code: 200 (OK); Time: 87ms; Content length: 1 bytes
GET http://localhost:9002/resume/openstate/1545136
HTTP/1.1 200 OK
transfer-encoding: chunked
Content-Type: application/json;charset=UTF-8
Date: Wed, 02 Dec 2020 07:46:55 GMT
3
Response code: 200 (OK); Time: 95ms; Content length: 1 bytes
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h2 id="gateway-路由规则">GateWay 路由规则&lt;/h2>
&lt;p>Spring Cloud GateWay 帮我们内置了很多 Predicates功能，实现了各种路由匹配规则（通过 Header、请求参数等作为条件）匹配到对应的路由。&lt;/p>
&lt;p>&lt;strong>RoutePredicateFactory路由断言工厂&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>断言类型&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>DateTime 时间类断言&lt;/td>
&lt;td>根据请求时间在配置时间之前/之后/之间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Cookie 类断言&lt;/td>
&lt;td>指定Cookie正则匹配指定值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Header 请求头断言&lt;/td>
&lt;td>指定Header正则匹配指定值/请求头中是否包含某个属性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Host 请求主机断言&lt;/td>
&lt;td>请求Host匹配指定值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Methond 请求方式类断言&lt;/td>
&lt;td>请求Method匹配指定请求方式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Path 请求路径类断言&lt;/td>
&lt;td>请求路径正则匹配指定值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QueryParam 请求参数类断言&lt;/td>
&lt;td>查询参数正则匹配指定值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RemoteAddr远程地址类断言&lt;/td>
&lt;td>请求远程地址匹配指定值&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>时间后匹配&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cloud&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">gateway&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">routes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">after_route&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uri&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://example.org&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">predicates&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">After=2017-01-20T17:42:47.789-07:00[America/Denver]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>时间点前匹配&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cloud&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">gateway&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">routes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">before_route&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uri&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://example.org&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">predicates&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">Before=2017-01-20T17:42:47.789-07:00[America/Denver]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>时间区间匹配&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cloud&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">gateway&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">routes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">between_route&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uri&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://example.org&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">predicates&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">Between=2017-01-20T17:42:47.789-07:00[America/Denver], 2017-0121T17:42:47.789-07:00[America/Denver]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>指定Cookie正则匹配指定值&lt;/p>
&lt;pre>&lt;code class="language-yam" data-lang="yam">spring:
cloud:
gateway:
routes:
- id: cookie_route
uri: https://example.org
predicates:
- Cookie=chocolate, ch.p
&lt;/code>&lt;/pre>&lt;p>指定Header正则匹配指定值&lt;/p>
&lt;pre>&lt;code class="language-yam" data-lang="yam">spring:
cloud:
gateway:
routes:
- id: header_route
uri: https://example.org
predicates:
- Header=X-Request-Id, \d+
&lt;/code>&lt;/pre>&lt;p>请求Host匹配指定值&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cloud&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">gateway&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">routes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">host_route&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uri&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://example.org&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">predicates&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">Host=**.somehost.org,**.anotherhost.org&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>请求Method匹配指定请求⽅式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cloud&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">gateway&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">routes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">method_route&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uri&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://example.org&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">predicates&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">Method=GET,POST&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>请求路径正则匹配&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cloud&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">gateway&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">routes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">path_route&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uri&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://example.org&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">predicates&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">Path=/red/{segment},/blue/{segment}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>请求包含某参数&lt;/p>
&lt;pre>&lt;code class="language-yam" data-lang="yam">spring:
cloud:
gateway:
routes:
- id: query_route
uri: https://example.org
predicates:
- Query=green
&lt;/code>&lt;/pre>&lt;p>请求包含某参数并且参数值匹配正则表达式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cloud&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">gateway&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">routes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">query_route&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uri&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://example.org&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">predicates&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">Query=red, gree.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>远程地址匹配&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cloud&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">gateway&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">routes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">remoteaddr_route&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uri&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://example.org&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">predicates&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">RemoteAddr=192.168.1.1/24&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="gateway-动态路由">GateWay 动态路由&lt;/h2>
&lt;p>GateWay⽀持⾃动从注册中⼼中获取服务列表并访问，即所谓的动态路由，实现步骤如下&lt;/p>
&lt;ol>
&lt;li>
&lt;p>pom.xml中添加注册中⼼客户端依赖（因为要获取注册中⼼服务列表，eureka客户端已经引入）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>动态路由配置（修改部分）&lt;/p>
&lt;pre>&lt;code>uri: lb://service-autodeliver
&lt;/code>&lt;/pre>&lt;pre>&lt;code>uri: lb://service-resume
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>注意：动态路由设置时，uri以 lb: //开头（lb代表从注册中心获取服务），后⾯是需要转发到的服务名称&lt;/strong>&lt;/p>
&lt;h2 id="gateway-过滤器">GateWay 过滤器&lt;/h2>
&lt;p>&lt;strong>简介&lt;/strong>&lt;/p>
&lt;p>从过滤器⽣命周期（影响时机点）的⻆度来说，主要有两个pre和post：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>生命周期时机点&lt;/th>
&lt;th>作用&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>pre&lt;/td>
&lt;td>这种过滤器在请求被路由之前调⽤。我们可利⽤这种过滤器实现身份验证、在集群中 选择 请求的微服务、记录调试信息等。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>post&lt;/td>
&lt;td>这种过滤器在路由到微服务以后执⾏。这种过滤器可⽤来为响应添加标准的 HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>从过滤器类型的⻆度，Spring Cloud GateWay的过滤器分为GateWayFilter和GlobalFilter两种&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>过滤器类型&lt;/th>
&lt;th>影响范围&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>GateWayFilter&lt;/td>
&lt;td>应⽤到单个路由路由上&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GlobalFilter&lt;/td>
&lt;td>应⽤到所有的路由上&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>如Gateway Filter可以去掉url中的占位后转发路由，比如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">predicates&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">Path=/resume/** &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">filters&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">StripPrefix=1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 可以去掉resume之后转发&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>注意：GlobalFilter全局过滤器是程序员使用⽐较多的过滤器，主要介绍这部分&lt;/strong>&lt;/p>
&lt;p>&lt;strong>自定义全局过滤器实现IP访问控制（黑白名单）&lt;/strong>&lt;/p>
&lt;p>请求过来时，判断发送请求的客户端的ip，如果在⿊名单中，拒绝访问&lt;/p>
&lt;p>⾃定义GateWay全局过滤器时，我们实现Global Filter接⼝即可，通过全局过滤器可以实现⿊⽩名单、 限流等功能。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @Description 自定义全局过滤器，会对所有路由生效
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Slf4j&lt;/span>
&lt;span class="nd">@Component&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">BlackListFilter&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">GlobalFilter&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Ordered&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 模拟⿊名单（实际可以去数据库或者redis中查询）
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">blackList&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="kd">static&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">blackList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;127.0.0.1&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 模拟本机地址
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 过滤器方法核心
&lt;/span>&lt;span class="cm"> * @param exchange 封装了request和response对象上下文
&lt;/span>&lt;span class="cm"> * @param chain 网关过滤链（包含全局过滤器和单路由过滤器）
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Mono&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Void&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">filter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ServerWebExchange&lt;/span> &lt;span class="n">exchange&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">GatewayFilterChain&lt;/span> &lt;span class="n">chain&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//获取客户端ip，判断是否在黑名单中，在就拒绝，不在就放行
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//从上下文去除request和response对象
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ServerHttpRequest&lt;/span> &lt;span class="n">request&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">exchange&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRequest&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">ServerHttpResponse&lt;/span> &lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">exchange&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getResponse&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//从request对象获取客户端ip
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">clientIp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRemoteAddress&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getHostString&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">warn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">clientIp&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//去黑名单查询
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">blackList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">contains&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">clientIp&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 决绝访问，返回
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setStatusCode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">UNAUTHORIZED&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 状态码
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">debug&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;=====&amp;gt;IP:&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">clientIp&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; 在⿊名单中，将被拒绝访问！&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Request be denied!&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">DataBuffer&lt;/span> &lt;span class="n">wrap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">bufferFactory&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">wrap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBytes&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">writeWith&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Mono&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">just&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">wrap&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// 合法请求，放⾏，执⾏后续的过滤器
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">chain&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">filter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">exchange&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 返回值表示当前过滤器的顺序(优先级)，数值越⼩，优先级越高
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getOrder&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="gateway-高可用">GateWay 高可用&lt;/h2>
&lt;p>⽹关作为⾮常核⼼的⼀个部件，如果挂掉，那么所有请求都可能⽆法路由处理，因此我们需要做 GateWay的高可用。&lt;/p>
&lt;p>GateWay的⾼可⽤很简单：可以启动多个GateWay实例来实现⾼可⽤，在GateWay的上游使⽤Nginx 等负载均衡设备进⾏负载转发以达到⾼可⽤的⽬的。&lt;/p>
&lt;p>启动多个GateWay实例（假如说两个，⼀个端⼝9002，⼀个端⼝9003），剩下的就是使⽤Nginx等完 成负载代理即可。示例如下：&lt;/p>
&lt;pre>&lt;code>#配置多个GateWay实例
upstream gateway {
server 127.0.0.1:9002
server 127.0.0.1:9003
}
location / {
proxy_pass http://gateway
}
&lt;/code>&lt;/pre></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/springcloud/">springcloud</category><category domain="https://chuchin.cn/tags/java/">Java</category><category domain="https://chuchin.cn/tags/spring-cloud/">Spring Cloud</category><category domain="https://chuchin.cn/tags/gateway/">GateWay</category></item><item><title>SCN核心组件 Feign</title><link>https://chuchin.cn/tech/distributed-micro-service/springcloud/scn-core-feign/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/springcloud/scn-core-feign/</guid><pubDate>Wed, 07 Oct 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>&lt;em>本文源代码下载：&lt;a href="https://chuchin.cn/file/springcloud/spring-cloud-feign.zip">spring-cloud-feign.zip&lt;/a>&lt;/em>&lt;/p>
&lt;h2 id="引言">引言&lt;/h2>
&lt;p>服务消费者调用服务提供者的时候使用RestTemplate技术，存在不便之处，拼接URL和restTemplate.getForObject这两处代码都比较模板化，那么能不能不让我们来写这种模板化的东西，另外来说，拼接url存在硬编码，还比较容易出错&lt;/p>
&lt;h2 id="feign-简介">Feign 简介&lt;/h2>
&lt;p>Feign是Netflix开发的⼀个轻量级RESTful的HTTP服务客户端（⽤它来发起请求，远程调⽤的），是以 Java接⼝注解的⽅式调⽤Http请求，而不用像Java中通过封装HTTP请求报⽂的⽅式直接调⽤，Feign被广泛应⽤在Spring Cloud 的解决⽅案中。&lt;/p>
&lt;p>类似于Dubbo，服务消费者拿到服务提供者的接⼝，然后像调用本地方法一样去调用，实际发出的是远程请求。&lt;/p>
&lt;ul>
&lt;li>Feign可帮助我们更加便捷，优雅的调⽤HTTP API：不需要我们去拼接url然后呢调⽤ restTemplate的api，在SpringCloud中，使⽤Feign非常简单，创建⼀个接口（在消费者--服务调用方这⼀端），并在接口上添加⼀些注解，代码就完成了&lt;/li>
&lt;li>SpringCloud对Feign进行了增强，是Feign支持SpringMVC注解（OpenFeign）&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>本质：封装了Http调用流程，更符合面向接口编程的习惯，类似Dubbo的服务调用&lt;/strong>&lt;/p>
&lt;h2 id="feign-配置应用">Feign 配置应用&lt;/h2>
&lt;p>在服务调用工程（消费）创建接口（添加注解）&lt;/p>
&lt;p>（效果）Feign = RestTemplate + Ribbon + Hystrix&lt;/p>
&lt;ol>
&lt;li>
&lt;p>复制service-autodeliver-8090模块到新建的service-autodeliver-8091模块&lt;/p>
&lt;/li>
&lt;li>
&lt;p>服务消费者⼯程（⾃动投递微服务8091）中引⼊Feign依赖（或者⽗类⼯程）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-openfeign&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>服务消费者⼯程（⾃动投递微服务）启动类使⽤注解@EnableFeignClients添加Feign⽀持&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@SpringBootApplication&lt;/span>
&lt;span class="nd">@EnableDiscoveryClient&lt;/span> &lt;span class="c1">//开启服务发现
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@EnableFeignClients&lt;/span> &lt;span class="c1">//开启feign
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AutoDeliverApplication8091&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SpringApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AutoDeliverApplication8091&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此时去掉Hystrix熔断的⽀持注解@EnableCircuitBreaker&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建Feign接口&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">//调用的服务名称，和服务提供者yml文件中spring.application.name保持一致
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@FeignClient&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;service-resume&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">ResumeFeignClient&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 调用请求路径
&lt;/span>&lt;span class="cm"> * @param userId
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@RequestMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;/resume/openstate/{userId}&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">method&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">RequestMethod&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">GET&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">Integer&lt;/span> &lt;span class="nf">findResumeOpenState&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@PathVariable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;userId&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">userId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>注意&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>@FeignClient注解的name属性⽤于指定要调⽤的服务提供者名称，和服务提供者yml⽂件中 spring.application.name保持⼀致&lt;/li>
&lt;li>接口中的⽅法，就好比是远程服务提供者Controller中的Hander⽅法（只不过如同本地调 ⽤了），那么在进行参数绑定时，可以使⽤@PathVariable、@RequestParam、 @RequestHeader等，这也是OpenFeign对SpringMVC注解的⽀持，但是需要注意value必须设置，否则会抛出异常&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>使用接口方法完成远程调用（注入接口即可，实际注入的是接口的实现）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Slf4j&lt;/span>
&lt;span class="nd">@RestController&lt;/span>
&lt;span class="nd">@RequestMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/autodeliver&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AutoDeliverController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">ResumeFeignClient&lt;/span> &lt;span class="n">resumeFeignClient&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@GetMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/checkState/{userId}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="nf">findResumeOpenState&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@PathVariable&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">userId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">resumeFeignClient&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">findResumeOpenState&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">userId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>启动项目，然后在test.http访问&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">GET http://localhost:8091/autodeliver/checkState/1545136
Accept: application/json
###
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="feign-对负载均衡的支持">Feign 对负载均衡的支持&lt;/h2>
&lt;p>Feign 本身已经集成了Ribbon依赖和⾃动配置，因此我们不需要额外引⼊依赖，可以通过 ribbon.xx 来 进 ⾏全局配置,也可以通过服务名.ribbon.xx 来对指定服务进⾏细节配置配置（参考之前，此处略）&lt;/p>
&lt;p>Feign默认的请求处理超时时⻓1s，有时候我们的业务确实执⾏的需要⼀定时间，那么这个时候，我们 就需要调整请求处理超时时⻓，Feign⾃⼰有超时设置，如果配置Ribbon的超时，则会以Ribbon的为准&lt;/p>
&lt;p>&lt;strong>Ribbon设置&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">#针对被调用方微服务名称，不加就是全局生效
service-resume:
ribbon:
#请求连接超时时间
#ConnectTimeout: 2000
#请求处理超时时间
#ReadTimeout: 5000
#对所有操作都进⾏重试
OkToRetryOnAllOperations: true
####根据如上配置，当访问到故障请求的时候，它会再尝试访问⼀次当前实例（次数由 MaxAutoRetries配置），
####如果不⾏，就换⼀个实例进⾏访问，如果还不行，再换⼀次实例访问（更换次数由 MaxAutoRetriesNextServer配置），
####如果依然不⾏，返回失败信息。
MaxAutoRetries: 0 #对当前选中实例重试次数，不包括第⼀次调⽤
MaxAutoRetriesNextServer: 0 #切换实例的重试次数
NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule #负载策略调整
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="feign对熔断器支持">Feign对熔断器支持&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>在Feign客户端⼯程配置⽂件（application.yml）中开启Feign对熔断器的⽀持&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">#开启Feign的熔断功能
feign:
hystrix:
enabled: true
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Feign的超时时⻓设置那其实就上⾯Ribbon的超时时⻓设置&lt;/p>
&lt;p>Hystrix超时设置（就按照之前Hystrix设置的⽅式就OK了）&lt;/p>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>开启Hystrix之后，Feign中的⽅法都会被进⾏统一管理了，⼀旦出现问题就进⼊对应的回退逻辑处理&lt;/li>
&lt;li>针对超时这⼀点，当前有两个超时时间设置（Feign/hystrix），熔断的时候是根据这两个时间的最小值来进⾏的，即处理时⻓超过最短的那个超时时间了就熔断进⼊回退降级逻辑&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">hystrix:
command:
default:
execution:
isolation:
thread:
timeoutInMilliseconds: 1000 #超时时长
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>自定义FallBack处理类（需要实现FeignClient接口）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Component&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ResumeFallback&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">ResumeFeignClient&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 调用请求路径
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="nf">findResumeOpenState&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">userId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">10086&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>在@FeignClient注解中关联自定义处理类&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">// 使⽤fallback的时候，类上的 @RequestMapping的url前缀限定，改成配置在@FeignClient的path属性中 //@RequestMapping(&amp;#34;/resume&amp;#34;)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@FeignClient&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;service-resume&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">fallback&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ResumeFallback&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;/resume&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">ResumeFeignClient&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 调用请求路径
&lt;/span>&lt;span class="cm"> * @param userId
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@RequestMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;/openstate/{userId}&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">method&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">RequestMethod&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">GET&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">Integer&lt;/span> &lt;span class="nf">findResumeOpenState&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@PathVariable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;userId&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">userId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="feign-对请求压缩和响应压缩的支持">Feign 对请求压缩和响应压缩的支持&lt;/h2>
&lt;p>Feign ⽀持对请求和响应进⾏GZIP压缩，以减少通信过程中的性能损耗。通过下⾯的参数即可开启请求与响应的压缩功能：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">feign:
compression:
request:
#开启压缩请求
enabled: true
#设置压缩的数据类，此处也是默认值
mime-types: text/html,application/xml,application/json
response:
enabled: true
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="feign-的日志级别配置">Feign 的日志级别配置&lt;/h2>
&lt;p>Feign是http请求客户端，类似于咱们的浏览器，它在请求和接收响应的时候，可以打印出比较详细的 ⼀些⽇志信息（响应头，状态码等等）&lt;/p>
&lt;p>如果我们想看到Feign请求时的日志，我们可以进行配置，默认情况下Feign的日志没有开启&lt;/p>
&lt;ol>
&lt;li>
&lt;p>开启Feign日志级别功能和级别&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">FeignConfig&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * // Feign的⽇志级别（Feign请求过程信息）
&lt;/span>&lt;span class="cm"> * // NONE：默认的，不显示任何⽇志----性能最好
&lt;/span>&lt;span class="cm"> * // BASIC：仅记录请求⽅法、URL、响应状态码以及执⾏时间----⽣产问题追踪
&lt;/span>&lt;span class="cm"> * // HEADERS：在BASIC级别的基础上，记录请求和响应的header
&lt;/span>&lt;span class="cm"> * // FULL：记录请求和响应的header、body和元数据----适⽤于开发及测试环境定位问题
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="n">Logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Level&lt;/span> &lt;span class="nf">feignLevel&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Level&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">FULL&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>配置log日志级别为debug&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">logging:
level:
#Feign日志只会对日志级别为debug的作出反应
cn.chuchin.controller.service.ResumeFeignClient: debug
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/springcloud/">springcloud</category><category domain="https://chuchin.cn/tags/java/">Java</category><category domain="https://chuchin.cn/tags/spring-cloud/">Spring Cloud</category><category domain="https://chuchin.cn/tags/feign/">Feign</category></item><item><title>SCN核心组件 Hystrix</title><link>https://chuchin.cn/tech/distributed-micro-service/springcloud/scn-core-hystrix/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/springcloud/scn-core-hystrix/</guid><pubDate>Tue, 06 Oct 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>&lt;em>本文源代码下载：&lt;a href="https://chuchin.cn/file/springcloud/spring-cloud-hystrix.zip">spring-cloud-hystrix.zip&lt;/a>&lt;/em>&lt;/p>
&lt;h2 id="微服务中的雪崩效应">微服务中的雪崩效应&lt;/h2>
&lt;h2 id="雪崩效应解决方法">雪崩效应解决方法&lt;/h2>
&lt;h2 id="hystrix简介">Hystrix简介&lt;/h2>
&lt;h2 id="hystrix熔断应用">Hystrix熔断应用&lt;/h2>
&lt;ol>
&lt;li>消费者工程中引入Hystrix依赖：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="c">&amp;lt;!-- 熔断器Hystrix--&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-netflix-hystrix&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>消费者工程启动类中添加熔断器开启注解&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@EnableCircuitBreaker&lt;/span> &lt;span class="c1">//开启熔断
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>定义服务降级处理⽅法，并在业务⽅法上使⽤@HystrixCommand的fallbackMethod属性关联到 服务降级处理⽅法&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 提供者模拟处理超时，调用方法添加Hystrix控制
&lt;/span>&lt;span class="cm"> * @param userId
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="c1">// 使用@HystrixCommand注解进行熔断控制
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@HystrixCommand&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="c1">// 线程池标识，要保持唯一，不唯一的话就共用了
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">threadPoolKey&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;findResumeOpenStateTimeout&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="c1">// 线程池细节属性配置
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">threadPoolProperties&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@HystrixProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;coreSize&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="c1">// 线程数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@HystrixProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;maxQueueSize&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;20&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">// 等待队列长度
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">},&lt;/span>
&lt;span class="c1">// commandProperties熔断的一些细节属性配置
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">commandProperties&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 每一个属性都是一个HystrixProperty
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@HystrixProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;execution.isolation.thread.timeoutInMilliseconds&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;2000&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">)&lt;/span>
&lt;span class="nd">@GetMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/checkStateTimeout/{userId}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="nf">findResumeOpenStateTimeout&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@PathVariable&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">userId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 使用ribbon不需要我们自己获取服务实例然后选择一个那么去访问了（自己的负载均衡）
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;http://service-resume/resume/openstate/&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">userId&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 指定服务名
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="n">forObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">restTemplate&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getForObject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">forObject&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@HystrixCommand&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="c1">// 线程池标识，要保持唯一，不唯一的话就共用了
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">threadPoolKey&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;findResumeOpenStateTimeoutFallback&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="c1">// 线程池细节属性配置
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">threadPoolProperties&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@HystrixProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;coreSize&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="c1">// 线程数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@HystrixProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;maxQueueSize&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;20&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">// 等待队列长度
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">},&lt;/span>
&lt;span class="c1">// commandProperties熔断的一些细节属性配置
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">commandProperties&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 每一个属性都是一个HystrixProperty
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@HystrixProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;execution.isolation.thread.timeoutInMilliseconds&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;2000&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="c1">// hystrix高级配置，定制工作过程细节
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 统计时间窗口定义
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@HystrixProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;metrics.rollingStats.timeInMilliseconds&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;8000&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="c1">// 统计时间窗口内的最小请求数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@HystrixProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;circuitBreaker.requestVolumeThreshold&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="c1">// 统计时间窗口内的错误数量百分比阈值
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@HystrixProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;circuitBreaker.errorThresholdPercentage&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;50&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="c1">// 自我修复时的活动窗口长度
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@HystrixProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;circuitBreaker.sleepWindowInMilliseconds&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;3000&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">},&lt;/span>
&lt;span class="n">fallbackMethod&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;myFallBack&amp;#34;&lt;/span> &lt;span class="c1">// 回退方法
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">)&lt;/span>
&lt;span class="nd">@GetMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/checkStateTimeoutFallback/{userId}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="nf">findResumeOpenStateTimeoutFallback&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@PathVariable&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">userId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 使用ribbon不需要我们自己获取服务实例然后选择一个那么去访问了（自己的负载均衡）
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;http://service-resume/resume/openstate/&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">userId&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 指定服务名
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="n">forObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">restTemplate&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getForObject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">forObject&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/*
&lt;/span>&lt;span class="cm"> 定义回退方法，返回预设默认值
&lt;/span>&lt;span class="cm"> 注意：该方法形参和返回值与原始方法保持一致
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="nf">myFallBack&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">userId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">123333&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 兜底数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：降级（兜底）方法必须和被降级方法相同的方法签名（相同参数列表，相同返回值），可以在类上使用@DefaultProperties注解统一指定整个类中公用的降级（兜底）方法&lt;/p>
&lt;p>访问接口，此时能正常访问，返回结果&lt;/p>
&lt;pre>&lt;code>GET http://localhost:8090/autodeliver/checkStateTimeout/1545136
Accept: application/json
###
GET http://localhost:8090/autodeliver/checkStateTimeoutFallback/1545136
Accept: application/json
###
&lt;/code>&lt;/pre>&lt;ol start="4">
&lt;li>服务提供者模拟请求超时（线程休眠3s），只修改8080实例，8081不修改，对比观察&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="nd">@RestController&lt;/span>
&lt;span class="nd">@RequestMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/resume&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ResumeController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">ResumeService&lt;/span> &lt;span class="n">resumeService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@GetMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/openstate/{userId}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="nf">findDefaultResumeByUserId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@PathVariable&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">userId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">3000&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">Resume&lt;/span> &lt;span class="n">resume&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">resumeService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">findDefaultResumeByUserId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">userId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">resume&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getIsOpenResume&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">resume&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getIsOpenResume&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;pre>&lt;code>因为我们已经使⽤了Ribbon负载（轮询），所以我们在请求的时候，⼀次熔断降级，⼀次正常返 回
&lt;/code>&lt;/pre>
&lt;h2 id="hystrix舱壁模式线程池隔离策略">Hystrix舱壁模式（线程池隔离策略）&lt;/h2>
&lt;p>Hystrix舱壁模式程序修改：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">// (findResumeOpenStateTimeout)线程池细节属性配置
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">threadPoolProperties&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@HystrixProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;coreSize&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="c1">// 线程数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@HystrixProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;maxQueueSize&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;20&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">// 等待队列长度
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">},&lt;/span>
&lt;span class="c1">// (findResumeOpenStateTimeoutFallback)线程池细节属性配置
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">threadPoolProperties&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@HystrixProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;coreSize&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="c1">// 线程数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@HystrixProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;maxQueueSize&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;20&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">// 等待队列长度
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">},&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>先查看AutoDeliverApplication8090进程的pid：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">λ jps
&lt;span class="m">17760&lt;/span> Launcher
&lt;span class="m">5380&lt;/span> RemoteMavenServer36
&lt;span class="m">12616&lt;/span> RemoteMavenServer36
&lt;span class="m">14120&lt;/span> AutoDeliverApplication8090
&lt;span class="m">2504&lt;/span> RemoteMavenServer36
&lt;span class="m">17100&lt;/span> RemoteMavenServer36
&lt;span class="m">3852&lt;/span>
&lt;span class="m">18448&lt;/span> ResumeApplication8081
&lt;span class="m">17172&lt;/span> CloudEurekaApplication8761
&lt;span class="m">4724&lt;/span> CloudEurekaApplication8762
&lt;span class="m">5748&lt;/span> ResumeApplication8080
&lt;span class="m">7576&lt;/span> RemoteMavenServer36
&lt;span class="m">8152&lt;/span> Jps
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过jstack命令查看线程情况，和我们程序设置的相符&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">λ jstack &lt;span class="m">14120&lt;/span> &lt;span class="p">|&lt;/span> grep hystrix
&lt;span class="s2">&amp;#34;hystrix-findResumeOpenStateTimeout-1&amp;#34;&lt;/span> &lt;span class="c1">#125 daemon prio=5 os_prio=0 cpu=109.38ms elapsed=770.29s tid=0x0000023807011800 nid=0x1044 waiting on condition [0x000000c44adff000]&lt;/span>
&lt;span class="s2">&amp;#34;hystrix-findResumeOpenStateTimeoutFallback-1&amp;#34;&lt;/span> &lt;span class="c1">#134 daemon prio=5 os_prio=0 cpu=15.63ms elapsed=758.60s tid=0x0000023804bdb000 nid=0x1f58 waiting on condition [0x000000c44b6fe000]&lt;/span>
&lt;span class="s2">&amp;#34;hystrix-findResumeOpenStateTimeoutFallback-2&amp;#34;&lt;/span> &lt;span class="c1">#137 daemon prio=5 os_prio=0 cpu=15.63ms elapsed=754.55s tid=0x0000023804bdf000 nid=0x2164 waiting on condition [0x000000c44b9fe000]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="hystrix工作流与高级应用">Hystrix工作流与高级应用&lt;/h2>
&lt;ol>
&lt;li>当调用出现问题，开启一个时间窗（10s）&lt;/li>
&lt;li>在这个时间窗内，统计调用次数是否达到最小请求数？
&lt;ul>
&lt;li>如果没有达到，则重置统计信息，回到第1步&lt;/li>
&lt;li>如果达到了，则统计失败的请求数占所有请求数的百分⽐，是否达到阈值？ 如果达到，则跳闸（不再请求对应服务） 如果没有达到，则重置统计信息，回到第1步&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>如果跳闸，则会开启⼀个活动窗⼝（默认5s），每隔5s，Hystrix会让⼀个请求通过,到达那个问题服 务，看 是否调⽤成功，如果成功，重置断路器回到第1步，如果失败，回到第3步&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm">* 8秒钟内，请求次数达到2个，并且失败率在50%以上，就跳闸 * 跳闸后活动窗⼝设置为3s
&lt;/span>&lt;span class="cm">*/&lt;/span>
&lt;span class="nd">@HystrixCommand&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="n">commandProperties&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 每一个属性都是一个HystrixProperty @HystrixProperty(name=&amp;#34;execution.isolation.thread.timeoutInMilliseconds&amp;#34;,value=&amp;#34;2000&amp;#34;),
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// hystrix高级配置，定制工作过程细节
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 统计时间窗口定义
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@HystrixProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;metrics.rollingStats.timeInMilliseconds&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;8000&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="c1">// 统计时间窗口内的最小请求数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@HystrixProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;circuitBreaker.requestVolumeThreshold&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="c1">// 统计时间窗口内的错误数量百分比阈值
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@HystrixProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;circuitBreaker.errorThresholdPercentage&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;50&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="c1">// 自我修复时的活动窗口长度
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@HystrixProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;circuitBreaker.sleepWindowInMilliseconds&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;3000&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过注解进行的配置也可以配置在配置文件中&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">#配置熔断策略
hystrix:
command:
default:
circuitBreaker: # 强制打开熔断器，如果该属性设置为true，强制断路器进⼊打开状态，将会拒绝所有的请求。 默认false关闭的
forceOpen: false # 触发熔断错误⽐例阈值，默认值50%
errorThresholdPercentage: 50 # 熔断后休眠时⻓，默认值5秒
sleepWindowInMilliseconds: 3000 # 熔断触发最⼩请求次数，默认值是20
requestVolumeThreshold: 2
execution:
isolation:
thread: # 熔断超时设置，默认为1秒
timeoutInMilliseconds: 2000
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>基于springboot的健康检查观察跳闸状态（⾃动投递微服务暴露健康检查细节）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml"># springboot中暴露健康检查等断点接口
management:
endpoints:
web:
exposure:
include: &amp;#34;*&amp;#34;
#暴露健康接口的细节
endpoint:
health:
show-details: always
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>访问健康检查接口：&lt;a href="http://localhost:8090/actuator/health">http://localhost:8090/actuator/health&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="s2">&amp;#34;hystrix&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;status&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;UP&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>跳闸状态&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="s2">&amp;#34;hystrix&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;status&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;CIRCUIT_OPEN&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;detail&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;openCircuitBreakers&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s2">&amp;#34;AutodeliverController::findResumeOpenStateTimeoutFallback&amp;#34;&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>窗口内自我修复&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="s2">&amp;#34;hystrix&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;status&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;UP&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="hystrix-dashboard断路监控仪表盘">Hystrix Dashboard断路监控仪表盘&lt;/h2>
&lt;p>正常状态是UP，跳闸是⼀种状态CIRCUIT_OPEN，可以通过/health查看，前提是⼯程中需要引⼊ SpringBoot的actuator（健康监控），它提供了很多监控所需的接⼝，可以对应⽤系统进⾏配置查看、 相关功能统计等。
已经统⼀添加在⽗⼯程中&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-actuator&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果我们想看到Hystrix相关数据，⽐如有多少请求、多少成功、多少失败、多少降级等，那么引⼊ SpringBoot健康监控之后，访问/actuator/hystrix.stream接⼝可以获取到监控的⽂字信息，但是不直观，所以Hystrix官⽅还提供了基于图形化的DashBoard（仪表板）监控平 台。Hystrix仪表板可以显示 每个断路器（被@HystrixCommand注解的⽅法）的状态。&lt;/p>
&lt;ol>
&lt;li>新建一个监控服务工程cloud-hystrix-dashboard-9000，导入依赖坐标&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml"> &lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-netflix-hystrix&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-netflix-hystrix-dashboard&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-netflix-eureka-client&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>启动类添加@EnableHystrixDashboard激活仪表盘&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="nd">@SpringBootApplication&lt;/span>
&lt;span class="nd">@EnableHystrixDashboard&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">HystrixDashboardApplication9000&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SpringApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HystrixDashboardApplication9000&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>application.yml&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml"> server:
port: 9000
spring:
application:
name: cloud-hystrix-dashboard
eureka:
client:
service-url:
#eureka server的路径
defaultZone: http://a.eureka.server:8761/eureka/,http://b.eureka.server:8762/eureka/
instance:
#使⽤ip注册，否则会使⽤主机名注册了（此处考虑到对⽼版本的兼容，新版本经过实验都是ip）
prefer-ip-address: true
#⾃定义实例显示格式，加上版本号，便于多版本管理，注意是ip-address，早期版本是ipAddress
instance-id: ${spring.cloud.client.ipaddress}:${spring.application.name}:${server.port}:@project.version@
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>在被监测的微服务中注册监控servlet（⾃动投递微服务，监控数据就是来⾃于这个微服务）&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 在被监控的微服务中注册一个serlvet，后期我们就是通过访问这个servlet来获取该服务的Hystrix监控数据的
&lt;/span>&lt;span class="cm"> * 前提：被监控的微服务需要引入springboot的actuator功能
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ServletRegistrationBean&lt;/span> &lt;span class="nf">getServlet&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="n">HystrixMetricsStreamServlet&lt;/span> &lt;span class="n">streamServlet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HystrixMetricsStreamServlet&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">ServletRegistrationBean&lt;/span> &lt;span class="n">registrationBean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ServletRegistrationBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">streamServlet&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">registrationBean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setLoadOnStartup&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">registrationBean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addUrlMappings&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/actuator/hystrix.stream&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">registrationBean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;HystrixMetricsStreamServlet&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">registrationBean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>被监控微服务发布之后，可以直接访问监控servlet，但是得到的数据并不直观，后期可以结合仪表盘更 友好的展示&lt;/p>
&lt;ol start="5">
&lt;li>
&lt;p>访问Dashboard地址: &lt;a href="http://localhost:9000/hystrix">http://localhost:9000/hystrix&lt;/a>&lt;/p>
&lt;p>输⼊监控的微服务端点地址，展示详细信息：[http://localhost:8090/actuator/hystrix.stream](http://localhost:8090/actuat or/hystrix.stream)&lt;/p>
&lt;p>访问接口，查看dashboard&lt;/p>
&lt;p>百分⽐，10s内错误请求百分⽐&lt;/p>
&lt;p>实心圆：&lt;/p>
&lt;ul>
&lt;li>⼤⼩：代表请求流量的⼤⼩，流量越⼤球越⼤&lt;/li>
&lt;li>颜⾊：代表请求处理的健康状态，从绿⾊到红⾊递减，绿⾊代表健康，红⾊就代表很不健康&lt;/li>
&lt;/ul>
&lt;p>曲线波动图： 记录了2分钟内该⽅法上流量的变化波动图，判断流量上升或者下降的趋势&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="hystrix-turbine聚合监控">Hystrix Turbine聚合监控&lt;/h2>
&lt;p>之前，我们针对的是⼀个微服务实例的Hystrix数据查询分析，在微服务架构下，⼀个微服务的实例往往是多个（集群化）比如自动投递微服务实例1(hystrix) ip1:port1/actuator/hystrix.stream，实例2(hystrix) ip2:port2/actuator/hystrix.stream，实例3(hystrix) ip3:port3/actuator/hystrix.stream，按照已有的⽅法，我们就可以结合dashboard仪表盘每次输⼊⼀个监控数据流url，进去查看
⼿⼯操作能否被⾃动功能替代？Hystrix Turbine聚合（聚合各个实例上的hystrix监控数据）监控 Turbine（涡轮）&lt;/p>
&lt;p>思考：微服务架构下，⼀个微服务往往部署多个实例，如果每次只能查看单个实例的监控，就需要经常 切换很不⽅便，在这样的场景下，我们可以使⽤ Hystrix Turbine 进⾏聚合监控，它可以把相关微服务 的监控数据聚合在⼀起，便于查看。&lt;/p>
&lt;ol>
&lt;li>新建项目cloud-hystrix-turbine-9001，引入依赖坐标&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml"> &lt;span class="nt">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!--hystrix turbine聚合监控--&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-netflix-turbine&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!--引⼊eureka客户端的两个原因
&lt;/span>&lt;span class="c"> 1、微服务架构下的服务都尽量注册到服务中⼼去，便于统⼀管理
&lt;/span>&lt;span class="c"> 2、后续在当前turbine项⽬中我们需要配置turbine聚合的服务，⽐如，我们希望聚合 lagou-service-autodeliver这个服务的各个实例的hystrix数据流，那随后
&lt;/span>&lt;span class="c"> 我们就需要在application.yml⽂件中配置这个服务名，那么turbine获取服务下具
&lt;/span>&lt;span class="c"> 体实例的数据流的
&lt;/span>&lt;span class="c"> 时候需要ip和端⼝等实例信息，那么怎么根据服务名称获取到这些信息呢？ 当然可以从eureka服务注册中⼼获取
&lt;/span>&lt;span class="c"> --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-netflix-eureka-client&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>将需要进行Hystrix监控的多个微服务配置起来，在工程application.yml中开启Turbine及进⾏相关配置&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml"> server:
port: 9001
spring:
application:
name: cloud-hystrix-turbine
eureka:
client:
service-url:
#eureka server的路径
defaultZone: http://a.eureka.server:8761/eureka/,http://b.eureka.server:8762/eureka/
instance:
#使⽤ip注册，否则会使⽤主机名注册了（此处考虑到对⽼版本的兼容，新版本经过实验都是ip）
prefer-ip-address: true
#⾃定义实例显示格式，加上版本号，便于多版本管理，注意是ip-address，早期版本是ipAddress
instance-id: ${spring.cloud.client.ipaddress}:${spring.application.name}:${server.port}:@project.version@
turbine:
#appCofing配置需要聚合的服务名称，⽐如这⾥聚合⾃动投递微服务的hystrix监控数据
# 如果要聚合多个微服务的监控数据，那么可以使⽤英⽂逗号拼接，⽐如 a,b,c
appConfig: service-autodeliver
# 集群默认名称
clusterNameExpression: &amp;#34;&amp;#39;default&amp;#39;&amp;#34;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>在当前项⽬启动类上添加注解@EnableTurbine，开启仪表盘以及Turbine聚合&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="nd">@SpringBootApplication&lt;/span>
&lt;span class="nd">@EnableDiscoveryClient&lt;/span>
&lt;span class="nd">@EnableTurbine&lt;/span> &lt;span class="c1">//开启聚合功能
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">HystrixTurbineApplication9001&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SpringApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HystrixTurbineApplication9001&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>浏览器访问Turbine项目: &lt;a href="http://localhost:9001/turbine.stream">localhost:9001/turbine.stream&lt;/a>，就可以看到监控数据，通过dashboard的⻚⾯查看数据更直观，把刚才的地址输⼊&lt;a href="http://localhost:9000/hystrix/">Hystrix Dashboard&lt;/a> 的地址栏&lt;/li>
&lt;/ol></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/springcloud/">springcloud</category><category domain="https://chuchin.cn/tags/java/">Java</category><category domain="https://chuchin.cn/tags/spring-cloud/">Spring Cloud</category><category domain="https://chuchin.cn/tags/hystrix/">Hystrix</category></item><item><title>SCN核心组件 Ribbon</title><link>https://chuchin.cn/tech/distributed-micro-service/springcloud/scn-core-ribbon/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/springcloud/scn-core-ribbon/</guid><pubDate>Mon, 05 Oct 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>&lt;em>本文源代码下载：&lt;a href="https://chuchin.cn/file/springcloud/spring-cloud-ribbon.zip">spring-cloud-ribbon.zip&lt;/a>&lt;/em>&lt;/p>
&lt;h2 id="关于负载均衡">关于负载均衡&lt;/h2>
&lt;h2 id="ribbon应用">Ribbon应用&lt;/h2>
&lt;p>不需要引入额外的jar坐标，因为在服务消费者中引入的eureka-client，它会引入Ribbon相关jar&lt;/p>
&lt;p>打开消费者模块，代码中使用：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Bean&lt;/span>
&lt;span class="c1">//Ribbon负载均衡
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@LoadBalanced&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">RestTemplate&lt;/span> &lt;span class="nf">getRestTemplate&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RestTemplate&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>新增服务提供者api，返回当前实例的端口号，便于观察负载情况：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@RestController&lt;/span>
&lt;span class="nd">@RequestMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/server&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ServerPortController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Value&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;${server.port}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@GetMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/port&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="nf">getServerPort&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>新增消费者api：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@RestController&lt;/span>
&lt;span class="nd">@RequestMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/server&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ServerPortController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">RestTemplate&lt;/span> &lt;span class="n">restTemplate&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@GetMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/port&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="nf">getPort&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//直接配置服务名即可由Ribbon完成负载均衡
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="n">port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">restTemplate&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">getForObject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;http://service-resume/server/port&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>http文件新增：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">GET&lt;/span> &lt;span class="n">http&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="c1">//localhost:8090/server/port
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nl">Accept:&lt;/span> &lt;span class="n">application&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">json&lt;/span>
&lt;span class="err">###&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>请求多次，端口值发生变化，即负载均衡生效&lt;/p>
&lt;h2 id="ribbon负载均衡策略">Ribbon负载均衡策略&lt;/h2>
&lt;p>Ribbon内置了多种负载均衡策略，顶级接口为com.netflix.loadbalancer.IRule&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>负载均衡策略&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>RoundRobinRule：轮询 策略&lt;/td>
&lt;td>默认超过10次获取到的server都不可⽤，会返回⼀个空的server&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RandomRule：随机策略&lt;/td>
&lt;td>如果随机到的server为null或者不可⽤的话，会while不停的循环选 取&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RetryRule：重试策略&lt;/td>
&lt;td>⼀定时限内循环重试。默认继承RoundRobinRule，也⽀持⾃定义 注⼊，RetryRule会在每次选取之后，对选举的server进⾏判断， 是否为null，是否alive，并且在500ms内会不停的选取判断。⽽ RoundRobinRule失效的策略是超过10次，RandomRule是没有失 效时间的概念，只要serverList没都挂。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>BestAvailableRule：最⼩ 连接数策略&lt;/td>
&lt;td>遍历serverList，选取出可⽤的且连接数最⼩的⼀个server。该算 法⾥⾯有⼀个LoadBalancerStats的成员变量，会存储所有server 的运⾏状况和连接数。如果选取到的server为null，那么会调⽤ RoundRobinRule重新选取。1（1） 2（1） 3（1）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AvailabilityFilteringRule： 可⽤过滤策略&lt;/td>
&lt;td>扩展了轮询策略，会先通过默认的轮询选取⼀个server，再去判断 该server是否超时可⽤，当前连接数是否超限，都成功再返回。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ZoneAvoidanceRule：区 域权衡策略（默认策略）&lt;/td>
&lt;td>扩展了轮询策略，继承了2个过滤器：ZoneAvoidancePredicate和 AvailabilityPredicate，除了过滤超时和链接数过多的server，还会 过滤掉不符合要求的zone区域⾥⾯的所有节点，AWS --ZONE 在⼀ 个区域/机房内的服务实例中轮询&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>修改负载均衡策略&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="err">#&lt;/span>&lt;span class="n">针对的被调用方微服务名称&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">不加就是全局生效&lt;/span>
&lt;span class="n">service&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">resume&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">ribbon&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">负载策略调整&lt;/span>
&lt;span class="n">NFLoadBalancerRuleClassName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">netflix&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">loadbalancer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RandomRule&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/springcloud/">springcloud</category><category domain="https://chuchin.cn/tags/java/">Java</category><category domain="https://chuchin.cn/tags/spring-cloud/">Spring Cloud</category><category domain="https://chuchin.cn/tags/ribbon/">Ribbon</category></item><item><title>SCN核心组件 Eureka</title><link>https://chuchin.cn/tech/distributed-micro-service/springcloud/scn-core-eureka/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/springcloud/scn-core-eureka/</guid><pubDate>Sun, 04 Oct 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>&lt;em>本文源代码下载：&lt;a href="https://chuchin.cn/file/springcloud/spring-cloud-eureka.zip">spring-cloud-eureka.zip&lt;/a>&lt;/em>&lt;/p>
&lt;h2 id="关于注册中心">关于注册中心&lt;/h2>
&lt;p>对于任何一个&lt;/p>
&lt;p>&lt;strong>注意：服务注册中心本质上是为了解耦服务提供者和服务消费者。&lt;/strong>&lt;/p>
&lt;h3 id="注册中心一般原理">注册中心一般原理&lt;/h3>
&lt;h3 id="主流注册中心对比">主流注册中心对比&lt;/h3>
&lt;h2 id="服务注册中心组件-eureka">服务注册中心组件 Eureka&lt;/h2>
&lt;h2 id="eureka-应用及高可用集群">Eureka 应用及高可用集群&lt;/h2>
&lt;h3 id="搭建单例eureka-server服务注册中心">搭建单例Eureka Server服务注册中心&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>新建子模块 cloud-eureka-server-8761&lt;/p>
&lt;/li>
&lt;li>
&lt;p>父工程中引入依赖管理，指定版本为Greenwich.RELEASE&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependencyManagement&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-dependencies&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>Greenwich.RELEASE&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;type&amp;gt;&lt;/span>pom&lt;span class="nt">&amp;lt;/type&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;scope&amp;gt;&lt;/span>import&lt;span class="nt">&amp;lt;/scope&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependencyManagement&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>并手动引入jaxb的jar，因为JDK9之后默认没有加载该模块，EurekaServer使用到&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="c">&amp;lt;!--引⼊Jaxb，开始--&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.sun.xml.bind&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>jaxb-core&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>2.2.11&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>javax.xml.bind&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>jaxb-api&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.sun.xml.bind&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>jaxb-impl&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>2.2.11&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.glassfish.jaxb&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>jaxb-runtime&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>2.2.10-b140310.1920&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>javax.activation&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>activation&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.1.1&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span> &lt;span class="c">&amp;lt;!--引⼊Jaxb，结束--&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>在子模块cloud-eureka-server-8761引入：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml"> &lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-netflix-eureka-server&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>application.yml:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="c">#Eureka server服务端⼝&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">server&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8761&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">application&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cloud-eureka-server&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 应⽤名称，会在Eureka中作为服务的id标识（serviceId）&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">eureka&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">instance&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hostname&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">localhost&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">client&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">service-url&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 客户端与EurekaServer交互的地址，如果是集群，也需要写其它Server的地址&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">defaultZone&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http://${eureka.instance.hostname}:${server.port}/eureka/&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">register-with-eureka&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># ⾃⼰就是服务不需要注册⾃⼰&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">fetch-registry&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#⾃⼰就是服务不需要从Eureka Server获取服务信息,默认为true，置为false&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>启动类CloudEurekaApplication8761.java&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@SpringBootApplication&lt;/span>
&lt;span class="nd">@EnableEurekaServer&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">CloudEurekaApplication8761&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SpringApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CloudEurekaApplication8761&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>执行启动类，访问&lt;a href="http://127.0.0.1:8761/">Eureka&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="搭建eureka-server-ha-高可用集群">搭建Eureka Server HA 高可用集群&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>修改本机hosts文件，增加条目&lt;/p>
&lt;pre>&lt;code>127.0.0.1 a.eureka.server
127.0.0.1 b.eureka.server
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>复制cloud-eureka-server-8761，创建新子模块cloud-eureka-server-8762，修改主函数名&lt;/p>
&lt;p>其配置文件分别对应改为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">#Eureka server服务端⼝
server:
port: 8761
spring:
application:
name: cloud-eureka-server # 应⽤名称，会在Eureka中作为服务的id标识（serviceId）
eureka:
instance:
hostname: a.eureka.server
client:
register-with-eureka: true # 需要注册⾃⼰
fetch-registry: true #从Eureka Server获取服务信息,默认为true
service-url: # 客户端与EurekaServer交互的地址，如果是集群，也需要写其它Server的地址
defaultZone: http://b.eureka.server:8762/eureka/
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">#Eureka server服务端⼝
server:
port: 8762
spring:
application:
name: cloud-eureka-server # 应⽤名称，会在Eureka中作为服务的id标识（serviceId）
eureka:
instance:
hostname: b.eureka.server
client:
register-with-eureka: true # 需要注册⾃⼰
fetch-registry: true #从Eureka Server获取服务信息,默认为true
service-url: # 客户端与EurekaServer交互的地址，如果是集群，也需要写其它Server的地址
defaultZone: http://a.eureka.server:8761/eureka/
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>启动工程，访问&lt;a href="http://127.0.0.1:8761/">Eureka8761&lt;/a>&lt;a href="http://127.0.0.1:8762/">Eureka8762&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="微服务提供者--注册到eureka-server集群">微服务提供者--&amp;gt;注册到Eureka Server集群&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>在service-resume-8080模块基础上引入eureka client依赖&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-netflix-eureka-client&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>配置application.yml，增添eureka相关配置&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">eureka:
client:
service-url:
#eureka server的路径
defaultZone: http://a.eureka.server:8761/eureka/,http://b.eureka.server:8762/eureka/
instance:
#使⽤ip注册，否则会使⽤主机名注册了（此处考虑到对⽼版本的兼容，新版本经过实验都是ip）
prefer-ip-address: true
#⾃定义实例显示格式，加上版本号，便于多版本管理，注意是ip-address，早期版本是ipAddress
instance-id: ${spring.cloud.client.ipaddress}:${spring.application.name}:${server.port}:@project.version@
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>复制service-resume-8080，创建新子模块service-resume-8081，修改pom文件和入口类名，启动应用&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="微服务消费者--注册到eureka-server集群">微服务消费者--&amp;gt;注册到Eureka Server集群&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>在service-autodeliver-8090模块基础上引入eureka client依赖&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-netflix-eureka-client&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>配置application.yml，增添eureka相关配置&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">eureka:
client:
service-url:
defaultZone: http://a.eureka.server:8761/eureka/,http://b.eureka.server:8762/eureka/
instance:
#使⽤ip注册，否则会使⽤主机名注册了（此处考虑到对⽼版本的兼容，新版本经过实验都是ip）
prefer-ip-address: true
#⾃定义实例显示格式，加上版本号，便于多版本管理，注意是ip-address，早期版本是ipAddress
instance-id: ${spring.cloud.client.ipaddress}:${spring.application.name}:${server.port}:@project.version@
spring:
application:
name: service-autodeliver
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>在启动类添加注解@EnableDiscoveryClient，开启服务发现&lt;/p>
&lt;/li>
&lt;li>
&lt;p>服务消费者调用服务提供者（通过Eureka）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Slf4j&lt;/span>
&lt;span class="nd">@RestController&lt;/span>
&lt;span class="nd">@RequestMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/autodeliver&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AutoDeliverController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">RestTemplate&lt;/span> &lt;span class="n">restTemplate&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">DiscoveryClient&lt;/span> &lt;span class="n">discoveryClient&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@GetMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/checkState/{userId}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="nf">findResumeOpenState&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@PathVariable&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">userId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//获取Eureka中注册的实例列表
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ServiceInstance&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">instances&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">discoveryClient&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstances&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;service-resume&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//获取实例, 此处不考虑负载，就拿第一个
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ServiceInstance&lt;/span> &lt;span class="n">serviceInstance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">instances&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//根据实例的信息拼接请求地址
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">host&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">serviceInstance&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getHost&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">serviceInstance&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getPort&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;http://&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">host&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;:&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">port&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;/resume/openstate/&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">userId&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//消费者直接调用提供者
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="n">forObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">restTemplate&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">getForObject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;调用简历微服务，获取用户： &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">userId&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; 默认简历当前状态为: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">forObject&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">forObject&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>请求消费者，在工程根目录创建文件eureka.http，内容为&lt;/p>
&lt;pre>&lt;code>GET http://localhost:8090/autodeliver/checkState/1545136
Accept: application/json
###
&lt;/code>&lt;/pre>&lt;p>点击请求，查看结果&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="eureka-细节详解">Eureka 细节详解&lt;/h3>
&lt;h4 id="eureka-元数据详解">Eureka 元数据详解&lt;/h4>
&lt;p>Eureka的元数据有两种：标准元数据和自定义元数据&lt;/p>
&lt;p>&lt;strong>标准元数据：&lt;/strong>&lt;/p>
&lt;p>&lt;strong>自定义元数据：&lt;/strong>&lt;/p>
&lt;p>在程序中使用DiscoveryClient获取指定微服务的所有元数据&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@SpringBootTest&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">classes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="n">AutoDeliverApplication8090&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">})&lt;/span>
&lt;span class="nd">@RunWith&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SpringJUnit4ClassRunner&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MetaDataTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">DiscoveryClient&lt;/span> &lt;span class="n">discoveryClient&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Test&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//获取服务实例
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ServiceInstance&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">instances&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">discoveryClient&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstances&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;service-resume&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//打印元数据信息
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ServiceInstance&lt;/span> &lt;span class="n">instance&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">instances&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">instance&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>debug查看获取到的实例对象，查看元数据&lt;/p>
&lt;h4 id="eureka-客户端">Eureka 客户端&lt;/h4>
&lt;p>服务提供者（也就是Eureka客户端）要向EurekaServer注册服务，并完成服务续约等工作&lt;/p>
&lt;h5 id="服务注册服务提供者">服务注册（服务提供者）&lt;/h5>
&lt;ol>
&lt;li>当我们导入了eureka-client依赖坐标，配置Eureka服务注册中心地址&lt;/li>
&lt;li>服务在启动时会向注册中心发起注册请求，携带服务元数据信息&lt;/li>
&lt;li>Eureka注册中心会把服务的信息保存在Map中&lt;/li>
&lt;/ol>
&lt;h5 id="服务续约服务消费者">服务续约（服务消费者）&lt;/h5>
&lt;p>服务每隔30秒会向注册中心续约（心跳）一次，如果没有续约，租约在90秒后到期，然后服务会被失效。每隔30秒的续约操作叫做心跳检测&lt;/p>
&lt;p>往往不需要我们调整这两个配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">#向Eureka服务中心集群注册服务
eureka:
instance:
#服务续约间隔时间，默认30秒
lease-renewal-interval-in-seconds: 30
#租约到期，服务失效时间，默认90秒，服务超过90秒没有发送心跳，EurekaServer会将服务从列表移除
lease-expiration-duration-in-seconds: 90
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="获取服务列表服务消费者">获取服务列表（服务消费者）&lt;/h5>
&lt;p>每隔30秒服务会从注册中心拉取一份服务列表，这个时间可以通过配置修改。往往不需要我们调整&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="err">#&lt;/span>&lt;span class="n">向Eureka服务中心集群注册服务&lt;/span>
&lt;span class="nl">eureka:&lt;/span>
&lt;span class="n">client&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">每隔多少秒拉取一次服务列表&lt;/span>
&lt;span class="n">registry&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">fetch&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">interval&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">seconds&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">30&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>服务消费者启动时，从EurekaServer服务列表获取只读备份数据，缓存到本地&lt;/li>
&lt;li>每隔30秒，会重新获取并更新数据&lt;/li>
&lt;li>每隔30秒的时间可以通过配置修改&lt;/li>
&lt;/ol>
&lt;h4 id="eureka服务端">Eureka服务端&lt;/h4>
&lt;h5 id="服务下线">服务下线&lt;/h5>
&lt;ol>
&lt;li>当服务正常关闭操作时，会发送服务下线的REST请求给EurekaServer&lt;/li>
&lt;li>服务中心接受到请求后，会将该服务置为下线状态&lt;/li>
&lt;/ol>
&lt;h5 id="失效剔除">失效剔除&lt;/h5>
&lt;p>Eureka Server会定时（间隔值是eureka.server.eviction-interval-timer-in-ms，默认60s）进⾏检查， 如果发现实例在在⼀定时间（此值由客户端设置的eureka.instance.lease-expiration-duration-inseconds定义，默认值为90s）内没有收到⼼跳，则会注销此实例&lt;/p>
&lt;h5 id="自我保护">自我保护&lt;/h5>
&lt;p>服务提供者 —&amp;gt; 注册中⼼
定期的续约（服务提供者和注册中⼼通信），假如服务提供者和注册中⼼之间的⽹络有点问题，不代表 服务提供者不可⽤，不代表服务消费者⽆法访问服务提供者&lt;/p>
&lt;p>如果在15分钟内超过85%的客户端节点都没有正常的⼼跳，那么Eureka就认为客户端与注册中⼼出现了 ⽹络故障，Eureka Server⾃动进⼊⾃我保护机制。&lt;/p>
&lt;p>官方对自我保护机制的定义是：&lt;/p>
&lt;pre>&lt;code>自我保护模式正是一种针对网络异常波动的安全保护措施，使用自我保护模式能使Eureka集群更加的健壮、稳定的运行。
&lt;/code>&lt;/pre>&lt;p>&lt;strong>为什么会有自我保护机制？&lt;/strong>&lt;/p>
&lt;p>默认情况下，如果Eureka Server在⼀定时间内（默认90秒）没有接收到某个微服务实例的⼼跳， Eureka Server将会移除该实例。但是当⽹络分区故障发⽣时，微服务与Eureka Server之间⽆法正常通 信，⽽微服务本身是正常运⾏的，此时不应该移除这个微服务，所以引⼊了⾃我保护机制。&lt;/p>
&lt;p>服务中⼼⻚⾯会显示如下提示信息:&lt;/p>
&lt;pre>&lt;code>EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.
&lt;/code>&lt;/pre>&lt;p>&lt;strong>当处于自我保护模式时&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>不会剔除任何服务实例（可能是服务提供者和EurekaServer之间的网络问题），保证了大多数服务依然可用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Eureka Server工程中通过Server⼯程中通过eureka.server.enable-self-preservation配置可⽤关停⾃我保护，默认 值是打开&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">eureka: server:
enable-self-preservation: false # 关闭⾃我保护模式（缺省为打开）
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>建议在生产环境打开自我保护机制&lt;/p>
&lt;/li>
&lt;/ol></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/springcloud/">springcloud</category><category domain="https://chuchin.cn/tags/java/">Java</category><category domain="https://chuchin.cn/tags/spring-cloud/">Spring Cloud</category><category domain="https://chuchin.cn/tags/eureka/">Eureka</category></item><item><title>案例分析引入</title><link>https://chuchin.cn/tech/distributed-micro-service/springcloud/case-analysis/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/springcloud/case-analysis/</guid><pubDate>Sat, 03 Oct 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h2 id="案例说明">案例说明&lt;/h2>
&lt;h2 id="案例数据库环境准备">案例数据库环境准备&lt;/h2>
&lt;p>数据库使用MySQL 5.7.X，数据库初始化：&lt;a href="https://chuchin.cn/file/springcloud/springcloud.sql">SQL文件&lt;/a>&lt;/p>
&lt;h2 id="案例工程环境准备">案例工程环境准备&lt;/h2>
&lt;p>父工程 spring-cloud-parent，新建maven工程，&lt;a href="https://chuchin.cn/file/springcloud/parent-pom.xml">pom文件&lt;/a>&lt;/p>
&lt;h2 id="案例核心微服务开发及通信调用">案例核心微服务开发及通信调用&lt;/h2>
&lt;h3 id="简历微服务">简历微服务&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>新建子模块 service-common&lt;/p>
&lt;p>&lt;a href="https://chuchin.cn/file/springcloud/service-common-pom.xml">pom.xml&lt;/a> &lt;a href="https://chuchin.cn/file/springcloud/Resume.java">Resume.java&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>新建子模块 service-resume-8080&lt;/p>
&lt;p>&lt;a href="https://chuchin.cn/file/springcloud/service-common-pom.xml">pom.xml&lt;/a> &lt;a href="https://chuchin.cn/file/springcloud/ResumeController.java">ResumeController.java&lt;/a> &lt;a href="https://chuchin.cn/file/springcloud/ResumeDao.java">ResumeDao.java&lt;/a> &lt;a href="https://chuchin.cn/file/springcloud/ResumeService.java">ResumeService.java&lt;/a> &lt;a href="https://chuchin.cn/file/springcloud/ResumeServiceImpl.java">ResumeServiceImpl.java&lt;/a> &lt;a href="https://chuchin.cn/file/springcloud/ResumeApplication8080.java">ResumeApplication8080.java&lt;/a> &lt;a href="https://chuchin.cn/file/springcloud/resume-application.yml">application.yml&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="自动投递微服务">自动投递微服务&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>新建子模块 service-autodeliver-8090&lt;/p>
&lt;p>无需引入其他依赖&lt;/p>
&lt;p>application.yml&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">server:
port: 8090
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>AutoDeliverApplication.java&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@SpringBootApplication&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AutoDeliverApplication&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SpringApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AutoDeliverApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">RestTemplate&lt;/span> &lt;span class="nf">getRestTemplate&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RestTemplate&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>AutoDeliverController.java&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Slf4j&lt;/span>
&lt;span class="nd">@RestController&lt;/span>
&lt;span class="nd">@RequestMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/autodeliver&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AutoDeliverController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">RestTemplate&lt;/span> &lt;span class="n">restTemplate&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@GetMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/checkState/{userId}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="nf">findResumeOpenState&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@PathVariable&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">userId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Integer&lt;/span> &lt;span class="n">forObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">restTemplate&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">getForObject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;http://localhost:8080/resume/openstate/&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">userId&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;调用简历微服务，获取用户： &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">userId&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; 默认简历当前状态为: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">forObject&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">forObject&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="案例代码问题分析">案例代码问题分析&lt;/h2>
&lt;p>我们在⾃动投递微服务中使⽤RestTemplate调⽤简历微服务的简历状态接⼝时（Restful API 接⼝）。 在微服务分布式集群环境下会存在什么问题呢？怎么解决？&lt;/p>
&lt;p>存在的问题：&lt;/p>
&lt;ul>
&lt;li>在服务消费者中，我们把url地址硬编码到代码中，不⽅便后期维护。&lt;/li>
&lt;li>服务提供者只有⼀个服务，即便服务提供者形成集群，服务消费者还需要⾃⼰实现负载均衡。&lt;/li>
&lt;li>在服务消费者中，不清楚服务提供者的状态。&lt;/li>
&lt;li>服务消费者调⽤服务提供者时候，如果出现故障能否及时发现不向⽤户抛出异常⻚⾯？&lt;/li>
&lt;li>RestTemplate这种请求调⽤⽅式是否还有优化空间？能不能类似于Dubbo那样玩？&lt;/li>
&lt;li>这么多的微服务统⼀认证如何实现？&lt;/li>
&lt;li>配置⽂件每次都修改好多个很麻烦！？&lt;/li>
&lt;li>....&lt;/li>
&lt;/ul>
&lt;p>上述分析出的问题，其实就是微服务架构中必然⾯临的⼀些问题：&lt;/p>
&lt;ul>
&lt;li>服务管理：⾃动注册与发现、状态监管&lt;/li>
&lt;li>服务负载均衡&lt;/li>
&lt;li>熔断&lt;/li>
&lt;li>远程过程调⽤&lt;/li>
&lt;li>⽹关拦截、路由转发&lt;/li>
&lt;li>统⼀认证&lt;/li>
&lt;li>集中式配置管理，配置信息实时⾃动更新&lt;/li>
&lt;/ul></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/springcloud/">springcloud</category><category domain="https://chuchin.cn/tags/java/">Java</category><category domain="https://chuchin.cn/tags/spring-cloud/">Spring Cloud</category></item><item><title>Spring Cloud 简述</title><link>https://chuchin.cn/tech/distributed-micro-service/springcloud/springcloud-introduction/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/springcloud/springcloud-introduction/</guid><pubDate>Fri, 02 Oct 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h2 id="spring-cloud-是什么">Spring Cloud 是什么&lt;/h2>
&lt;p>[百度百科]Spring Cloud是⼀系列框架的有序集合。它利⽤Spring Boot的开发便利性巧妙地简化了分布 式系统基础设施的开发，如服务发现注册、配置中⼼、消息总线、负载均衡、断路器、数据监控等，都 可以⽤ Spring Boot的开发⻛格做到⼀键启动和部署。Spring Cloud并没有重复制造轮⼦，它只是将⽬ 前各家公司开发的⽐较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot⻛格进⾏再封装 屏蔽掉了复杂的配置和实现原理，最终给开发者留出了⼀套简单易懂、易部署和易维护的分布式系统开发⼯具包。&lt;/p>
&lt;p>Spring Cloud是⼀系列框架的有序集合（Spring Cloud是⼀个规范）&lt;/p>
&lt;p>开发服务发现注册、配置中⼼、消息总线、负载均衡、断路器、数据监控等&lt;/p>
&lt;p>利⽤Spring Boot的开发便利性简化了微服务架构的开发（⾃动装配）&lt;/p>
&lt;p>这⾥，我们需要注意，Spring Cloud其实是⼀套规范，是⼀套⽤于构建微服务架构的规范，而不是⼀个 可以拿来即用的框架（所谓规范就是应该有哪些功能组件，然后组件之间怎么配合，共同完成什么事情）。在这个规范之下第三⽅的Netflix公司开发了⼀些组件、Spring官⽅开发了⼀些框架/组件，包括 第三⽅的阿⾥巴巴开发了⼀套框架/组件集合Spring Cloud Alibaba，这些才是Spring Cloud规范的实 现。
Netflix搞了⼀套 简称SCN Spring Cloud 吸收了Netflix公司的产品基础之上⾃⼰也搞了⼏个组件 阿⾥巴巴在之前的基础上搞出了⼀堆微服务组件,Spring Cloud Alibaba（SCA）&lt;/p>
&lt;h2 id="spring-cloud-解决什么问题">Spring Cloud 解决什么问题&lt;/h2>
&lt;p>Spring Cloud 规范及实现意图要解决的问题其实就是微服务架构实施过程中存在的⼀些问题，⽐如微服 务架构中的服务注册发现问题、⽹络问题（⽐如熔断场景）、统⼀认证安全授权问题、负载均衡问题、 链路追踪等问题。&lt;/p>
&lt;h2 id="spring-cloud-架构">Spring Cloud 架构&lt;/h2>
&lt;p>如前所述，Spring Cloud是⼀个微服务相关规范，这个规范意图为搭建微服务架构提供⼀站式服务，采⽤组件（框架）化机制定义⼀系列组件，各类组件针对性的处理微服务中的特定问题，这些组件共同来 构成Spring Cloud微服务技术栈。&lt;/p>
&lt;h2 id="spring-cloud-核心组件">Spring Cloud 核心组件&lt;/h2>
&lt;p>Spring Cloud ⽣态圈中的组件，按照发展可以分为第⼀代 Spring Cloud组件和第⼆代 Spring Cloud组件。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201221-160513-0552.png" alt="20201221-160513-0552.png">&lt;/p>
&lt;h2 id="spring-cloud-体系结构组件协同工作机制">Spring Cloud 体系结构（组件协同工作机制）&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201221-160714-0195.png" alt="20201221-160714-0195.png">&lt;/p>
&lt;p>Spring Cloud中的各组件协同⼯作，才能够⽀持⼀个完整的微服务架构。⽐如&lt;/p>
&lt;ul>
&lt;li>注册中⼼负责服务的注册与发现，很好将各服务连接起来&lt;/li>
&lt;li>API⽹关负责转发所有外来的请求&lt;/li>
&lt;li>断路器负责监控服务之间的调⽤情况，连续多次失败进行熔断保护。&lt;/li>
&lt;li>配置中心提供了统⼀的配置信息管理服务,可以实时的通知各个服务获取最新的配置信息&lt;/li>
&lt;/ul>
&lt;h2 id="spring-cloud-与-dubbo-对比">Spring Cloud 与 Dubbo 对比&lt;/h2>
&lt;p>Dubbo是阿⾥巴巴公司开源的⼀个⾼性能优秀的服务框架，基于RPC调⽤，对于⽬前使⽤率较⾼的 Spring Cloud Netflix来说，它是基于HTTP的，所以效率上没有Dubbo⾼，但问题在于Dubbo体系的组件不全，不能够提供⼀站式解决⽅案，⽐如服务注册与发现需要借助于Zookeeper等实现，⽽Spring Cloud Netflix则是真正的提供了⼀站式服务化解决⽅案，且有Spring⼤家族背景。&lt;/p>
&lt;p>前些年，Dubbo使⽤率⾼于SpringCloud，但⽬前Spring Cloud在服务化/微服务解决⽅案中已经有了非常好的发展趋势。&lt;/p>
&lt;h2 id="spring-cloud-与-spring-boot-的关系">Spring Cloud 与 Spring Boot 的关系&lt;/h2>
&lt;p>Spring Cloud 只是利⽤了Spring Boot 的特点，让我们能够快速的实现微服务组件开发，否则不使⽤ Spring Boot的话，我们在使⽤Spring Cloud时，每⼀个组件的相关Jar包都需要我们⾃⼰导⼊配置以及 需要开发⼈员考虑兼容性等各种情况。所以Spring Boot是我们快速把Spring Cloud微服务技术应⽤起 来的⼀种⽅式。&lt;/p></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/springcloud/">springcloud</category><category domain="https://chuchin.cn/tags/java/">Java</category><category domain="https://chuchin.cn/tags/spring-cloud/">Spring Cloud</category></item><item><title>微服务架构</title><link>https://chuchin.cn/tech/distributed-micro-service/springcloud/microservice-architecture/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/springcloud/microservice-architecture/</guid><pubDate>Thu, 01 Oct 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h2 id="互联网应用架构发展">互联网应用架构发展&lt;/h2>
&lt;p>随着互联⽹的发展，⽤户群体逐渐扩⼤，⽹站的流量成倍增⻓，常规的单体架构已⽆法满⾜请求压⼒和 业务的快速迭代，架构的变化势在必⾏。下⾯我们就以一个招聘网站的架构演进为例，从最开始的单体架构分 析，⼀步步的到现在的微服务架构。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>单体应用架构&lt;/p>
&lt;p>在诞⽣之初，网站的⽤户量、数据量规模都⽐较小，项目所有的功能模块都放在⼀个⼯程中编码、编译、打包并且部署在⼀个Tomcat容器中的架构模式就是单体应用架构，这样的架构既简单实 ⽤、便于维护，成本又低，成为了那个时代的主流架构方式。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201221-152441-0839.png" alt="20201221-152441-0839.png">&lt;/p>
&lt;p>优点：&lt;/p>
&lt;ul>
&lt;li>项⽬前期开发节奏快，团队成员少的时候能够快速迭代&lt;/li>
&lt;li>架构简单：MVC架构，只需要借助IDE开发、调试即可&lt;/li>
&lt;li>易于测试：只需要通过单元测试或者浏览器完成&lt;/li>
&lt;li>易于部署：打包成单⼀可执⾏的jar或者打成war包放到容器内启动&lt;/li>
&lt;/ul>
&lt;p>缺点：&lt;/p>
&lt;ul>
&lt;li>随着不断的功能迭代，单个项⽬过⼤，代码杂乱，耦合严重，开发团队逐渐壮⼤以后，沟通 成本 变⾼， 如：代码从编译到启动耗时达到 3-5 分钟&lt;/li>
&lt;li>新增业务困难：在已经乱如麻的系统中增加新业务，维护旧功能，⼀脚踩进去全是不可预测 的问题。新⼈来了以后很难接⼿任务，学习成本⾼，需要⼤概⼀周时间 才能上⼿开发&lt;/li>
&lt;li>核⼼业务与边缘业务混合在⼀块，出现问题互相影响，如：⼀个临时活动流量猛涨，机器负载升⾼就会影响正常的业务服务&lt;/li>
&lt;/ul>
&lt;p>业务量上涨之后，单体应⽤架构进⼀步丰富变化，比如应用集群部署、使⽤Nginx进⾏负载均衡、增加缓存服务器、增加⽂件服务器、数据库集群并做读写分离等，通过以上措施增强应对⾼并发的能⼒、应 对⼀定的复杂业务场景，但依然属于单体应⽤架构。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201221-151244-0035.png" alt="20201221-151244-0035.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>垂直应用架构&lt;/p>
&lt;p>为了避免上面提到的那些问题，开始做模块的垂直划分，做垂直划分的原则是基于网站现有的业务特性来做，核心目标第⼀个是为了业务之间互不影响，第⼆个是在研发团队的壮⼤后为了提⾼效率，减少之间的依赖。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201221-154245-0178.png" alt="20201221-154245-0178.png">&lt;/p>
&lt;p>优点：&lt;/p>
&lt;ul>
&lt;li>系统拆分实现了流量分担，解决了并发问题&lt;/li>
&lt;li>可以针对不同模块进⾏优化&lt;/li>
&lt;li>⽅便⽔平扩展，负载均衡，容错率提⾼&lt;/li>
&lt;li>系统间相互独⽴，互不影响，新的业务迭代时更加⾼效&lt;/li>
&lt;/ul>
&lt;p>缺点：&lt;/p>
&lt;ul>
&lt;li>服务之间相互调⽤，如果某个服务的端⼝或者ip地址发⽣改变，调⽤的系统得⼿动改变&lt;/li>
&lt;li>搭建集群之后，实现负载均衡⽐较复杂，如：内⽹负载，在迁移机器时会影响调⽤⽅的路 由，导致线上故障&lt;/li>
&lt;li>服务之间调用⽅式不统⼀，基于 httpclient 、 webservice ，接⼝协议不统⼀&lt;/li>
&lt;li>服务监控不到位：除了依靠端⼝、进程的监控，调⽤的成功率、失败率、总耗时等等这些监控指标是没有的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>SOA应用架构&lt;/p>
&lt;p>在做了垂直划分以后，模块随之增多，维护的成本在也变⾼，⼀些通⽤的业务和模块重复的越来越多， 为了解决上⾯提到的接⼝协议不统⼀、服务⽆法监控、服务的负载均衡，引⼊了阿⾥巴巴开源的 Dubbo ，⼀款⾼性能、轻量级的开源Java RPC框架，它提供了三⼤核心能力：⾯向接⼝的远程⽅法调 ⽤，智能容错和负载均衡，以及服务⾃动注册和发现。&lt;/p>
&lt;p>SOA (Service-Oriented Architecture)，即⾯向服务的架构。根据实际业务，把系统拆分成合适的、独 ⽴部署的模块，模块之间相互独⽴（通过Webservice/Dubbo等技术进⾏通信）。&lt;/p>
&lt;p>优点：分布式、松耦合、扩展灵活、可重⽤。&lt;/p>
&lt;p>缺点：服务抽取粒度较⼤、服务调⽤⽅和提供⽅耦合度较⾼（接⼝耦合度）&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201221-154249-0964.png" alt="20201221-154249-0964.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>微服务应用架构&lt;/p>
&lt;p>微服务架构可以说是SOA架构的⼀种拓展，这种架构模式下它拆分粒度更小、服务更独立。把应用拆分成为⼀个个微小的服务，不同的服务可以使⽤不同的开发语⾔和存储，服务之间往往通过Restful等轻量级通信。微服务架构关键在于微⼩、独⽴、轻量级通信。&lt;/p>
&lt;p>微服务是在 SOA 上做的升华粒度更加细致，微服务架构强调的⼀个重点是“业务需要彻底的组件化和服务化”&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201221-153954-0872.png" alt="20201221-153954-0872.png">&lt;/p>
&lt;p>微服务架构和SOA架构相似⼜不同&lt;/p>
&lt;p>微服务架构和SOA架构很明显的⼀个区别就是服务拆分粒度的不同，但是对于拉勾的架构发展来 说，我们所看到的SOA阶段其实服务拆分粒度相对来说已经⽐较细了（超前哦！），所以上述网站 SOA到微服务，从服务拆分上来说变化并不⼤，只是引⼊了相对完整的新⼀代Spring Cloud微 服务技术。⾃然，上述我们看到的都是拉勾架构演变的阶段结果，每⼀个阶段其实都经历了很多变 化，拉勾的服务拆分其实也是⾛过了从粗到细，并⾮绝对的⼀步到位。 举个拉勾案例来说明SOA和微服务拆分粒度不同 我们在SOA架构的初期，“简历投递模块”和“⼈才搜索模块”都有简历内容展示的需求，只不过说可能略有区别，⼀开始在两个模块中各维护了⼀套简历查询和展示的代码；后期我们将服务更细粒度 拆分，拆分出简历基础服务，那么不同模块调⽤这个基础服务即可。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="微服务架构体现的思想以及优点">微服务架构体现的思想以及优点&lt;/h2>
&lt;p>微服务架构设计的核⼼思想就是“微”，拆分的粒度相对⽐较⼩，这样的话单⼀职责、开发的耦合度就会 降低、微⼩的功能可以独⽴部署扩展、灵活性强，升级改造影响范围⼩。&lt;/p>
&lt;p>单体应⽤（1.7—&amp;gt;1.8） A(升级JDK) B C D E .....&lt;/p>
&lt;p>微服务架构的优点: 微服务架构和微服务&lt;/p>
&lt;ul>
&lt;li>微服务很小，便于特定业务功能的聚焦 A B C D&lt;/li>
&lt;li>微服务很小，每个微服务都可以被⼀个⼩团队单独实施（开发、测试、部署上线、运维），团队合作⼀定程度解耦，便于实施敏捷开发&lt;/li>
&lt;li>微服务很小，便于重⽤和模块之间的组装&lt;/li>
&lt;li>微服务很独⽴，那么不同的微服务可以使⽤不同的语⾔开发，松耦合&lt;/li>
&lt;li>微服务架构下，我们更容易引⼊新技术&lt;/li>
&lt;li>微服务架构下，我们可以更好的实现DevOps开发运维⼀体化；&lt;/li>
&lt;/ul>
&lt;p>微服务架构的缺点：&lt;/p>
&lt;ul>
&lt;li>微服务架构下，分布式复杂难以管理，当服务数量增加，管理将越加复杂；&lt;/li>
&lt;li>微服务架构下，分布式链路跟踪难等；&lt;/li>
&lt;/ul>
&lt;h2 id="微服务架构中的一些概念">微服务架构中的一些概念&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>服务注册与服务发现&lt;/p>
&lt;p>&lt;strong>服务注册：&lt;/strong> 服务提供者将所提供服务的信息（服务器IP和端⼝、服务访问协议等）注册/登记到注册中心&lt;/p>
&lt;p>&lt;strong>服务发现：&lt;/strong> 服务消费者能够从注册中心获取到较为实时的服务列表，然后根究⼀定的策略选择⼀个服务访问&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201221-153859-0009.png" alt="20201221-153859-0009.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>负载均衡&lt;/p>
&lt;p>负载均衡即将请求压力分配到多个服务器（应⽤服务器、数据库服务器等），以此来提⾼服务的性能、可靠性&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201221-165800-0848.png" alt="20201221-165800-0848.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>熔断&lt;/p>
&lt;p>熔断即断路保护。微服务架构中，如果下游服务因访问压⼒过⼤⽽响应变慢或失败，上游服务为了保护 系统整体可⽤性，可以暂时切断对下游服务的调⽤。这种牺牲局部，保全整体的措施就叫做熔断。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201221-164001-0257.png" alt="20201221-164001-0257.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>链路追踪&lt;/p>
&lt;p>微服务架构越发流⾏，⼀个项⽬往往拆分成很多个服务，那么⼀次请求就需要涉及到很多个服务。不同 的微服务可能是由不同的团队开发、可能使⽤不同的编程语⾔实现、整个项⽬也有可能部署在了很多服务器上（甚⾄百台、千台）横跨多个不同的数据中⼼。所谓链路追踪，就是对⼀次请求涉及的很多个服 务链路进⾏⽇志记录、性能监控&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201221-164602-0061.png" alt="20201221-164602-0061.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>API网关&lt;/p>
&lt;p>微服务架构下，不同的微服务往往会有不同的访问地址，客户端可能需要调⽤多个服务的接⼝才能完成 ⼀个业务需求，如果让客户端直接与各个微服务通信可能出现：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>客户端需要调⽤不同的url地址，增加了维护调⽤难度&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在⼀定的场景下，也存在跨域请求的问题（前后端分离就会碰到跨域问题，原本我们在后端采⽤ Cors就能解决，现在利⽤⽹关，那么就放在⽹关这层做好了）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每个微服务都需要进⾏单独的身份认证&lt;/p>
&lt;p>那么，API⽹关就可以较好的统⼀处理上述问题，API请求调⽤统⼀接⼊API⽹关层，由⽹关转发请求。 API⽹关更专注在安全、路由、流量等问题的处理上（微服务团队专注于处理业务逻辑即可），它的功能⽐如&lt;/p>
&lt;ol>
&lt;li>统⼀接⼊（路由）&lt;/li>
&lt;li>安全防护（统⼀鉴权，负责⽹关访问身份认证验证，与“访问认证中⼼”通信，实际认证业务逻辑交移 “访问认证中⼼”处理）&lt;/li>
&lt;li>⿊⽩名单（实现通过IP地址控制禁⽌访问⽹关功能，控制访问）&lt;/li>
&lt;li>协议适配（实现通信协议校验、适配转换的功能）&lt;/li>
&lt;li>流量管控（限流）&lt;/li>
&lt;li>⻓短链接⽀持&lt;/li>
&lt;li>容错能⼒（负载均衡）&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201221-161505-0272.png" alt="20201221-161505-0272.png">&lt;/p>
&lt;/li>
&lt;/ul></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/springcloud/">springcloud</category><category domain="https://chuchin.cn/tags/java/">Java</category><category domain="https://chuchin.cn/tags/spring-cloud/">Spring Cloud</category></item><item><title>MySQL 工具 canal</title><link>https://chuchin.cn/tech/storage/mysql/mysql-tools-canal/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-tools-canal/</guid><pubDate>Sun, 20 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category></item><item><title>MySQL 工具 Datax</title><link>https://chuchin.cn/tech/storage/mysql/mysql-tools-datax/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-tools-datax/</guid><pubDate>Sun, 20 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category></item><item><title>MySQL 工具 ELK</title><link>https://chuchin.cn/tech/storage/mysql/mysql-tools-elk/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-tools-elk/</guid><pubDate>Sun, 20 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category></item><item><title>MySQL 工具 MySQLMTOP</title><link>https://chuchin.cn/tech/storage/mysql/mysql-tools-mysqlmtop/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-tools-mysqlmtop/</guid><pubDate>Sun, 20 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category></item><item><title>MySQL 工具 percona-toolkit</title><link>https://chuchin.cn/tech/storage/mysql/mysql-tools-percona-toolkit/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-tools-percona-toolkit/</guid><pubDate>Sun, 20 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category></item><item><title>MySQL 工具 Prometheus</title><link>https://chuchin.cn/tech/storage/mysql/mysql-tools-prometheus/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-tools-prometheus/</guid><pubDate>Sun, 20 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category></item><item><title>MySQL 工具 Yearning</title><link>https://chuchin.cn/tech/storage/mysql/mysql-tools-yearning/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-tools-yearning/</guid><pubDate>Sun, 20 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category></item><item><title>ExampleArticle</title><link>https://chuchin.cn/tech/mq/kafka/example/</link><guid isPermaLink="true">https://chuchin.cn/tech/mq/kafka/example/</guid><pubDate>Sat, 19 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/mq/">mq</category><category domain="https://chuchin.cn/tech/mq/kafka/">kafka</category></item><item><title>MySQL Mycat实战</title><link>https://chuchin.cn/tech/storage/mysql/mysql-segmentation-mycat/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-segmentation-mycat/</guid><pubDate>Sat, 19 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h2 id="mycat-简介">Mycat 简介&lt;/h2>
&lt;p>Mycat 是一个实现了 MySQL 协议的 Server，前端用户可以把它看作是一个数据库代理，用 MySQL 客户端工具和命令行访问，而其后端可以用 MySQL 原生协议或JDBC 协议与多个 MySQL 服务器通信， 其核心功能是分库分表和读写分离，即将一个大表水平分割为 N 个小表，存储在后端 MySQL 服务器里或者其他数据库里。&lt;/p>
&lt;ul>
&lt;li>对于 DBA 来说，可以这么理解 Mycat Mycat 就是 MySQL Server，但是Mycat 本身并不存储数据，数据是在后端的 MySQL 上存储的， 因此数据可靠性以及事务等都是 MySQL 保证的。简单的说，Mycat 就是 MySQL 最佳伴侣。&lt;/li>
&lt;li>对于软件工程师来说，可以这么理解 Mycat Mycat 就是一个近似等于 MySQL 的数据库服务器，你可以用连接 MySQL 的方式去连接 Mycat（除了端 口不同，默认的 Mycat 端口是 8066 而非 MySQL 的 3306，因此需要在连接字符 串上增加端口信息），大多数 情况下，可以用你熟悉的对象映射框架使用 Mycat，但建议对于分 片表，尽量使用基础的 SQL 语句，因为这样能 达到最佳性能，特别是几千万甚至几百亿条记录的 情况下。&lt;/li>
&lt;li>对于架构师来说，可以这么理解 Mycat Mycat 是一个强大的数据库中间件，不仅仅可以用作读写分离、以及分表分库、容灾备份，而且 可以用于多 用户应用开发、云平台基础设施、让你的架构具备很强的适应性和灵活性，借助于即 将发布的 Mycat 智能优化模块，系统的数据访问瓶颈和热点一目了然，根据这些统计分析数据， 你可以自动或手工调整后端存储，将不同的 表映射到不同存储引擎上，而整个应用的代码一行也 不用改变。&lt;/li>
&lt;/ul>
&lt;h2 id="mycat-核心概念">Mycat 核心概念&lt;/h2>
&lt;h3 id="逻辑库">逻辑库&lt;/h3>
&lt;p>对数据进行分片处理之后，从原有的一个库，被切分为多个分片数据库，所有的分片数据库集群构成了整个完整的数据库存储。Mycat在操作时，使用逻辑库来代表这个完整的数据库集群，便于对整个集群操作。&lt;/p>
&lt;h3 id="逻辑表">逻辑表&lt;/h3>
&lt;p>既然有逻辑库，那么就会有逻辑表，分布式数据库中，对应用来说，读写数据的表就是逻辑表。&lt;/p>
&lt;h3 id="分片表">分片表&lt;/h3>
&lt;p>分片表，是指那些原有的很大数据的表，需要切分到多个数据库的表，这样，每个分片都有一部分数 据，所 有分片构成了完整的数据。例如在 mycat 配置中的 t_node 就属于分片表，数据按照规则被分 到 dn1,dn2 两个分片节点上。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;table&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;t_node&amp;#34;&lt;/span> &lt;span class="na">primaryKey=&lt;/span>&lt;span class="s">&amp;#34;vid&amp;#34;&lt;/span> &lt;span class="na">autoIncrement=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span> &lt;span class="na">dataNode=&lt;/span>&lt;span class="s">&amp;#34;dn1,dn2&amp;#34;&lt;/span> &lt;span class="na">rule=&lt;/span>&lt;span class="s">&amp;#34;rule1&amp;#34;&lt;/span> &lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="非分片表">非分片表&lt;/h3>
&lt;p>一个数据库中并不是所有的表都很大，某些表是可以不用进行切分的，非分片是相对分片表来说的，就 是那些不需要进行数据切分的表。如下配置中 t_node，只存在于分片节点dn1上。&lt;/p>
&lt;pre>&lt;code>&amp;lt;table name=&amp;quot;t_node&amp;quot; primaryKey=&amp;quot;vid&amp;quot; autoIncrement=&amp;quot;true&amp;quot; dataNode=&amp;quot;dn1&amp;quot; /&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="er表">ER表&lt;/h3>
&lt;p>Mycat提出了基于 E-R 关系的数据分片策略，子表的记录与所关联的父表记录存放在同一个数据分片 上，即子表依赖于父表，通过表分组(Table Group)保证数据 join 不会跨库操作。表分组(Table Group) 是解决跨分片数据 join 的一种很好的思路，也是数据切分规划的重要一条规则。&lt;/p>
&lt;h3 id="全局表">全局表&lt;/h3>
&lt;p>一个真实的业务系统中，往往存在大量的类似字典表的表，这些表基本上很少变动，字典表具有以下几个特性:&lt;/p>
&lt;ul>
&lt;li>变动不频繁;&lt;/li>
&lt;li>数据量总体变化不大&lt;/li>
&lt;li>数据规模不大，很少有超过数十万条记录。&lt;/li>
&lt;/ul>
&lt;p>对于这类的表，在分片的情况下，当业务表因为规模而进行分片以后，业务表与这些附属的字典表之间的关联，就成了比较棘手的问题，所以 Mycat 中通过数据冗余来解决这类表的 join，即所有的分片都有一份数据的拷贝，所有将字典表或者符合字典表特性的一些表定义为全局表。数据冗余是解决跨分片数 据 join 的一种很好的思路，也是数据切分规划的另外一条重要规则。&lt;/p>
&lt;h3 id="分片节点">分片节点&lt;/h3>
&lt;p>数据切分后，一个大表被分到不同的分片数据库上面，每个表分片所在的数据库就是分片节点 dataNode。&lt;/p>
&lt;h3 id="节点主机">节点主机&lt;/h3>
&lt;p>数据切分后，每个分片节点不一定都会独占一台机器，同一机器上面可以有多个分片数据库， 这样一个 或多个分片节点所在的机器就是节点主机，为了规避单节点主机并发数限制， 尽量将读写压力高的分片 节点均衡的放在不同的节点主机dataHost。&lt;/p>
&lt;h3 id="分片规则">分片规则&lt;/h3>
&lt;p>前面讲了数据切分，一个大表被分成若干个分片表，就需要一定的规则rule，这样按照某种业务规则把数据分到 某个分片的规则就是分片规则，数据切分选择合适的分片规则非常重要，将极大的避免后续数据处理的难度。&lt;/p>
&lt;h2 id="serverxml配置">server.xml配置&lt;/h2>
&lt;p>server.xml几乎保存了所有 mycat 需要的系统配置信息。&lt;/p>
&lt;h3 id="user标签">user标签&lt;/h3>
&lt;p>这个标签主要用于定义登录 mycat 的用户和权限。例如下面的例子中，我们定义了一个用户，用户名 为 user、密码也为 user，可访问的 schema为lg_edu_order。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;user&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;user&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>user&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;schemas&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>lg_edu_order&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;readOnly&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>true&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;defaultSchema&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>lg_edu_order&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/user&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="firewall标签">firewall标签&lt;/h3>
&lt;pre>&lt;code>&amp;lt;firewall&amp;gt;
&amp;lt;!-- ip白名单 用户对应的可以访问的 ip 地址 --&amp;gt;
&amp;lt;whitehost&amp;gt;
&amp;lt;host host=&amp;quot;127.0.0.*&amp;quot; user=&amp;quot;root&amp;quot;/&amp;gt;
&amp;lt;host host=&amp;quot;127.0.*&amp;quot; user=&amp;quot;root&amp;quot;/&amp;gt;
&amp;lt;host host=&amp;quot;127.*&amp;quot; user=&amp;quot;root&amp;quot;/&amp;gt;
&amp;lt;host host=&amp;quot;1*7.*&amp;quot; user=&amp;quot;root&amp;quot;/&amp;gt;
&amp;lt;/whitehost&amp;gt;
&amp;lt;!-- 黑名单允许的 权限 后面为默认 --&amp;gt;
&amp;lt;blacklist check=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;property name=&amp;quot;selelctAllow&amp;quot;&amp;gt;false&amp;lt;/property&amp;gt;
&amp;lt;property name=&amp;quot;selelctIntoAllow&amp;quot;&amp;gt;false&amp;lt;/property&amp;gt;
&amp;lt;property name=&amp;quot;updateAllow&amp;quot;&amp;gt;false&amp;lt;/property&amp;gt;
&amp;lt;property name=&amp;quot;insertAllow&amp;quot;&amp;gt;false&amp;lt;/property&amp;gt;
&amp;lt;property name=&amp;quot;deletetAllow&amp;quot;&amp;gt;false&amp;lt;/property&amp;gt;
&amp;lt;property name=&amp;quot;dropAllow&amp;quot;&amp;gt;false&amp;lt;/property&amp;gt;
&amp;lt;/blacklist&amp;gt; &amp;lt;/firewall&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="全局序列号">全局序列号&lt;/h3>
&lt;p>在实现分库分表的情况下，数据库自增主键已无法保证自增主键的全局唯一。为此，Mycat 提供了全局 sequence，并且提供了包含本地配置和数据库配置等多种实现方式。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;system&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;sequnceHandlerType&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>0&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/system&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>0表示使用本地文件方式；1表示使用数据库方式生成；2表示使用本地时间戳方式；3表示基于ZK与本 地配置的分布式ID生成器；4表示使用zookeeper递增方式生成&lt;/p>
&lt;h4 id="本地文件">本地文件&lt;/h4>
&lt;p>此方式 Mycat 将 sequence 配置到文件中，当使用到 sequence 中的配置后，Mycat 会更下 classpath 中的 sequence_conf.properties 文件中 sequence 当前的值。&lt;/p>
&lt;pre>&lt;code>#default global sequence
GLOBAL.HISIDS=
GLOBAL.MINID=10001
GLOBAL.MAXID=20000
GLOBAL.CURID=10000
# self define sequence
COMPANY.HISIDS=
COMPANY.MINID=1001
COMPANY.MAXID=2000
COMPANY.CURID=1000
ORDER.HISIDS=
ORDER.MINID=1001
ORDER.MAXID=2000
ORDER.CURID=1000
&lt;/code>&lt;/pre>&lt;h4 id="数据库方式">数据库方式&lt;/h4>
&lt;p>在数据库中建立一张表，存放 sequence 名称（name），sequence 当前值（current_value），步长 （increment） 等信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MYCAT_SEQUENCE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">current_value&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">BIGINT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">increment&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nb">INT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ENGINE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">InnoDB&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="本地时间戳方式">本地时间戳方式&lt;/h4>
&lt;p>D为64 位二进制 ，42（毫秒）+5（机器 ID）+5（业务编码）+12（重复累加）&lt;/p>
&lt;p>换算成十进制为 18 位数的 long 类型，每毫秒可以并发 12 位二进制的累加。&lt;/p>
&lt;p>在 Mycat 下配置sequence_time_conf.properties文件&lt;/p>
&lt;pre>&lt;code>WORKID=0-31 任意整数
DATAACENTERID=0-31 任意整数
&lt;/code>&lt;/pre>&lt;p>每个Mycat 配置的 WORKID、DATAACENTERID 不同，组成唯一标识，总共支持32*32=1024 种组合。&lt;/p>
&lt;h4 id="分布式-zk-id-生成器">分布式 ZK ID 生成器&lt;/h4>
&lt;p>Zk 的连接信息统一在 myid.properties 的 zkURL 属性中配置。基于 ZK 与本地配置的分布式 ID 生成 器，InstanceID可以通过ZK自动获取，也可以通过配置文件配置。在 sequence_distributed_conf.properties，只要配置INSTANCEID=ZK就表示从 ZK 上获取 InstanceID。&lt;/p>
&lt;p>ID 最大为63位二进制，可以承受单机房单机器单线程 1000*(2^6)=640000 的并发。结构如下&lt;/p>
&lt;ul>
&lt;li>current time millis（微秒时间戳 38 位，可以使用 17 年）&lt;/li>
&lt;li>clusterId（机房或者 ZKid，通过配置文件配置，5 位）&lt;/li>
&lt;li>instanceId（实例 ID，可以通过 ZK 或者配置文件获取，5 位）&lt;/li>
&lt;li>threadId（线程 ID，9 位）&lt;/li>
&lt;li>increment（自增，6 位）&lt;/li>
&lt;/ul>
&lt;h4 id="zk-递增方式">ZK 递增方式&lt;/h4>
&lt;p>Zk 的连接信息统一在 myid.properties 的 zkURL 属性中配置。需要配置sequence_conf.properties文件&lt;/p>
&lt;ul>
&lt;li>TABLE.MINID 某线程当前区间内最小值&lt;/li>
&lt;li>TABLE.MAXID 某线程当前区间内最大值&lt;/li>
&lt;li>TABLE.CURID 某线程当前区间内当前值&lt;/li>
&lt;/ul>
&lt;h2 id="schemaxml配置">schema.xml配置&lt;/h2>
&lt;p>schema.xml 作为 Mycat 中重要的配置文件之一，管理着 Mycat 的逻辑库、表、分片节点、主机等信息。&lt;/p>
&lt;h3 id="schema标签">schema标签&lt;/h3>
&lt;p>schema 标签用于定义 Mycat 实例中的逻辑库，Mycat 可以有多个逻辑库，每个逻辑库都有自己的相关配置。可以使用 schema 标签来划分这些不同的逻辑库。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="c">&amp;lt;!-- 逻辑库 --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;schema&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;lg_edu_order&amp;#34;&lt;/span> &lt;span class="na">checkSQLschema=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span> &lt;span class="na">sqlMaxLimit=&lt;/span>&lt;span class="s">&amp;#34;100&amp;#34;&lt;/span> &lt;span class="na">dataNode=&lt;/span>&lt;span class="s">&amp;#34;dn1&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&amp;lt;/schema&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-153749-0740.png" alt="20201224-153749-0740.png">&lt;/p>
&lt;h3 id="table标签">table标签&lt;/h3>
&lt;p>table标签定义了 Mycat 中的逻辑表，所有需要拆分的表都需要在这个标签中定义&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;table&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;b_order&amp;#34;&lt;/span> &lt;span class="na">dataNode=&lt;/span>&lt;span class="s">&amp;#34;dn1,dn2&amp;#34;&lt;/span> &lt;span class="na">rule=&lt;/span>&lt;span class="s">&amp;#34;b_order_rule&amp;#34;&lt;/span> &lt;span class="na">primaryKey=&lt;/span>&lt;span class="s">&amp;#34;ID&amp;#34;&lt;/span> &lt;span class="na">autoIncrement=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-152750-0073.png" alt="20201224-152750-0073.png">&lt;/p>
&lt;h3 id="datanode标签">dataNode标签&lt;/h3>
&lt;p>dataNode标签定义了 MyCat 中的分片节点，也就是我们通常说所的数据分片。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="c">&amp;lt;!-- 数据节点 --&amp;gt;&lt;/span> &lt;span class="nt">&amp;lt;dataNode&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;dn1&amp;#34;&lt;/span> &lt;span class="na">dataHost=&lt;/span>&lt;span class="s">&amp;#34;lg_edu_order_1&amp;#34;&lt;/span> &lt;span class="na">database=&lt;/span>&lt;span class="s">&amp;#34;order_1&amp;#34;&lt;/span> &lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>name： 定义数据节点的名字，这个名字需要是唯一的，我们需要在 table 标签上应用这个名字，来建 立表与分片对应的关系。
dataHost : 用于定义该分片属于哪个分片主机，属性值是引用 dataHost 标签上定义的 name 属性。 database： 用于定义该分片节点属于哪个具体的库。&lt;/p>
&lt;h3 id="datahost标签">dataHost标签&lt;/h3>
&lt;p>dataHost标签在 Mycat 逻辑库中也是作为最底层的标签存在，直接定义了具体的数据库实例、读写分离配置和心跳语句&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dataHost&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;lg_edu_order_1&amp;#34;&lt;/span> &lt;span class="na">maxCon=&lt;/span>&lt;span class="s">&amp;#34;100&amp;#34;&lt;/span> &lt;span class="na">minCon=&lt;/span>&lt;span class="s">&amp;#34;10&amp;#34;&lt;/span> &lt;span class="na">balance=&lt;/span>&lt;span class="s">&amp;#34;0&amp;#34;&lt;/span> &lt;span class="na">writeType=&lt;/span>&lt;span class="s">&amp;#34;0&amp;#34;&lt;/span> &lt;span class="na">dbType=&lt;/span>&lt;span class="s">&amp;#34;mysql&amp;#34;&lt;/span> &lt;span class="na">dbDriver=&lt;/span>&lt;span class="s">&amp;#34;native&amp;#34;&lt;/span> &lt;span class="na">switchType=&lt;/span>&lt;span class="s">&amp;#34;1&amp;#34;&lt;/span> &lt;span class="na">slaveThreshold=&lt;/span>&lt;span class="s">&amp;#34;100&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dataHost&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-151653-0282.png" alt="20201224-151653-0282.png">&lt;/p>
&lt;h3 id="heartbeat标签">heartbeat标签&lt;/h3>
&lt;p>heartbeat标签内指明用于和后端数据库进行心跳检查的语句。例如：MySQL 可以使用 select user()、 Oracle 可以 使用 select 1 from dual 等&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dataHost&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;heartbeat&amp;gt;&lt;/span>select user()&lt;span class="nt">&amp;lt;/heartbeat&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dataHost&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="writehost和readhost标签">writeHost和readHost标签&lt;/h3>
&lt;p>writeHost和readHost标签都指定后端数据库的相关配置给 mycat，用于实例化后端连接池。唯一不同 的是，writeHost 指定写实例、readHost 指定读实例。在一个 dataHost 内可以定义多个 writeHost 和 readHost。但是，如果 writeHost 指定的后端数据库宕机， 那么这个 writeHost 绑定的所有 readHost 都将不可用。另一方面，由于这个 writeHost 宕机系统会自动的检测 到，并切换到备用的 writeHost 上去。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dataHost&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;lg_edu_order_2&amp;#34;&lt;/span> &lt;span class="na">maxCon=&lt;/span>&lt;span class="s">&amp;#34;100&amp;#34;&lt;/span> &lt;span class="na">minCon=&lt;/span>&lt;span class="s">&amp;#34;10&amp;#34;&lt;/span> &lt;span class="na">balance=&lt;/span>&lt;span class="s">&amp;#34;0&amp;#34;&lt;/span> &lt;span class="na">writeType=&lt;/span>&lt;span class="s">&amp;#34;0&amp;#34;&lt;/span> &lt;span class="na">dbType=&lt;/span>&lt;span class="s">&amp;#34;mysql&amp;#34;&lt;/span> &lt;span class="na">dbDriver=&lt;/span>&lt;span class="s">&amp;#34;native&amp;#34;&lt;/span> &lt;span class="na">switchType=&lt;/span>&lt;span class="s">&amp;#34;1&amp;#34;&lt;/span> &lt;span class="na">slaveThreshold=&lt;/span>&lt;span class="s">&amp;#34;100&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;heartbeat&amp;gt;&lt;/span>select user()&lt;span class="nt">&amp;lt;/heartbeat&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;writeHost&lt;/span> &lt;span class="na">host=&lt;/span>&lt;span class="s">&amp;#34;M1&amp;#34;&lt;/span> &lt;span class="na">url=&lt;/span>&lt;span class="s">&amp;#34;192.168.95.133:3306&amp;#34;&lt;/span> &lt;span class="na">user=&lt;/span>&lt;span class="s">&amp;#34;root&amp;#34;&lt;/span> &lt;span class="na">password=&lt;/span>&lt;span class="s">&amp;#34;1234&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span> &lt;span class="nt">&amp;lt;/writeHost&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dataHost&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-151755-0685.png" alt="20201224-151755-0685.png">&lt;/p>
&lt;h2 id="rulexml配置">rule.xml配置&lt;/h2>
&lt;p>rule.xml用于定义Mycat的分片规则。&lt;/p>
&lt;h4 id="tablerule标签">tableRule标签&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;tableRule&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;c_order_rule&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;rule&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;columns&amp;gt;&lt;/span>user_id&lt;span class="nt">&amp;lt;/columns&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;algorithm&amp;gt;&lt;/span>partitionByOrderFunc&lt;span class="nt">&amp;lt;/algorithm&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/rule&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/tableRule&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>name：指定唯一的名字，用于标识不同的表规则。&lt;/p>
&lt;p>columns：指定要拆分的列名字。&lt;/p>
&lt;p>algorithm：使用 function 标签中的 name 属性，连接表规则和具体路由算法。&lt;/p>
&lt;h4 id="function标签">function标签&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;function&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;partitionByOrderFunc&amp;#34;&lt;/span>
&lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;io.mycat.route.function.PartitionByMod&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;count&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>2&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/function&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>name：指定算法的名字。&lt;/p>
&lt;p>class：制定路由算法具体的类名字。&lt;/p>
&lt;p>property： 为具体算法需要用到的一些属性。&lt;/p>
&lt;h2 id="mycat实战">Mycat实战&lt;/h2>
&lt;h3 id="mycat安装">Mycat安装&lt;/h3>
&lt;p>需要先安装jdk&lt;/p>
&lt;ol>
&lt;li>
&lt;p>下载Mycat-server工具包&lt;/p>
&lt;p>&lt;a href="http://dl.mycat.org.cn/1.6.7.5/2020-4-10/Mycat-server-1.6.7.5-release-20200410174409-linux.tar.gz">http://dl.mycat.org.cn/1.6.7.5/2020-4-10/Mycat-server-1.6.7.5-release-20200410174409-linux.tar.gz&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>解压Mycat工具包&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">tar -zxvf Mycat-server-1.6.7.5-release-20200410174409-linux.tar.gz
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>进入mycat/bin，启动Mycat&lt;/p>
&lt;pre>&lt;code>启动命令：./mycat start
停止命令：./mycat stop
重启命令：./mycat restart
查看状态：./mycat status
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>访问Mycat&lt;/p>
&lt;pre>&lt;code>mysql -uroot -proot -h127.0.0.1 -P8066
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h3 id="分库分表">分库分表&lt;/h3>
&lt;p>在rule.xml配置Mycat分库分表。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml"> &lt;span class="nt">&amp;lt;mycat:rule&lt;/span> &lt;span class="na">xmlns:mycat=&lt;/span>&lt;span class="s">&amp;#34;http://io.mycat/&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;tableRule&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;b_order_rule&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;rule&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;columns&amp;gt;&lt;/span>company_id&lt;span class="nt">&amp;lt;/columns&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;algorithm&amp;gt;&lt;/span>partitionByOrderFunc&lt;span class="nt">&amp;lt;/algorithm&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/rule&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/tableRule&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- 路由函数定义 --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;function&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;partitionByOrderFunc&amp;#34;&lt;/span>
&lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;io.mycat.route.function.PartitionByMod&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;count&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>2&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/function&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/mycat:rule&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Mycat常用分片规则如下：&lt;/p>
&lt;ul>
&lt;li>时间类：按天分片、自然月分片、单月小时分片&lt;/li>
&lt;li>哈希类：Hash固定分片、日期范围Hash分片、截取数字Hash求模范围分片、截取数字Hash分片、一致性Hash分片&lt;/li>
&lt;li>取模类：取模分片、取模范围分片、范围求模分片&lt;/li>
&lt;li>其他类：枚举分片、范围约定分片、应用指定分片、冷热数据分片&lt;/li>
&lt;/ul>
&lt;p>Mycat常用分片配置示例：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>自动分片&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml"> &lt;span class="nt">&amp;lt;tableRule&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;auto-sharding-long&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;rule&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;columns&amp;gt;&lt;/span>id&lt;span class="nt">&amp;lt;/columns&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;algorithm&amp;gt;&lt;/span>rang-long&lt;span class="nt">&amp;lt;/algorithm&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/rule&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/tableRule&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;function&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;rang-long&amp;#34;&lt;/span> &lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;io.mycat.route.function.AutoPartitionByLong&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;mapFile&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>autopartition-long.txt&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/function&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>autopartition-long.txt文件内容如下：&lt;/p>
&lt;pre>&lt;code># range start-end ,data node index # K=1000,M=10000. 0-500M=0 500M-1000M=1 1000M-1500M=2
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>枚举分片&lt;/p>
&lt;p>把数据分类存储。&lt;/p>
&lt;pre>&lt;code> &amp;lt;tableRule name=&amp;quot;sharding-by-intfile&amp;quot;&amp;gt;
&amp;lt;rule&amp;gt;
&amp;lt;columns&amp;gt;sharding_id&amp;lt;/columns&amp;gt;
&amp;lt;algorithm&amp;gt;hash-int&amp;lt;/algorithm&amp;gt;
&amp;lt;/rule&amp;gt;
&amp;lt;/tableRule&amp;gt;
&amp;lt;function name=&amp;quot;hash-int&amp;quot; class=&amp;quot;io.mycat.route.function.PartitionByFileMap&amp;quot;&amp;gt;
&amp;lt;property name=&amp;quot;mapFile&amp;quot;&amp;gt;partition-hash-int.txt
&amp;lt;/property&amp;gt; &amp;lt;!-- 找不到分片时设置容错规则，把数据插入到默认分片0里面 --&amp;gt;
&amp;lt;property name=&amp;quot;defaultNode&amp;quot;&amp;gt;0&amp;lt;/property&amp;gt;
&amp;lt;/function&amp;gt;
&lt;/code>&lt;/pre>&lt;p>partition-hash-int.txt文件内容如下：&lt;/p>
&lt;pre>&lt;code>10000=0
10010=1
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>取模分片&lt;/p>
&lt;p>根据分片字段值 % 分片数 。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml"> &lt;span class="nt">&amp;lt;tableRule&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;mod-long&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;rule&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;columns&amp;gt;&lt;/span>id&lt;span class="nt">&amp;lt;/columns&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;algorithm&amp;gt;&lt;/span>mod-long&lt;span class="nt">&amp;lt;/algorithm&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/rule&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/tableRule&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;function&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;mod-long&amp;#34;&lt;/span> &lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;io.mycat.route.function.PartitionByMod&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span> &lt;span class="c">&amp;lt;!--分片数 --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;count&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>3&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/function&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>冷热数据分片&lt;/p>
&lt;p>根据日期查询日志数据冷热数据分布 ，最近 n 个月的到实时交易库查询，超过 n 个月的按照 m 天分片。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml"> &lt;span class="nt">&amp;lt;tableRule&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;sharding-by-date&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;rule&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;columns&amp;gt;&lt;/span>create_time&lt;span class="nt">&amp;lt;/columns&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;algorithm&amp;gt;&lt;/span>sharding-by-hotdate&lt;span class="nt">&amp;lt;/algorithm&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/rule&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/tableRule&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;function&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;sharding-by-hotdate&amp;#34;&lt;/span>
&lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;org.opencloudb.route.function.PartitionByHotDate&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span> &lt;span class="c">&amp;lt;!-- 定义日期格式 --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;dateFormat&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>yyyy-MM-dd&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span> &lt;span class="c">&amp;lt;!-- 热库存储多少天数据 --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;sLastDay&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>30&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span> &lt;span class="c">&amp;lt;!-- 超过热库期限的数据按照多少天来分片 --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;sPartionDay&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>30&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/function&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>一致性哈希分片&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml"> &lt;span class="nt">&amp;lt;tableRule&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;sharding-by-murmur&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;rule&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;columns&amp;gt;&lt;/span>id&lt;span class="nt">&amp;lt;/columns&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;algorithm&amp;gt;&lt;/span>murmur&lt;span class="nt">&amp;lt;/algorithm&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/rule&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/tableRule&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;function&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;murmur&amp;#34;&lt;/span> &lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;io.mycat.route.function.PartitionByMurmurHash&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;seed&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>0&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span>&lt;span class="c">&amp;lt;!-- 默认是0 --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;count&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>2&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span>&lt;span class="c">&amp;lt;!-- 要分片的数据库节点数量，必须指定，否
&lt;/span>&lt;span class="c">则没法分片 --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;virtualBucketTimes&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>160&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span>&lt;span class="c">&amp;lt;!-- 一个实际的数据库节点
&lt;/span>&lt;span class="c">被映射为这么多虚拟节点，默认是160倍，也就是虚拟节点数是物理节点数的160倍 --&amp;gt;&lt;/span> &lt;span class="c">&amp;lt;!-- &amp;lt;property name=&amp;#34;weightMapFile&amp;#34;&amp;gt;weightMapFile&amp;lt;/property&amp;gt; 节点的权重，
&lt;/span>&lt;span class="c">没有指定权重的节点默认是1。以properties文件的格式填写，以从0开始到count-1的整数值也就 是节点索引为key，以节点权重值为值。所有权重值必须是正整数，否则以1代替 --&amp;gt;&lt;/span> &lt;span class="c">&amp;lt;!-- &amp;lt;property name=&amp;#34;bucketMapPath&amp;#34;&amp;gt;/etc/mycat/bucketMapPath&amp;lt;/property&amp;gt; 用于测试时观察各物理节点与虚拟节点的分布情况，如果指定了这个属性，会把虚拟节点的
&lt;/span>&lt;span class="c">murmur hash值与物理节点的映射按行输出到这个文件，没有默认值，如果不指定，就不会输出任何 东西 --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/function&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="读写分离">读写分离&lt;/h3>
&lt;p>在schema.xml文件中配置Mycat读写分离。使用前需要搭建MySQL主从架构，并实现主从复制， Mycat不负数据同步问题。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml"> &lt;span class="nt">&amp;lt;dataHost&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;localhost1&amp;#34;&lt;/span> &lt;span class="na">maxCon=&lt;/span>&lt;span class="s">&amp;#34;1000&amp;#34;&lt;/span> &lt;span class="na">minCon=&lt;/span>&lt;span class="s">&amp;#34;10&amp;#34;&lt;/span> &lt;span class="na">balance=&lt;/span>&lt;span class="s">&amp;#34;1&amp;#34;&lt;/span> &lt;span class="na">writeType=&lt;/span>&lt;span class="s">&amp;#34;0&amp;#34;&lt;/span>
&lt;span class="na">dbType=&lt;/span>&lt;span class="s">&amp;#34;mysql&amp;#34;&lt;/span> &lt;span class="na">dbDriver=&lt;/span>&lt;span class="s">&amp;#34;native&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;heartbeat&amp;gt;&lt;/span>select user()&lt;span class="nt">&amp;lt;/heartbeat&amp;gt;&lt;/span> &lt;span class="c">&amp;lt;!-- can have multi write hosts --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;writeHost&lt;/span> &lt;span class="na">host=&lt;/span>&lt;span class="s">&amp;#34;M1&amp;#34;&lt;/span> &lt;span class="na">url=&lt;/span>&lt;span class="s">&amp;#34;localhost:3306&amp;#34;&lt;/span> &lt;span class="na">user=&lt;/span>&lt;span class="s">&amp;#34;root&amp;#34;&lt;/span> &lt;span class="na">password=&lt;/span>&lt;span class="s">&amp;#34;123456&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;readHost&lt;/span> &lt;span class="na">host=&lt;/span>&lt;span class="s">&amp;#34;S1&amp;#34;&lt;/span> &lt;span class="na">url=&lt;/span>&lt;span class="s">&amp;#34;localhost:3307&amp;#34;&lt;/span> &lt;span class="na">user=&lt;/span>&lt;span class="s">&amp;#34;root&amp;#34;&lt;/span> &lt;span class="na">password=&lt;/span>&lt;span class="s">&amp;#34;123456&amp;#34;&lt;/span> &lt;span class="na">weight=&lt;/span>&lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/writeHost&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dataHost&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>balance参数：&lt;/p>
&lt;ul>
&lt;li>0 ： 所有读操作都发送到当前可用的writeHost&lt;/li>
&lt;li>1 ：所有读操作都随机发送到readHost和stand by writeHost&lt;/li>
&lt;li>2 ：所有读操作都随机发送到writeHost和readHost&lt;/li>
&lt;li>3 ：所有读操作都随机发送到writeHost对应的readHost上，但是writeHost不负担读压力&lt;/li>
&lt;/ul>
&lt;p>writeType参数：&lt;/p>
&lt;ul>
&lt;li>0 ： 所有写操作都发送到可用的writeHost&lt;/li>
&lt;li>1 ：所有写操作都随机发送到readHost&lt;/li>
&lt;li>2 ：所有写操作都随机发送到writeHost，readHost&lt;/li>
&lt;/ul>
&lt;p>或者&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml"> &lt;span class="nt">&amp;lt;dataHost&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;localhost1&amp;#34;&lt;/span> &lt;span class="na">maxCon=&lt;/span>&lt;span class="s">&amp;#34;1000&amp;#34;&lt;/span> &lt;span class="na">minCon=&lt;/span>&lt;span class="s">&amp;#34;10&amp;#34;&lt;/span> &lt;span class="na">balance=&lt;/span>&lt;span class="s">&amp;#34;1&amp;#34;&lt;/span> &lt;span class="na">writeType=&lt;/span>&lt;span class="s">&amp;#34;0&amp;#34;&lt;/span>
&lt;span class="na">dbType=&lt;/span>&lt;span class="s">&amp;#34;mysql&amp;#34;&lt;/span> &lt;span class="na">dbDriver=&lt;/span>&lt;span class="s">&amp;#34;native&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;heartbeat&amp;gt;&lt;/span>select user()&lt;span class="nt">&amp;lt;/heartbeat&amp;gt;&lt;/span> &lt;span class="c">&amp;lt;!-- can have multi write hosts --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;writeHost&lt;/span> &lt;span class="na">host=&lt;/span>&lt;span class="s">&amp;#34;M1&amp;#34;&lt;/span> &lt;span class="na">url=&lt;/span>&lt;span class="s">&amp;#34;localhost:3306&amp;#34;&lt;/span> &lt;span class="na">user=&lt;/span>&lt;span class="s">&amp;#34;root&amp;#34;&lt;/span> &lt;span class="na">password=&lt;/span>&lt;span class="s">&amp;#34;123456&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&amp;lt;/writeHost&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;writeHost&lt;/span> &lt;span class="na">host=&lt;/span>&lt;span class="s">&amp;#34;S1&amp;#34;&lt;/span> &lt;span class="na">url=&lt;/span>&lt;span class="s">&amp;#34;localhost:3307&amp;#34;&lt;/span> &lt;span class="na">user=&lt;/span>&lt;span class="s">&amp;#34;root&amp;#34;&lt;/span> &lt;span class="na">password=&lt;/span>&lt;span class="s">&amp;#34;123456&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&amp;lt;/writeHost&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dataHost&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以上两种取模第一种当写挂了读不可用，第二种可以继续使用，事务内部的一切操作都会走写节点，所以读操作不要加事务，如果读延时较大，使用根据主从延时切换的读写分离，或者强制走写节点&lt;/p>
&lt;h3 id="强制路由">强制路由&lt;/h3>
&lt;p>一个查询 SQL 语句以/* !mycat * /注解来确定其是走读节点还是写节点。&lt;/p>
&lt;p>/*! */&lt;/p>
&lt;p>/*# */&lt;/p>
&lt;p>/** */&lt;/p>
&lt;pre>&lt;code>强制走从: /*!mycat:db_type=slave*/ select * from travelrecord //有效 /*#mycat:db_type=slave*/ select * from travelrecord
强制走写: /*!mycat:db_type=master*/ select * from travelrecord //有效 /*#mycat:db_type=slave*/ select * from travelrecord
&lt;/code>&lt;/pre>&lt;p>1.6 以后Mycat除了支持db_type注解以外，还有其他注解，如下：&lt;/p>
&lt;pre>&lt;code>/*!mycat:sql=sql */ 指定真正执行的SQL
/*!mycat:schema=schema1 */ 指定走那个schema
/*!mycat:datanode=dn1 */ 指定sql要运行的节点
/*!mycat:catlet=io.mycat.catlets.ShareJoin */ 通过catlet支持跨分片复杂SQL实现以及存 储过程支持等
&lt;/code>&lt;/pre>&lt;h3 id="主从延时切换">主从延时切换&lt;/h3>
&lt;p>switchType参数：&lt;/p>
&lt;ul>
&lt;li>-1： 表示不自动切换&lt;/li>
&lt;li>1 ：表示自动切换&lt;/li>
&lt;li>2 ：基于MySQL主从同步状态决定是否切换&lt;/li>
&lt;li>3 ：基于MySQL cluster集群切换机制&lt;/li>
&lt;/ul>
&lt;p>1.4 开始支持 MySQL 主从复制状态绑定的读写分离机制，让读更加安全可靠，配置如下: MyCAT 心跳检查语句配置为 show slave status ，dataHost 上定义两个新属性: switchType=&amp;quot;2&amp;quot; 与 slaveThreshold=&amp;quot;100&amp;quot;，此时意味着开启 MySQL 主从复制状态绑定的读写分离与切换机制，Mycat 心 跳机 制通过检测 show slave status 中的 &amp;quot;Seconds_Behind_Master&amp;quot;, &amp;quot;Slave_IO_Running&amp;quot;, &amp;quot;Slave_SQL_Running&amp;quot; 三个字段来确定当前主从同步的状态以及 Seconds_Behind_Master 主从复制时 延， 当 Seconds_Behind_Master &amp;gt; slaveThreshold 时，读写分离筛选器会过滤掉此 Slave 机器，防止 读到很久之 前的旧数据，而当主节点宕机后，切换逻辑会检查 Slave 上的 Seconds_Behind_Master 是 否为 0，为 0 时则 表示主从同步，可以安全切换，否则不会切换。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml"> &lt;span class="nt">&amp;lt;dataHost&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;localhost1&amp;#34;&lt;/span> &lt;span class="na">maxCon=&lt;/span>&lt;span class="s">&amp;#34;1000&amp;#34;&lt;/span> &lt;span class="na">minCon=&lt;/span>&lt;span class="s">&amp;#34;10&amp;#34;&lt;/span> &lt;span class="na">balance=&lt;/span>&lt;span class="s">&amp;#34;0&amp;#34;&lt;/span> &lt;span class="na">writeType=&lt;/span>&lt;span class="s">&amp;#34;0&amp;#34;&lt;/span>
&lt;span class="na">dbType=&lt;/span>&lt;span class="s">&amp;#34;mysql&amp;#34;&lt;/span> &lt;span class="na">dbDriver=&lt;/span>&lt;span class="s">&amp;#34;native&amp;#34;&lt;/span> &lt;span class="na">switchType=&lt;/span>&lt;span class="s">&amp;#34;2&amp;#34;&lt;/span> &lt;span class="na">slaveThreshold=&lt;/span>&lt;span class="s">&amp;#34;100&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;heartbeat&amp;gt;&lt;/span>show slave status&lt;span class="nt">&amp;lt;/heartbeat&amp;gt;&lt;/span> &lt;span class="c">&amp;lt;!-- can have multi write hosts --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;writeHost&lt;/span> &lt;span class="na">host=&lt;/span>&lt;span class="s">&amp;#34;M1&amp;#34;&lt;/span> &lt;span class="na">url=&lt;/span>&lt;span class="s">&amp;#34;localhost:3306&amp;#34;&lt;/span> &lt;span class="na">user=&lt;/span>&lt;span class="s">&amp;#34;root&amp;#34;&lt;/span> &lt;span class="na">password=&lt;/span>&lt;span class="s">&amp;#34;123456&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/writeHost&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;writeHost&lt;/span> &lt;span class="na">host=&lt;/span>&lt;span class="s">&amp;#34;S1&amp;#34;&lt;/span> &lt;span class="na">url=&lt;/span>&lt;span class="s">&amp;#34;localhost:3316&amp;#34;&lt;/span> &lt;span class="na">user=&lt;/span>&lt;span class="s">&amp;#34;root&amp;#34;&lt;/span>
&lt;span class="err">&amp;lt;/dataHost&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>1.4.1 开始支持 MySQL 集群模式，让读更加安全可靠，配置如下: MyCAT 心跳检查语句配置为 show status like ‘wsrep%’ ，dataHost 上定义两个新属性: switchType=&amp;quot;3&amp;quot; 此时意味着开启 MySQL 集群复制状态状态绑定的读写分离与切换机制，Mycat 心跳机制通过检测集群 复制时延时，如果延时过大或者集群出现节点问题不会负载改节点。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml"> &lt;span class="nt">&amp;lt;dataHost&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;localhost1&amp;#34;&lt;/span> &lt;span class="na">maxCon=&lt;/span>&lt;span class="s">&amp;#34;1000&amp;#34;&lt;/span> &lt;span class="na">minCon=&lt;/span>&lt;span class="s">&amp;#34;10&amp;#34;&lt;/span> &lt;span class="na">balance=&lt;/span>&lt;span class="s">&amp;#34;0&amp;#34;&lt;/span> &lt;span class="na">writeType=&lt;/span>&lt;span class="s">&amp;#34;0&amp;#34;&lt;/span>
&lt;span class="na">dbType=&lt;/span>&lt;span class="s">&amp;#34;mysql&amp;#34;&lt;/span> &lt;span class="na">dbDriver=&lt;/span>&lt;span class="s">&amp;#34;native&amp;#34;&lt;/span> &lt;span class="na">switchType=&lt;/span>&lt;span class="s">&amp;#34;3&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;heartbeat&amp;gt;&lt;/span>show status like ‘wsrep%’&lt;span class="nt">&amp;lt;/heartbeat&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;writeHost&lt;/span> &lt;span class="na">host=&lt;/span>&lt;span class="s">&amp;#34;M1&amp;#34;&lt;/span> &lt;span class="na">url=&lt;/span>&lt;span class="s">&amp;#34;localhost:3306&amp;#34;&lt;/span> &lt;span class="na">user=&lt;/span>&lt;span class="s">&amp;#34;root&amp;#34;&lt;/span> &lt;span class="na">password=&lt;/span>&lt;span class="s">&amp;#34;123456&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/writeHost&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;writeHost&lt;/span> &lt;span class="na">host=&lt;/span>&lt;span class="s">&amp;#34;S1&amp;#34;&lt;/span> &lt;span class="na">url=&lt;/span>&lt;span class="s">&amp;#34;localhost:3316&amp;#34;&lt;/span> &lt;span class="na">user=&lt;/span>&lt;span class="s">&amp;#34;root&amp;#34;&lt;/span> &lt;span class="na">password=&lt;/span>&lt;span class="s">&amp;#34;123456&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/writeHost&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dataHost&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="mycat事务">Mycat事务&lt;/h2>
&lt;h3 id="mycat-数据库事务">Mycat 数据库事务&lt;/h3>
&lt;p>Mycat 目前没有出来跨分片的事务强一致性支持，单库内部可以保证事务的完整性，如果跨库事务， 在执行的时候任何分片出错，可以保证所有分片回滚，但是一旦应用发起 commit 指令，无法保证所有分片都成功，考虑到某个分片挂的可能性不大所以称为弱 XA。&lt;/p>
&lt;h3 id="xa-事务使用">XA 事务使用&lt;/h3>
&lt;p>Mycat 从 1.6.5 版本开始支持标准 XA 分布式事务，考虑到 MySQL 5.7 之前版本XA有bug，所以推荐最佳搭配 XA 功能使用 MySQL 5.7 版本。&lt;/p>
&lt;p>Mycat 实现 XA 标准分布式事务，Mycat 作为XA 事务协调者角色，即使事务过程中 Mycat 宕机挂掉， 由于 Mycat 会记录事务日志，所以 Mycat 恢复后会进行事务的恢复善后处理工作。考虑到分布式事务 的性能开销比较大，所以只推荐在全局表的事务以及其他一些对一致性要 求比较高的场景。&lt;/p>
&lt;p>使用示例:&lt;/p>
&lt;p>XA 操作说明&lt;/p>
&lt;ul>
&lt;li>
&lt;p>XA 事务需要设置手动提交&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">autocommit&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用该命令开启 XA 事务&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">xa&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">on&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>执行相应的 SQL 语句部分&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">city&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">province&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;chengdu&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;sichuan&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">update&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">position&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;300000&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>提交或回滚事务&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">commit&lt;/span>&lt;span class="err">；&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">rollback&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="保证repeatable-read">保证Repeatable Read&lt;/h3>
&lt;p>mycat 有一个特性，就是开事务之后，如果不运行 update/delete/select for update 等更新类语句 SQL 的话，不会将当前连接与当前 session 绑定。如下图所示:&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-162631-0590.png" alt="20201224-162631-0590.png">&lt;/p>
&lt;p>这样做的好处是可以保证连接可以最大限度的复用，提升性能。
但是,这就会导致两次 select 中如果有其它的在提交的话，会出现两次同样的 select 不一 致的现象,即不 能 Repeatable Read，这会让人直连 MySQL 的人很困惑,可能会在依赖 Repeatable Read 的场景出现 问题。所以做了一个开关,当 server.xml 的 system 配置了 strictTxIsolation=true 的时候，会关掉这个 特性，以保证 repeatable read,加了开关 后如下图所示:&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-162233-0272.png" alt="20201224-162233-0272.png">&lt;/p></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category><category domain="https://chuchin.cn/tags/mycat/">Mycat</category></item><item><title>MySQL ShardingSphere实战</title><link>https://chuchin.cn/tech/storage/mysql/mysql-segmentation-shardingsphere/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-segmentation-shardingsphere/</guid><pubDate>Fri, 18 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>&lt;em>本文源代码下载：&lt;a href="https://chuchin.cn/file/mysql/mysql-example.zip">mysql-example.zip&lt;/a>&lt;/em>&lt;/p>
&lt;h2 id="shardingsphere-介绍">ShardingSphere 介绍&lt;/h2>
&lt;p>Apache ShardingSphere是一款开源的分布式数据库中间件组成的生态圈。它由Sharding-JDBC、 Sharding-Proxy和Sharding-Sidecar（规划中）这3款相互独立的产品组成。 他们均提供标准化的数据 分片、分布式事务和数据库治理功能，可适用于如Java同构、异构语言、容器、云原生等各种多样化的 应用场景。&lt;/p>
&lt;p>ShardingSphere项目状态如下：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201223-143757-0407.png" alt="20201223-143757-0407.png">&lt;/p>
&lt;p>ShardingSphere定位为关系型数据库中间件，旨在充分合理地在分布式的场景下利用关系型数据库的 计算和存储能力，而并非实现一个全新的关系型数据库。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201223-152714-0083.png" alt="20201223-152714-0083.png">&lt;/p>
&lt;ul>
&lt;li>Sharding-JDBC：被定位为轻量级Java框架，在Java的JDBC层提供的额外服务，以jar包形式使用。&lt;/li>
&lt;li>Sharding-Proxy：被定位为透明化的数据库代理端，提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持。&lt;/li>
&lt;li>Sharding-Sidecar：被定位为Kubernetes或Mesos的云原生数据库代理，以DaemonSet的形式代理所有对数据库的访问。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201223-152516-0853.png" alt="20201223-152516-0853.png">&lt;/p>
&lt;p>Sharding-JDBC、Sharding-Proxy和Sharding-Sidecar三者区别如下：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201223-152917-0922.png" alt="20201223-152917-0922.png">&lt;/p>
&lt;p>ShardingSphere安装包下载：https://shardingsphere.apache.org/document/current/cn/downloads/&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201223-150926-0344.png" alt="20201223-150926-0344.png">&lt;/p>
&lt;p>使用Git下载工程：git clone &lt;a href="https://github.com/apache/incubator-shardingsphere.git">https://github.com/apache/incubator-shardingsphere.git&lt;/a>&lt;/p>
&lt;h2 id="sharding-jdbc">Sharding-JDBC&lt;/h2>
&lt;p>Sharding-JDBC定位为轻量级Java框架，在Java的JDBC层提供的额外服务。 它使用客户端直连数据库， 以jar包形式提供服务，无需额外部署和依赖，可理解为增强版的JDBC驱动，完全兼容JDBC和各种ORM 框架的使用。&lt;/p>
&lt;ul>
&lt;li>适用于任何基于Java的ORM框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template或直接使 用JDBC。&lt;/li>
&lt;li>基于任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, Druid, HikariCP等。&lt;/li>
&lt;li>支持任意实现JDBC规范的数据库。目前支持MySQL，Oracle，SQLServer和PostgreSQL。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201223-150453-0387.png" alt="20201223-150453-0387.png">&lt;/p>
&lt;p>Sharding-JDBC主要功能：&lt;/p>
&lt;ul>
&lt;li>数据分片
&lt;ul>
&lt;li>分库、分表&lt;/li>
&lt;li>读写分离&lt;/li>
&lt;li>分片策略&lt;/li>
&lt;li>分布式主键&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>分布式事务
&lt;ul>
&lt;li>标准化的事务接口&lt;/li>
&lt;li>XA强一致性事务&lt;/li>
&lt;li>柔性事务&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>数据库治理
&lt;ul>
&lt;li>配置动态化&lt;/li>
&lt;li>编排和治理&lt;/li>
&lt;li>数据脱敏&lt;/li>
&lt;li>可视化链路追踪&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Sharding-JDBC 内部结构：&lt;/strong>&lt;/p>
&lt;p>&lt;img src="C:%5CUsers%5CChuChinRCC%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608710403623.png" alt="1608710403623">&lt;/p>
&lt;ul>
&lt;li>图中黄色部分表示的是Sharding-JDBC的入口API，采用工厂方法的形式提供。 目前有 ShardingDataSourceFactory和MasterSlaveDataSourceFactory两个工厂类。
&lt;ul>
&lt;li>ShardingDataSourceFactory支持分库分表、读写分离操作&lt;/li>
&lt;li>MasterSlaveDataSourceFactory支持读写分离操作&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>图中蓝色部分表示的是Sharding-JDBC的配置对象，提供灵活多变的配置方式。 ShardingRuleConfiguration是分库分表配置的核心和入口，它可以包含多个 TableRuleConfiguration和MasterSlaveRuleConfiguration。
&lt;ul>
&lt;li>TableRuleConfiguration封装的是表的分片配置信息，有5种配置形式对应不同的 Configuration类型。&lt;/li>
&lt;li>MasterSlaveRuleConfiguration封装的是读写分离配置信息。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>图中红色部分表示的是内部对象，由Sharding-JDBC内部使用，应用开发者无需关注。ShardingJDBC通过ShardingRuleConfiguration和MasterSlaveRuleConfiguration生成真正供 ShardingDataSource和MasterSlaveDataSource使用的规则对象。ShardingDataSource和 MasterSlaveDataSource实现了DataSource接口，是JDBC的完整实现方案。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Sharding-JDBC初始化流程：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>根据配置的信息生成Configuration对象&lt;/li>
&lt;li>通过Factory会将Configuration对象转化为Rule对象&lt;/li>
&lt;li>通过Factory会将Rule对象与DataSource对象封装&lt;/li>
&lt;li>Sharding-JDBC使用DataSource进行分库分表和读写分离操作&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Sharding-JDBC 使用过程：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>引入maven依赖&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.shardingsphere&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>sharding-jdbc-core&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>${latest.release.version}&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意: 请将${latest.release.version}更改为实际的版本号。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>规则配置&lt;/p>
&lt;p>Sharding-JDBC可以通过Java，YAML，Spring命名空间和Spring Boot Starter四种方式配置，开 发者可根据场景选择适合的配置方式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建DataSource&lt;/p>
&lt;p>通过ShardingDataSourceFactory工厂和规则配置对象获取ShardingDataSource，然后即可通过 DataSource选择使用原生JDBC开发，或者使用JPA, MyBatis等ORM工具。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">DataSource&lt;/span> &lt;span class="n">dataSource&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ShardingSphereDataSourceFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createDataSource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">dataSourceMap&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">configurations&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">properties&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="数据分片剖析实战">数据分片剖析实战&lt;/h2>
&lt;h3 id="核心概念">核心概念&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>表概念&lt;/p>
&lt;ul>
&lt;li>
&lt;p>真实表&lt;/p>
&lt;p>数据库中真实存在的物理表。例如b_order0、b_order1&lt;/p>
&lt;/li>
&lt;li>
&lt;p>逻辑表&lt;/p>
&lt;p>在分片之后，同一类表结构的名称（总成）。例如b_order。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据节点&lt;/p>
&lt;p>在分片之后，由数据源和数据表组成。例如ds0.b_order1&lt;/p>
&lt;/li>
&lt;li>
&lt;p>绑定表&lt;/p>
&lt;p>指的是分片规则一致的关系表（主表、子表），例如b_order和b_order_item，均按照 order_id分片，则此两个表互为绑定表关系。绑定表之间的多表关联查询不会出现笛卡尔积关联，可以提升关联查询效率。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="n">b_order&lt;/span>&lt;span class="err">：&lt;/span>&lt;span class="n">b_order0&lt;/span>&lt;span class="err">、&lt;/span>&lt;span class="n">b_order1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b_order_item&lt;/span>&lt;span class="err">：&lt;/span>&lt;span class="n">b_order_item0&lt;/span>&lt;span class="err">、&lt;/span>&lt;span class="n">b_order_item1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b_order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">join&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b_order_item&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">order_id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">order_id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">order_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果不配置绑定表关系，采用笛卡尔积关联，会生成4个SQL&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b_order0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">join&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b_order_item0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">order_id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">order_id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">order_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b_order0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">join&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b_order_item1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">order_id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">order_id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">order_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b_order1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">join&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b_order_item0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">order_id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">order_id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">order_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b_order1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">join&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b_order_item1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">order_id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">order_id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">order_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果配置绑定表关系，生成2个SQL&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b_order0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">join&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b_order_item0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">order_id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">order_id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">order_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b_order1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">join&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b_order_item1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">order_id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">order_id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">order_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>广播表&lt;/p>
&lt;p>在使用中，有些表没必要做分片，例如字典表、省份信息等，因为他们数据量不大，而且这 种表可能需要与海量数据的表进行关联查询。广播表会在不同的数据节点上进行存储，存储 的表结构和数据完全相同。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>分片算法（ShardingAlgorithm）&lt;/p>
&lt;p>由于分片算法和业务实现紧密相关，因此并未提供内置分片算法，而是通过分片策略将各种场景提 炼出来，提供更高层级的抽象，并提供接口让应用开发者自行实现分片算法。目前提供4种分片算法。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>精确分片算法PreciseShardingAlgorithm&lt;/p>
&lt;p>用于处理使用单一键作为分片键的=与IN进行分片的场景。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>范围分片算法RangeShardingAlgorithm&lt;/p>
&lt;p>用于处理使用单一键作为分片键的BETWEEN AND、&amp;gt;、&amp;lt;、&amp;gt;=、&amp;lt;=进行分片的场景。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>复合分片算法ComplexKeysShardingAlgorithm&lt;/p>
&lt;p>用于处理使用多键作为分片键进行分片的场景，多个分片键的逻辑较复杂，需要应用开发者 自行处理其中的复杂度。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Hint分片算法HintShardingAlgorithm&lt;/p>
&lt;p>用于处理使用Hint行分片的场景。对于分片字段非SQL决定，而由其他外置条件决定的场景，可使用SQL Hint灵活的注入分片字段。例：内部系统，按照员工登录主键分库，而数据 库中并无此字段。SQL Hint支持通过Java API和SQL注释两种方式使用。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>分片策略（ShardingStrategy）&lt;/p>
&lt;p>分片策略包含分片键和分片算法，真正可用于分片操作的是分片键 + 分片算法，也就是分片策 略。目前提供5种分片策略。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>标准分片策略StandardShardingStrategy&lt;/p>
&lt;p>只支持单分片键，提供对SQL语句中的=, &amp;gt;, &amp;lt;, &amp;gt;=, &amp;lt;=, IN和BETWEEN AND的分片操作支持。 提供PreciseShardingAlgorithm和RangeShardingAlgorithm两个分片算法。 PreciseShardingAlgorithm是必选的，RangeShardingAlgorithm是可选的。但是SQL中使用 了范围操作，如果不配置RangeShardingAlgorithm会采用全库路由扫描，效率低。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>复合分片策略ComplexShardingStrategy&lt;/p>
&lt;p>支持多分片键。提供对SQL语句中的=, &amp;gt;, &amp;lt;, &amp;gt;=, &amp;lt;=, IN和BETWEEN AND的分片操作支持。由 于多分片键之间的关系复杂，因此并未进行过多的封装，而是直接将分片键值组合以及分片 操作符透传至分片算法，完全由应用开发者实现，提供最大的灵活度。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>行表达式分片策略InlineShardingStrategy&lt;/p>
&lt;p>只支持单分片键。使用Groovy的表达式，提供对SQL语句中的=和IN的分片操作支持，对于 简单的分片算法，可以通过简单的配置使用，从而避免繁琐的Java代码开发。如: t_user_$-&amp;gt; {u_id % 8} 表示t_user表根据u_id模8，而分成8张表，表名称为t_user_0到t_user_7。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Hint分片策略HintShardingStrategy&lt;/p>
&lt;p>通过Hint指定分片值而非从SQL中提取分片值的方式进行分片的策略。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不分片策略NoneShardingStrategy&lt;/p>
&lt;p>不分片的策略。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>分片策略配置&lt;/p>
&lt;p>对于分片策略存有数据源分片策略和表分片策略两种维度，两种策略的API完全相同。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>数据源分片策略&lt;/p>
&lt;p>用于配置数据被分配的目标数据源。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>表分片策略&lt;/p>
&lt;p>用于配置数据被分配的目标表，由于表存在与数据源内，所以表分片策略是依赖数据源分片策略结果的。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="流程剖析">流程剖析&lt;/h3>
&lt;p>ShardingSphere 3个产品的数据分片功能主要流程是完全一致的，如下图所示。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201223-170402-0515.png" alt="20201223-170402-0515.png">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>SQL解析&lt;/p>
&lt;p>SQL解析分为词法解析和语法解析。 先通过词法解析器将SQL拆分为一个个不可再分的单词。再使 用语法解析器对SQL进行理解，并最终提炼出解析上下文。&lt;/p>
&lt;p>Sharding-JDBC采用不同的解析器对SQL进行解析，解析器类型如下：&lt;/p>
&lt;ul>
&lt;li>MySQL解析器&lt;/li>
&lt;li>Oracle解析器&lt;/li>
&lt;li>SQLServer解析器&lt;/li>
&lt;li>PostgreSQL解析器&lt;/li>
&lt;li>默认SQL解析器&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>查询优化&lt;/p>
&lt;p>负责合并和优化分片条件，如OR等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SQL路由&lt;/p>
&lt;p>根据解析上下文匹配用户配置的分片策略，并生成路由路径。目前支持分片路由和广播路由。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SQL改写&lt;/p>
&lt;p>将SQL改写为在真实数据库中可以正确执行的语句。SQL改写分为正确性改写和优化改写。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SQL执行&lt;/p>
&lt;p>通过多线程执行器异步执行SQL。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结果归并&lt;/p>
&lt;p>将多个执行结果集归并以便于通过统一的JDBC接口输出。结果归并包括流式归并、内存归并和使用装饰者模式的追加归并这几种方式。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="sql使用规范">SQL使用规范&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>支持项&lt;/p>
&lt;ul>
&lt;li>
&lt;p>路由至单数据节点时，目前MySQL数据库100%全兼容，其他数据库完善中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>路由至多数据节点时，全面支持DQL、DML、DDL、DCL、TCL。支持分页、去重、排 序、分组、聚合、关联查询（不支持跨库关联）。以下用最为复杂的查询为例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">select_expr&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">select_expr&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">...]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">table_reference&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">table_reference&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">...]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">predicates&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">GROUP&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">{&lt;/span>&lt;span class="n">col_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="err">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">ASC&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DESC&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">...]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">ORDER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">{&lt;/span>&lt;span class="n">col_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="err">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">ASC&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DESC&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">...]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">LIMIT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">{&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">offset&lt;/span>&lt;span class="p">,]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">row_count&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">row_count&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">OFFSET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">offset&lt;/span>&lt;span class="err">}&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>不支持项（路由至多数据节点）&lt;/p>
&lt;ul>
&lt;li>不支持CASE WHEN、HAVING、UNION (ALL)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>支持分页子查询，但其他子查询有限支持，无论嵌套多少层，只能解析至第一个包含数据表 的子查询，一旦在下层嵌套中再次找到包含数据表的子查询将直接抛出解析异常。 例如，以下子查询可以支持：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">COUNT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b_order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以下子查询不支持：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">COUNT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b_order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">IN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b_order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>简单来说，通过子查询进行非功能需求，在大部分情况下是可以支持的。比如分页、统计总 数等；而通过子查询实现业务查询当前并不能支持。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>由于归并的限制，子查询中包含聚合函数目前无法支持。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不支持包含schema的SQL。因为ShardingSphere的理念是像使用一个数据源一样使用多数据源，因此对SQL的访问都是在同一个逻辑schema之上。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当分片键处于运算表达式或函数中的SQL时，将采用全路由的形式获取结果。&lt;/p>
&lt;p>例如下面SQL，create_time为分片键：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b_order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">to_date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">create_time&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;yyyy-mm-dd&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;202005-05&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>由于ShardingSphere只能通过SQL字面提取用于分片的值，因此当分片键处于运算表达式 或函数中时，ShardingSphere无法提前获取分片键位于数据库中的值，从而无法计算出真正 的分片值。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>不支持的SQL示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">tbl_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">col1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">col2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">…&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">…&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="n">VALUES语句不支持运算&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">表达式&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">tbl_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">col1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">col2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">…&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">col1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">col2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">…&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tbl_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">col3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">COUNT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">col1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">count_alias&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tbl_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">GROUP&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">col1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">HAVING&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">count_alias&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="k">HAVING&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tbl_name1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">UNION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tbl_name2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ds&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tbl_name1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">包含&lt;/span>&lt;span class="n">schema&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">SUM&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">DISTINCT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">col1&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">SUM&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">col1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tbl_name&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="k">UNION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tbl_name1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">UNION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ALL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tbl_name2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="k">UNION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ALL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">同时使用普通聚合函数&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="err">和&lt;/span>&lt;span class="n">DISTINCT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tbl_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">to_date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">create_time&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">‘&lt;/span>&lt;span class="n">yyyy&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">mm&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">dd&lt;/span>&lt;span class="err">’&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">会导致&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">全路由&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>分页查询&lt;/p>
&lt;p>完全支持MySQL和Oracle的分页查询，SQLServer由于分页查询较为复杂，仅部分支持.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>性能瓶颈：&lt;/p>
&lt;p>查询偏移量过大的分页会导致数据库获取数据性能低下，以MySQL为例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b_order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ORDER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">LIMIT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1000000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这句SQL会使得MySQL在无法利用索引的情况下跳过1000000条记录后，再获取10条记录， 其性能可想而知。 而在分库分表的情况下（假设分为2个库），为了保证数据的正确性，SQL 会改写为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b_order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ORDER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">LIMIT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1000010&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>即将偏移量前的记录全部取出，并仅获取排序后的最后10条记录。这会在数据库本身就执行 很慢的情况下，进一步加剧性能瓶颈。 因为原SQL仅需要传输10条记录至客户端，而改写之 后的SQL则会传输1,000,010 * 2的记录至客户端。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ShardingSphere的优化：&lt;/p>
&lt;p>ShardingSphere进行了以下2个方面的优化&lt;/p>
&lt;ul>
&lt;li>首先，采用流式处理 + 归并排序的方式来避免内存的过量占用。&lt;/li>
&lt;li>其次，ShardingSphere对仅落至单节点的查询进行进一步优化。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>分页方案优化：&lt;/p>
&lt;p>由于LIMIT并不能通过索引查询数据，因此如果可以保证ID的连续性，通过ID进行分页是比较 好的解决方案：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b_order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1000000&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AND&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1000010&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ORDER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或通过记录上次查询结果的最后一条记录的ID进行下一页的查询：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b_order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1000000&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">LIMIT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="其他功能">其他功能&lt;/h3>
&lt;p>&lt;strong>Inline行表达式&lt;/strong>&lt;/p>
&lt;p>InlineShardingStrategy：采用Inline行表达式进行分片的配置。&lt;/p>
&lt;p>Inline是可以简化数据节点和分片算法配置信息。主要是解决配置简化、配置一体化。&lt;/p>
&lt;p>&lt;strong>语法格式：&lt;/strong>&lt;/p>
&lt;p>行表达式的使用非常直观，只需要在配置中使用${ expression }或$-&amp;gt;{ expression }标识行表达式 即可。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="err">${&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="err">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">表示范围区间&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="err">${&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">unit1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unit2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unit_x&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">表示枚举值&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>行表达式中如果出现多个${}或$-&amp;gt;{}表达式，整个表达式结果会将每个子表达式结果进行笛卡尔 (积)组合。例如，以下行表达式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="err">${&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;online&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;offline&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">}&lt;/span>&lt;span class="n">_table&lt;/span>&lt;span class="err">${&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="err">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="err">{&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;online&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;offline&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">}&lt;/span>&lt;span class="n">_table&lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="err">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="err">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最终会解析为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="n">online_table1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">online_table2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">online_table3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">offline_table1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">offline_table2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">offline_table3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>数据节点配置&lt;/strong>：&lt;/p>
&lt;p>对于均匀分布的数据节点，如果数据结构如下：&lt;/p>
&lt;pre>&lt;code>db0
├── b_order2
└── b_order1
db1
├── b_order2
└── b_order1
&lt;/code>&lt;/pre>&lt;p>用行表达式可以简化为：&lt;/p>
&lt;pre>&lt;code>db${0..1}.b_order${1..2}
或者
db$-&amp;gt;{0..1}.b_order$-&amp;gt;{1..2}
&lt;/code>&lt;/pre>&lt;p>对于自定义的数据节点，如果数据结构如下：&lt;/p>
&lt;pre>&lt;code>db0
├── b_order0
└── b_order1
db1
├── b_order2
├── b_order3
└── b_order4
&lt;/code>&lt;/pre>&lt;p>用行表达式可以简化为：&lt;/p>
&lt;pre>&lt;code>db0.b_order${0..1},db1.b_order${2..4}
&lt;/code>&lt;/pre>&lt;p>&lt;strong>分片算法配置：&lt;/strong>&lt;/p>
&lt;p>行表达式内部的表达式本质上是一段Groovy代码，可以根据分片键进行计算的方式，返回相应的 真实数据源或真实表名称。&lt;/p>
&lt;pre>&lt;code>ds${id % 10} 或者 ds$-&amp;gt;{id % 10}
&lt;/code>&lt;/pre>&lt;p>结果为：ds0、ds1、ds2... ds9&lt;/p>
&lt;ul>
&lt;li>
&lt;p>分布式主键&lt;/p>
&lt;p>ShardingSphere不仅提供了内置的分布式主键生成器，例如UUID、SNOWFLAKE，还抽离出分布 式主键生成器的接口，方便用户自行实现自定义的自增主键生成器。&lt;/p>
&lt;p>&lt;strong>内置主键生成器：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>UUID&lt;/p>
&lt;p>采用UUID.randomUUID()的方式产生分布式主键。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SNOWFLAKE&lt;/p>
&lt;p>在分片规则配置模块可配置每个表的主键生成策略，默认使用雪花算法，生成64bit的长整型数据。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>自定义主键生成器&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>自定义主键类，实现ShardingKeyGenerator接口&lt;/p>
&lt;/li>
&lt;li>
&lt;p>按SPI规范配置自定义主键类&lt;/p>
&lt;p>在Apache ShardingSphere中，很多功能实现类的加载方式是通过SPI注入的方式完成的。 注意：在resources目录下新建META-INF文件夹，再新建services文件夹，然后新建文件的 名字为org.apache.shardingsphere.spi.keygen.ShardingKeyGenerator，打开文件，复制 自定义主键类全路径到文件中保存。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自定义主键类应用配置&lt;/p>
&lt;pre>&lt;code>#对应主键字段名 spring.shardingsphere.sharding.tables.t_book.key-generator.column=id #对应主键类getType返回内容 spring.shardingsphere.sharding.tables.t_book.keygenerator.type=LAGOUKEY
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="读写分离剖析实战">读写分离剖析实战&lt;/h2>
&lt;p>读写分离是通过主从的配置方式，将查询请求均匀的分散到多个数据副本，进一步的提升系统的处理能力。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-104831-0848.png" alt="20201224-104831-0848.png">&lt;/p>
&lt;p>主从架构：读写分离，目的是高可用、读写扩展。主从库内容相同，根据SQL语义进行路由。&lt;/p>
&lt;p>分库分表架构：数据分片，目的读写扩展、存储扩容。库和表内容不同，根据分片配置进行路由。&lt;/p>
&lt;p>将水平分片和读写分离联合使用，能够更加有效的提升系统性能， 下图展现了将分库分表与读写分离一 同使用时，应用程序与数据库集群之间的复杂拓扑关系。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-103833-0818.png" alt="20201224-103833-0818.png">&lt;/p>
&lt;p>读写分离虽然可以提升系统的吞吐量和可用性，但同时也带来了数据不一致的问题，包括多个主库之间 的数据一致性，以及主库与从库之间的数据一致性的问题。 并且，读写分离也带来了与数据分片同样的问题，它同样会使得应用开发和运维人员对数据库的操作和运维变得更加复杂。&lt;/p>
&lt;p>&lt;strong>读写分离应用方案&lt;/strong>&lt;/p>
&lt;p>在数据量不是很多的情况下，我们可以将数据库进行读写分离，以应对高并发的需求，通过水平扩展从 库，来缓解查询的压力。如下：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-103438-0703.png" alt="20201224-103438-0703.png">&lt;/p>
&lt;p>&lt;strong>分表+读写分离&lt;/strong>&lt;/p>
&lt;p>在数据量达到500万的时候，这时数据量预估千万级别，我们可以将数据进行分表存储。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-104242-0690.png" alt="20201224-104242-0690.png">&lt;/p>
&lt;p>&lt;strong>分库分表+读写分离&lt;/strong>&lt;/p>
&lt;p>在数据量继续扩大，这时可以考虑分库分表，将数据存储在不同数据库的不同表中，如下：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-100644-0735.png" alt="20201224-100644-0735.png">&lt;/p>
&lt;p>&lt;strong>透明化读写分离所带来的影响，让使用方尽量像使用一个数据库一样使用主从数据库集群，是 ShardingSphere读写分离模块的主要设计目标。&lt;/strong>&lt;/p>
&lt;p>主库、从库、主从同步、负载均衡&lt;/p>
&lt;ul>
&lt;li>核心功能
&lt;ul>
&lt;li>提供一主多从的读写分离配置。仅支持单主库，可以支持独立使用，也可以配合分库分表使用&lt;/li>
&lt;li>独立使用读写分离，支持SQL透传。不需要SQL改写流程&lt;/li>
&lt;li>同一线程且同一数据库连接内，能保证数据一致性。如果有写入操作，后续的读操作均从主库读取。&lt;/li>
&lt;li>基于Hint的强制主库路由。可以强制路由走主库查询实时数据，避免主从同步数据延迟。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>不支持项
&lt;ul>
&lt;li>主库和从库的数据同步&lt;/li>
&lt;li>主库和从库的数据同步延迟&lt;/li>
&lt;li>主库双写或多写&lt;/li>
&lt;li>跨主库和从库之间的事务的数据不一致。建议在主从架构中，事务中的读写均用主库操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="强制路由剖析实战">强制路由剖析实战&lt;/h2>
&lt;p>在一些应用场景中，分片条件并不存在于SQL，而存在于外部业务逻辑。因此需要提供一种通过在外部 业务代码中指定路由配置的一种方式，在ShardingSphere中叫做Hint。如果使用Hint指定了强制分片路由，那么SQL将会无视原有的分片逻辑，直接路由至指定的数据节点操作。&lt;/p>
&lt;p>HintManager主要使用ThreadLocal管理分片键信息，进行hint强制路由。在代码中向HintManager添 加的配置信息只能在当前线程内有效。&lt;/p>
&lt;p>&lt;strong>Hint使用场景：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>数据分片操作，如果分片键没有在SQL或数据表中，而是在业务逻辑代码中&lt;/li>
&lt;li>读写分离操作，如果强制在主库进行某些数据操作&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Hint使用过程：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>编写分库或分表路由策略，实现HintShardingAlgorithm接口&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MyHintShardingAlgorithm&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">HintShardingAlgorithm&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Collection&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">doSharding&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Collection&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">collection&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">HintShardingValue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">hintShardingValue&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//添加分库或分表路由逻辑
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>在配置文件指定分库或分表策略&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="c">#强制路由库和表 spring.shardingsphere.sharding.tables.b_order.databasestrategy.hint.algorithm-class-name=com.lagou.hint.MyHintShardingAlgorithm spring.shardingsphere.sharding.tables.b_order.table-strategy.hint.algorithmclass-name=com.lagou.hint.MyHintShardingAlgorithm spring.shardingsphere.sharding.tables.b_order.actual-data-nodes=ds$-&amp;gt; {0..1}.b_order$-&amp;gt;{0..1}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>在代码执行查询前使用HintManager指定执行策略值&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="o">@&lt;/span>&lt;span class="n">Test&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">路由库和表&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">test&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="err">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">HintManager&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">hintManager&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">HintManager&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">getInstance&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">hintManager&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">addDatabaseShardingValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;b_order&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">hintManager&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">addTableShardingValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;b_order&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">Order&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">orderRepository&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">findAll&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">hintManager&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">close&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">forEach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">getOrderId&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34; &amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">getUserId&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">getOrderPrice&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">}&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="err">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在读写分离结构中，为了避免主从同步数据延迟及时获取刚添加或更新的数据，可以采用强制路由走主库查询实时数据，使用hintManager.setMasterRouteOnly设置主库路由即可。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="数据脱敏剖析实战">数据脱敏剖析实战&lt;/h2>
&lt;p>数据脱敏是指对某些敏感信息通过脱敏规则进行数据的变形，实现敏感隐私数据的可靠保护。涉及客户安全数据或者一些商业性敏感数据，如身份证号、手机号、卡号、客户号等个人信息按照规定，都需要 进行数据脱敏。&lt;/p>
&lt;p>数据脱敏模块属于ShardingSphere分布式治理这一核心功能下的子功能模块。&lt;/p>
&lt;ul>
&lt;li>在更新操作时，它通过对用户输入的SQL进行解析，并依据用户提供的脱敏配置对SQL进行改写， 从而实现对原文数据进行加密，并将密文数据存储到底层数据库。&lt;/li>
&lt;li>在查询数据时，它又从数据库中取出密文数据，并对其解密，最终将解密后的原始数据返回给用户。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Apache ShardingSphere自动化&amp;amp;透明化了数据脱敏过程，让用户无需关注数据脱敏的实现细节，像 使用普通数据那样使用脱敏数据。&lt;/strong>&lt;/p>
&lt;h3 id="整体架构">整体架构&lt;/h3>
&lt;p>ShardingSphere提供的Encrypt-JDBC和业务代码部署在一起。业务方需面向Encrypt-JDBC进行JDBC编程。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-104956-0772.png" alt="20201224-104956-0772.png">&lt;/p>
&lt;p>Encrypt-JDBC将用户发起的SQL进行拦截，并通过SQL语法解析器进行解析、理解SQL行为，再依据用 户传入的脱敏规则，找出需要脱敏的字段和所使用的加解密器对目标字段进行加解密处理后，再与底层 数据库进行交互。&lt;/p>
&lt;h3 id="脱敏规则">脱敏规则&lt;/h3>
&lt;p>脱敏配置主要分为四部分：数据源配置，加密器配置，脱敏表配置以及查询属性配置，其详情如下图所示：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-101458-0845.png" alt="20201224-101458-0845.png">&lt;/p>
&lt;ul>
&lt;li>数据源配置：指DataSource的配置信息&lt;/li>
&lt;li>加密器配置：指使用什么加密策略进行加解密。目前ShardingSphere内置了两种加解密策略： AES/MD5&lt;/li>
&lt;li>脱敏表配置：指定哪个列用于存储密文数据（cipherColumn）、哪个列用于存储明文数据 （plainColumn）以及用户想使用哪个列进行SQL编写（logicColumn）&lt;/li>
&lt;li>查询属性的配置：当底层数据库表里同时存储了明文数据、密文数据后，该属性开关用于决定是直 接查询数据库表里的明文数据进行返回，还是查询密文数据通过Encrypt-JDBC解密后返回。&lt;/li>
&lt;/ul>
&lt;h3 id="脱敏处理流程">脱敏处理流程&lt;/h3>
&lt;p>下图可以看出ShardingSphere将逻辑列与明文列和密文列进行了列名映射。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-114600-0608.png" alt="20201224-114600-0608.png">&lt;/p>
&lt;p>下方图片展示了使用Encrypt-JDBC进行增删改查时，其中的处理流程和转换逻辑，如下图所示。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-112901-0278.png" alt="20201224-112901-0278.png">&lt;/p>
&lt;h3 id="加密策略解析">加密策略解析&lt;/h3>
&lt;p>ShardingSphere提供了两种加密策略用于数据脱敏，该两种策略分别对应ShardingSphere的两种加解密的接口，即Encryptor和QueryAssistedEncryptor。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Encryptor&lt;/p>
&lt;p>该解决方案通过提供encrypt(), decrypt()两种方法对需要脱敏的数据进行加解密。在用户进行 INSERT, DELETE, UPDATE时，ShardingSphere会按照用户配置，对SQL进行解析、改写、路由， 并会调用encrypt()将数据加密后存储到数据库, 而在SELECT时，则调用decrypt()方法将从数据库 中取出的脱敏数据进行逆向解密，最终将原始数据返回给用户。
当前，ShardingSphere针对这种类型的脱敏解决方案提供了两种具体实现类，分别是MD5(不可逆)，AES(可逆)，用户只需配置即可使用这两种内置的方案。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>QueryAssistedEncryptor&lt;/p>
&lt;p>相比较于第一种脱敏方案，该方案更为安全和复杂。它的理念是：即使是相同的数据，如两个用户的密码相同，它们在数据库里存储的脱敏数据也应当是不一样的。这种理念更有利于保护用户信 息，防止撞库成功。
它提供三种函数进行实现，分别是encrypt(), decrypt(), queryAssistedEncrypt()。在encrypt()阶 段，用户通过设置某个变动种子，例如时间戳。针对原始数据+变动种子组合的内容进行加密，就 能保证即使原始数据相同，也因为有变动种子的存在，致使加密后的脱敏数据是不一样的。在 decrypt()可依据之前规定的加密算法，利用种子数据进行解密。queryAssistedEncrypt()用于生成 辅助查询列，用于原始数据的查询过程。 当前，ShardingSphere针对这种类型的脱敏解决方案并没有提供具体实现类，却将该理念抽象成接口，提供给用户自行实现。ShardingSphere将调用用户提供的该方案的具体实现类进行数据脱敏。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="分布式事务剖析实战">分布式事务剖析实战&lt;/h2>
&lt;h3 id="分布式事务理论">分布式事务理论&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>CAP（强一致性）&lt;/p>
&lt;p>CAP 定理，又被叫作布鲁尔定理。对于共享数据系统，最多只能同时拥有CAP其中的两个，任意两个都有其适应的场景。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-114904-0483.png" alt="20201224-114904-0483.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BASE（最终一致性）&lt;/p>
&lt;p>BASE 是指基本可用（Basically Available）、软状态（ Soft State）、最终一致性（ Eventual Consistency）。它的核心思想是即使无法做到强一致性（CAP 就是强一致性），但应用可以采用 适合的方式达到最终一致性。&lt;/p>
&lt;ul>
&lt;li>BA指的是基本业务可用性，支持分区失败；&lt;/li>
&lt;li>S表示柔性状态，也就是允许短时间内不同步；&lt;/li>
&lt;li>E表示最终一致性，数据最终是一致的，但是实时是不一致的。&lt;/li>
&lt;/ul>
&lt;p>原子性和持久性必须从根本上保障，为了可用性、性能和服务降级的需要，只有降低一致性和隔离性的要求。BASE 解决了 CAP 理论中没有考虑到的网络延迟问题，在BASE中用软状态和最终一 致，保证了延迟后的一致性。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="分布式事务模式">分布式事务模式&lt;/h3>
&lt;p>了解了分布式事务中的强一致性和最终一致性理论，下面介绍几种常见的分布式事务的解决方案。&lt;/p>
&lt;h4 id="2pc模式强一致性">2PC模式（强一致性）&lt;/h4>
&lt;p>2PC是Two-Phase Commit缩写，即两阶段提交，就是将事务的提交过程分为两个阶段来进行处理。事务的发起者称协调者，事务的执行者称参与者。协调者统一协调参与者执行。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>阶段 1：准备阶段&lt;/p>
&lt;p>协调者向所有参与者发送事务内容，询问是否可以提交事务，并等待所有参与者答复。 各参与者执行事务操作，但不提交事务，将 undo 和 redo 信息记入事务日志中。 如参与者执行成功，给协调者反馈 yes；如执行失败，给协调者反馈 no。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>阶段 2：提交阶段&lt;/p>
&lt;p>如果协调者收到了参与者的失败消息或者超时，直接给每个参与者发送回滚(rollback)消息； 否则，发送提交(commit)消息。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>2PC 方案实现起来简单，实际项目中使用比较少，主要因为以下问题：&lt;/p>
&lt;ul>
&lt;li>性能问题：所有参与者在事务提交阶段处于同步阻塞状态，占用系统资源，容易导致性能瓶颈。&lt;/li>
&lt;li>可靠性问题：如果协调者存在单点故障问题，如果协调者出现故障，参与者将一直处于锁定状态。&lt;/li>
&lt;li>数据一致性问题：在阶段 2 中，如果发生局部网络问题，一部分事务参与者收到了提交消息，另一部分事务参与者没收到提交消息，那么就导致了节点之间数据的不一致。&lt;/li>
&lt;/ul>
&lt;h4 id="3pc模式强一致性">3PC模式（强一致性）&lt;/h4>
&lt;p>3PC 三阶段提交，是两阶段提交的改进版本，与两阶段提交不同的是，引入超时机制。同时在协 调者和参与者中都引入超时机制。三阶段提交将两阶段的准备阶段拆分为 2 个阶段，插入了一个 preCommit 阶段，解决了原先在两阶段提交中，参与者在准备之后，由于协调者或参与者发生崩 溃或错误，而导致参与者无法知晓处于长时间等待的问题。如果在指定的时间内协调者没有收到参 与者的消息则默认失败。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>阶段1：canCommit&lt;/p>
&lt;p>协调者向参与者发送 commit 请求，参与者如果可以提交就返回 yes 响应，否则返回 no 响应。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>阶段2：preCommit&lt;/p>
&lt;p>协调者根据阶段 1 canCommit 参与者的反应情况执行预提交事务或中断事务操作。&lt;/p>
&lt;ul>
&lt;li>参与者均反馈 yes：协调者向所有参与者发出 preCommit 请求，参与者收到 preCommit 请求后，执行事务操作，但不提交；将 undo 和 redo 信息记入事务日志 中；各参与者向协调者反馈 ack 响应或 no 响应，并等待最终指令。&lt;/li>
&lt;li>任何一个参与者反馈 no或等待超时：协调者向所有参与者发出 abort 请求，无论收到 协调者发出的 abort 请求，或者在等待协调者请求过程中出现超时，参与者均会中断事务。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>阶段3：do Commit&lt;/p>
&lt;p>该阶段进行真正的事务提交，根据阶段 2 preCommit反馈的结果完成事务提交或中断操作。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="xa强一致性">XA（强一致性）&lt;/h4>
&lt;p>XA是由X/Open组织提出的分布式事务的规范，是基于两阶段提交协议。 XA规范主要定义了全局事务管理器（TM）和局部资源管理器（RM）之间的接口。目前主流的关系型数据库产品都是实现 了XA接口。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-112415-0983.png" alt="20201224-112415-0983.png">&lt;/p>
&lt;p>XA之所以需要引入事务管理器，是因为在分布式系统中，从理论上讲两台机器理论上无法达到一致的状态，需要引入一个单点进行协调。由全局事务管理器管理和协调的事务，可以跨越多个资源 （数据库）和进程。&lt;/p>
&lt;p>事务管理器用来保证所有的事务参与者都完成了准备工作(第一阶段)。如果事务管理器收到所有参与者都准备好的消息，就会通知所有的事务都可以提交了（第二阶段）。MySQL 在这个XA事务中 扮演的是参与者的角色，而不是事务管理器。&lt;/p>
&lt;h4 id="tcc模式最终一致性">TCC模式（最终一致性）&lt;/h4>
&lt;p>TCC（Try-Confirm-Cancel）的概念，最早是由 Pat Helland 于 2007 年发表的一篇名为《Life beyond Distributed Transactions:an Apostate’s Opinion》的论文提出。TCC 是服务化的两阶段 编程模型，其 Try、Confirm、Cancel 3 个方法均由业务编码实现：&lt;/p>
&lt;ul>
&lt;li>Try 操作作为一阶段，负责资源的检查和预留；&lt;/li>
&lt;li>Confirm 操作作为二阶段提交操作，执行真正的业务；&lt;/li>
&lt;li>Cancel 是预留资源的取消；&lt;/li>
&lt;/ul>
&lt;p>TCC事务模式相对于 XA 等传统模型如下图所示：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-111118-0407.png" alt="20201224-111118-0407.png">&lt;/p>
&lt;p>TCC 模式相比于 XA，解决了如下几个缺点：&lt;/p>
&lt;ul>
&lt;li>解决了协调者单点，由主业务方发起并完成这个业务活动。业务活动管理器可以变成多点， 引入集群。&lt;/li>
&lt;li>同步阻塞：引入超时机制，超时后进行补偿，并且不会锁定整个资源，将资源转换为业务逻 辑形式，粒度变小。&lt;/li>
&lt;li>数据一致性，有了补偿机制之后，由业务活动管理器控制一致性。&lt;/li>
&lt;/ul>
&lt;h4 id="消息队列模式最终一致性">消息队列模式（最终一致性）&lt;/h4>
&lt;p>消息队列的方案最初是由 eBay 提出，基于TCC模式，消息中间件可以基于 Kafka、RocketMQ 等消息队列。此方案的核心是将分布式事务拆分成本地事务进行处理，将需要分布式处理的任务通过 消息日志的方式来异步执行。消息日志可以存储到本地文本、数据库或MQ中间件，再通过业务规 则人工发起重试。&lt;/p>
&lt;p>下面描述下事务的处理流程：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-114919-0414.png" alt="20201224-114919-0414.png">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>步骤1：事务主动方处理本地事务。&lt;/p>
&lt;p>事务主动方在本地事务中处理业务更新操作和MQ写消息操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>步骤 2：事务主动方通过消息中间件，通知事务被动方处理事务通知事务待消息。&lt;/p>
&lt;p>事务主动方主动写消息到MQ，事务消费方接收并处理MQ中的消息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>步骤 3：事务被动方通过MQ中间件，通知事务主动方事务已处理的消息，事务主动方根据反馈结果提交或回滚事务。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>为了数据的一致性，当流程中遇到错误需要重试，容错处理规则如下：&lt;/p>
&lt;ul>
&lt;li>当步骤 1 处理出错，事务回滚，相当于什么都没发生。&lt;/li>
&lt;li>当步骤 2 处理出错，由于未处理的事务消息还是保存在事务发送方，可以重试或撤销本地业务操作。&lt;/li>
&lt;li>如果事务被动方消费消息异常，需要不断重试，业务处理逻辑需要保证幂等。&lt;/li>
&lt;li>如果是事务被动方业务上的处理失败，可以通过MQ通知事务主动方进行补偿或者事务回滚。&lt;/li>
&lt;li>如果多个事务被动方已经消费消息，事务主动方需要回滚事务时需要通知事务被动方回滚。&lt;/li>
&lt;/ul>
&lt;h4 id="saga模式最终一致性">Saga模式（最终一致性）&lt;/h4>
&lt;p>Saga这个概念源于 1987 年普林斯顿大学的 Hecto 和 Kenneth 发表的一篇数据库论文Sagas ，一 个Saga事务是一个有多个短时事务组成的长时的事务。 在分布式事务场景下，我们把一个Saga分 布式事务看做是一个由多个本地事务组成的事务，每个本地事务都有一个与之对应的补偿事务。在 Saga事务的执行过程中，如果某一步执行出现异常，Saga事务会被终止，同时会调用对应的补偿事务完成相关的恢复操作，这样保证Saga相关的本地事务要么都是执行成功，要么通过补偿恢复成为事务执行之前的状态。（自动反向补偿机制）。&lt;/p>
&lt;p>Saga 事务基本协议如下：&lt;/p>
&lt;ul>
&lt;li>每个 Saga 事务由一系列幂等的有序子事务(sub-transaction) Ti 组成。&lt;/li>
&lt;li>每个 Ti 都有对应的幂等补偿动作 Ci，补偿动作用于撤销 Ti 造成的结果。&lt;/li>
&lt;li>Saga是一种补偿模式，它定义了两种补偿策略：
&lt;ul>
&lt;li>向前恢复（forward recovery）：对应于上面第一种执行顺序，发生失败进行重试，适用于 必须要成功的场景。&lt;/li>
&lt;li>向后恢复（backward recovery）：对应于上面提到的第二种执行顺序，发生错误后撤销掉之前所 有成功的子事务，使得整个 Saga 的执行结果撤销。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-111423-0250.png" alt="20201224-111423-0250.png">&lt;/p>
&lt;p>Saga 的执行顺序有两种，如上图：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>事务正常执行完成：T1, T2, T3, ..., Tn，例如：减库存(T1)，创建订单(T2)，支付(T3)，依次有序完 成整个事务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>事务回滚：T1, T2, ..., Tj, Cj,..., C2, C1，其中 0 &amp;lt; j &amp;lt; n，例如：减库存(T1)，创建订单(T2)，支付 (T3)，支付失败，支付回滚(C3)，订单回滚(C2)，恢复库存(C1)。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="seata框架">Seata框架&lt;/h4>
&lt;p>Fescar开源项目，最初愿景是能像本地事务一样控制分布式事务，解决分布式环境下的难题。&lt;/p>
&lt;p>Seata（Simple Extensible Autonomous Transaction Architecture）是一套一站式分布式事务解 决方案，是阿里集团和蚂蚁金服联合打造的分布式事务框架。Seata目前的事务模式有AT、TCC、 Saga和XA，默认是AT模式，AT本质上是2PC协议的一种实现。&lt;/p>
&lt;p>Seata AT事务模型包含TM(事务管理器)，RM(资源管理器)，TC(事务协调器)。其中TC是一个独立 的服务需要单独部署，TM和RM以jar包的方式同业务应用部署在一起，它们同TC建立长连接，在 整个事务生命周期内，保持RPC通信。&lt;/p>
&lt;ul>
&lt;li>全局事务的发起方作为TM，全局事务的参与者作为RM&lt;/li>
&lt;li>TM负责全局事务的begin和commit/rollback&lt;/li>
&lt;li>RM负责分支事务的执行结果上报，并且通过TC的协调进行commit/rollback。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-112925-0885.png" alt="20201224-112925-0885.png">&lt;/p>
&lt;p>在 Seata 中，AT时分为两个阶段的，第一阶段，就是各个阶段本地提交操作；第二阶段会根据第 一阶段的情况决定是进行全局提交还是全局回滚操作。具体的执行流程如下：&lt;/p>
&lt;ul>
&lt;li>TM 开启分布式事务，负责全局事务的begin和commit/rollback（TM 向 TC 注册全局事务记 录）；&lt;/li>
&lt;li>RM 作为参与者，负责分支事务的执行结果上报，并且通过TC的协调进行 commit/rollback（RM 向 TC 汇报资源准备状态 ）；&lt;/li>
&lt;li>根据TC 汇总事务信息，由TM发起事务提交或回滚操作；&lt;/li>
&lt;li>TC 通知所有 RM 提交/回滚资源，事务二阶段结束；&lt;/li>
&lt;/ul>
&lt;h3 id="sharding-jdbc整合xa原理">Sharding-JDBC整合XA原理&lt;/h3>
&lt;p>Java通过定义JTA接口实现了XA的模型，JTA接口里的ResourceManager需要数据库厂商提供XA的驱动实现，而TransactionManager则需要事务管理器的厂商实现，传统的事务管理器需要同应用服务器绑 定，因此使用的成本很高。 而嵌入式的事务管器可以以jar包的形式提供服务，同ShardingSphere集成 后，可保证分片后跨库事务强一致性。&lt;/p>
&lt;p>ShardingSphere支持以下功能：&lt;/p>
&lt;ul>
&lt;li>支持数据分片后的跨库XA事务&lt;/li>
&lt;li>两阶段提交保证操作的原子性和数据的强一致性&lt;/li>
&lt;li>服务宕机重启后，提交/回滚中的事务可自动恢复&lt;/li>
&lt;li>SPI机制整合主流的XA事务管理器，默认Atomikos&lt;/li>
&lt;li>同时支持XA和非XA的连接池&lt;/li>
&lt;li>提供spring-boot和namespace的接入端&lt;/li>
&lt;/ul>
&lt;p>ShardingSphere整合XA事务时，分离了XA事务管理和连接池管理，这样接入XA时，可以做到对业务的零侵入。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-110928-0259.png" alt="20201224-110928-0259.png">&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Begin（开启XA全局事务）&lt;/p>
&lt;p>XAShardingTransactionManager会调用具体的XA事务管理器开启XA的全局事务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>执行物理SQL&lt;/p>
&lt;p>ShardingSphere进行解析/优化/路由后会生成SQL操作，执行引擎为每个物理SQL创建连接的同 时，物理连接所对应的XAResource也会被注册到当前XA事务中。事务管理器会在此阶段发送 XAResource.start命令给数据库，数据库在收到XAResource.end命令之前的所有SQL操作，会被 标记为XA事务。&lt;/p>
&lt;p>例如:&lt;/p>
&lt;pre>&lt;code>XAResource1.start ## Enlist阶段执行
statement.execute(&amp;quot;sql1&amp;quot;); ## 模拟执行一个分片SQL1
statement.execute(&amp;quot;sql2&amp;quot;); ## 模拟执行一个分片SQL2
XAResource1.end ## 提交阶段执行
&lt;/code>&lt;/pre>&lt;p>这里sql1和sql2将会被标记为XA事务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Commit/rollback（提交XA事务）&lt;/p>
&lt;p>XAShardingTransactionManager收到接入端的提交命令后，会委托实际的XA事务管理进行提交 动作，这时事务管理器会收集当前线程里所有注册的XAResource，首先发送XAResource.end指 令，用以标记此XA事务的边界。 接着会依次发送prepare指令，收集所有参与XAResource投票， 如果所有XAResource的反馈结果都是OK，则会再次调用commit指令进行最终提交，如果有一个 XAResource的反馈结果为No，则会调用rollback指令进行回滚。 在事务管理器发出提交指令后， 任何XAResource产生的异常都会通过recovery日志进行重试，来保证提交阶段的操作原子性，和 数据强一致性。 例如:&lt;/p>
&lt;pre>&lt;code>XAResource1.prepare ## ack: yes
XAResource2.prepare ## ack: yes
XAResource1.commit
XAResource2.commit
XAResource1.prepare ## ack: yes
XAResource2.prepare ## ack: no
XAResource1.rollback
XAResource2.rollback
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h3 id="sharding-jdbc整合saga原理">Sharding-JDBC整合Saga原理&lt;/h3>
&lt;p>ShardingSphere的柔性事务已通过第三方servicecomb-saga组件实现的，通过SPI机制注入使用。 ShardingSphere是基于反向SQL技术实现的反向补偿操作，它将对数据库进行更新操作的SQL自动生成 反向SQL，并交由Saga-actuator引擎执行。使用方则无需再关注如何实现补偿方法，将柔性事务管理器 的应用范畴成功的定位回了事务的本源——数据库层面。ShardingSphere支持以下功能：&lt;/p>
&lt;ul>
&lt;li>完全支持跨库事务&lt;/li>
&lt;li>支持失败SQL重试及最大努力送达&lt;/li>
&lt;li>支持反向SQL、自动生成更新快照以及自动补偿&lt;/li>
&lt;li>默认使用关系型数据库进行快照及事务日志的持久化，支持使用SPI的方式加载其他类型的持久化&lt;/li>
&lt;/ul>
&lt;p>Saga柔性事务的实现类为SagaShardingTransactionMananger, ShardingSphere通过Hook的方式拦 截逻辑SQL的解析和路由结果，这样，在分片物理SQL执行前，可以生成逆向SQL，在事务提交阶段再 把SQL调用链交给Saga引擎处理。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-132939-0389.png" alt="20201224-132939-0389.png">&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Init（Saga引擎初始化）&lt;/p>
&lt;p>包含Saga柔性事务的应用启动时，saga-actuator引擎会根据saga.properties的配置进行初始化的流程。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Begin（开启Saga全局事务）&lt;/p>
&lt;p>每次开启Saga全局事务时，将会生成本次全局事务的上下文（SagaTransactionContext），事务 上下文记录了所有子事务的正向SQL和逆向SQL，作为生成事务调用链的元数据使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>执行物理SQL&lt;/p>
&lt;p>在物理SQL执行前，ShardingSphere根据SQL的类型生成逆向SQL，这里是通过Hook的方式拦截 Parser的解析结果进行实现。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Commit/rollback（提交Saga事务）&lt;/p>
&lt;p>提交阶段会生成Saga执行引擎所需的调用链路图，commit操作产生ForwardRecovery（正向SQL 补偿）任务，rollback操作产生BackwardRecovery任务（逆向SQL补偿）。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="sharding-jdbc整合seata原理">Sharding-JDBC整合Seata原理&lt;/h3>
&lt;p>分布式事务的实现目前主要分为两阶段的XA强事务和BASE柔性事务。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-131841-0805.png" alt="20201224-131841-0805.png">&lt;/p>
&lt;p>Seata AT事务作为BASE柔性事务的一种实现，可以无缝接入到ShardingSphere生态中。在整合Seata AT事务时，需要把TM，RM，TC的模型融入到ShardingSphere 分布式事务的SPI的生态中。在数据库 资源上，Seata通过对接DataSource接口，让JDBC操作可以同TC进行RPC通信。同样， ShardingSphere也是面向DataSource接口对用户配置的物理DataSource进行了聚合，因此把物理 DataSource二次包装为Seata 的DataSource后，就可以把Seata AT事务融入到ShardingSphere的分片中。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-132939-0389.png" alt="20201224-132939-0389.png">&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Init（Seata引擎初始化）&lt;/p>
&lt;p>包含Seata柔性事务的应用启动时，用户配置的数据源会按seata.conf的配置，适配成Seata事务所 需的DataSourceProxy，并且注册到RM中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Begin（开启Seata全局事务）&lt;/p>
&lt;p>TM控制全局事务的边界，TM通过向TC发送Begin指令，获取全局事务ID，所有分支事务通过此全 局事务ID，参与到全局事务中；全局事务ID的上下文存放在当前线程变量中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>执行分片物理SQL&lt;/p>
&lt;p>处于Seata全局事务中的分片SQL通过RM生成undo快照，并且发送participate指令到TC，加入到 全局事务中。ShardingSphere的分片物理SQL是按多线程方式执行，因此整合Seata AT事务时， 需要在主线程和子线程间进行全局事务ID的上下文传递，这同服务间的上下文传递思路完全相 同。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Commit/rollback（提交Seata事务）&lt;/p>
&lt;p>提交Seata事务时，TM会向TC发送全局事务的commit和rollback指令，TC根据全局事务ID协调所有分支事务进行commit和rollback。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="sharding-jdbc分布式事务实战">Sharding-JDBC分布式事务实战&lt;/h2>
&lt;p>ShardingSphere整合了XA、Saga和Seata模式后，为分布式事务控制提供了极大的便利，我们可以在应用程序编程时，采用以下统一模式进行使用。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>引入Maven依赖&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.shardingsphere&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>sharding-transaction-xa-core&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>${shardingsphere.version}&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>io.shardingsphere&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>sharding-transaction-base-saga&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>${shardingsphere.version}&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.shardingsphere&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>sharding-jdbc-spring-boot-starter&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>JAVA编码方式设置事务类型&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">TransactionTypeHolder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TransactionType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">XA&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="n">TransactionTypeHolder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TransactionType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">BASE&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>参数配置&lt;/p>
&lt;p>ShardingSphere默认的XA事务管理器为Atomikos，通过在项目的classpath中添加jta.properties 来定制化Atomikos配置项。&lt;/p>
&lt;p>Saga可以通过在项目的classpath中添加saga.properties来定制化Saga事务的配置项。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="spi-加载剖析">SPI 加载剖析&lt;/h2>
&lt;p>在Apache ShardingSphere中，很多功能实现类的加载方式是通过SPI注入的方式完成的。 Service Provider Interface （SPI）是Java提供的一套被第三方实现或扩展的API，它可以用于实现框架扩展或 组件替换。&lt;/p>
&lt;p>本节汇总了Apache ShardingSphere所有通过SPI方式载入的功能模块。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>SQL解析&lt;/p>
&lt;p>SQL解析的接口用于规定用于解析SQL的ANTLR语法文件。&lt;/p>
&lt;p>主要接口是SQLParserEntry，其内置实现类有MySQLParserEntry, PostgreSQLParserEntry, SQLServerParserEntry和OracleParserEntry。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据库协议&lt;/p>
&lt;p>数据库协议的接口用于Sharding-Proxy解析与适配访问数据库的协议。&lt;/p>
&lt;p>主要接口是DatabaseProtocolFrontendEngine，其内置实现类有&lt;/p>
&lt;p>MySQLProtocolFrontendEngine和PostgreSQLProtocolFrontendEngine。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据脱敏&lt;/p>
&lt;p>数据脱敏的接口用于规定加解密器的加密、解密、类型获取、属性设置等方式。&lt;/p>
&lt;p>主要接口有两个：Encryptor和QueryAssistedEncryptor，其中Encryptor的内置实现类有 AESEncryptor和MD5Encryptor。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分布式主键&lt;/p>
&lt;p>分布式主键的接口主要用于规定如何生成全局性的自增、类型获取、属性设置等。&lt;/p>
&lt;p>主要接口为ShardingKeyGenerator，其内置实现类有UUIDShardingKeyGenerator和 SnowflakeShardingKeyGenerator。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分布式事务&lt;/p>
&lt;p>分布式事务的接口主要用于规定如何将分布式事务适配为本地事务接口。&lt;/p>
&lt;p>主要接口为ShardingTransactionManager，其内置实现类有XAShardingTransactionManager和 SeataATShardingTransactionManager。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>XA事务管理器&lt;/p>
&lt;p>XA事务管理器的接口主要用于规定如何将XA事务的实现者适配为统一的XA事务接口。 主要接口为XATransactionManager，其内置实现类有AtomikosTransactionManager, NarayanaXATransactionManager和BitronixXATransactionManager。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>注册中心&lt;/p>
&lt;p>注册中心的接口主要用于规定注册中心初始化、存取数据、更新数据、监控等行为。&lt;/p>
&lt;p>主要接口为RegistryCenter，其内置实现类有Zookeeper。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="编排治理剖析">编排治理剖析&lt;/h2>
&lt;p>编排治理模块提供配置中心/注册中心（以及规划中的元数据中心）、配置动态化、数据库熔断禁用、 调用链路等治理能力。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>配置中心&lt;/p>
&lt;p>配置集中化：越来越多的运行时实例，使得散落的配置难于管理，配置不同步导致的问题十分严 重。将配置集中于配置中心，可以更加有效进行管理。
配置动态化：配置修改后的分发，是配置中心可以提供的另一个重要能力。它可支持数据源、表与 分片及读写分离策略的动态切换。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>配置中心数据结构&lt;/p>
&lt;p>配置中心在定义的命名空间的config下，以YAML格式存储，包括数据源，数据分片，读写分 离、Properties配置，可通过修改节点来实现对于配置的动态管理。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-145735-0197.png" alt="20201224-145735-0197.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>config/authentication&lt;/p>
&lt;pre>&lt;code>password: root
username: root
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>config/sharding/props&lt;/p>
&lt;pre>&lt;code>sql.show: true
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>config/schema/schemeName/datasource&lt;/p>
&lt;p>多个数据库连接池的集合，不同数据库连接池属性自适配（例如：DBCP，C3P0，Druid, HikariCP）。&lt;/p>
&lt;pre>&lt;code>ds_0:
dataSourceClassName: com.zaxxer.hikari.HikariDataSource
properties:
url: jdbc:mysql://127.0.0.1:3306/lagou1?
serverTimezone=UTC&amp;amp;useSSL=false
password: root
username: root
maxPoolSize: 50 minPoolSize: 1
ds_1:
dataSourceClassName: com.zaxxer.hikari.HikariDataSource
properties:
url: jdbc:mysql://127.0.0.1:3306/lagou2?
serverTimezone=UTC&amp;amp;useSSL=false
password: root
username: root
maxPoolSize: 50
minPoolSize: 1
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>config/schema/sharding_db/rule&lt;/p>
&lt;p>数据分片配置，包括数据分片配置。&lt;/p>
&lt;pre>&lt;code>tables:
b_order:
actualDataNodes: ds_$-&amp;gt;{0..1}.b_order_$-&amp;gt;{0..1}
databaseStrategy:
inline:
shardingColumn: user_id
algorithmExpression: ds_$-&amp;gt;{user_id % 2}
keyGenerator:
column: order_id
logicTable: b_order
tableStrategy:
inline:
shardingColumn: order_id
algorithmExpression: b_order_$-&amp;gt;{order_id % 2}
b_order_item:
actualDataNodes: ds_$-&amp;gt;{0..1}.b_order_item_$-&amp;gt;{0..1}
databaseStrategy:
inline:
shardingColumn: user_id
algorithmExpression: ds_$-&amp;gt;{user_id % 2}
keyGenerator:
column: order_item_id
logicTable: b_order_item
tableStrategy:
inline:
shardingColumn: order_id
algorithmExpression: b_order_item_$-&amp;gt;{order_id % 2}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>config/schema/masterslave/rule读写分离独立使用时使用该配置。&lt;/p>
&lt;pre>&lt;code>name: ds_ms
masterDataSourceName: master
slaveDataSourceNames:
- ds_slave0
- ds_slave1
loadBalanceAlgorithmType: ROUND_ROBIN
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>动态生效&lt;/p>
&lt;p>在注册中心上修改、删除、新增相关配置，会动态推送到生产环境并立即生效。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>注册中心&lt;/p>
&lt;p>相对于配置中心管理配置数据，注册中心存放运行时的动态/临时状态数据，比如可用的proxy的实例，需要禁用或熔断的datasource实例。通过注册中心，可以提供熔断数据库访问程序对数据库 的访问和禁用从库的访问的编排治理能力。治理仍然有大量未完成的功能（比如流控等）&lt;/p>
&lt;ul>
&lt;li>
&lt;p>注册中心数据结构&lt;/p>
&lt;p>注册中心在定义的命名空间的state下，创建数据库访问对象运行节点，用于区分不同数据库 访问实例。包括instances和datasources节点。&lt;/p>
&lt;pre>&lt;code>instances
├──your_instance_ip_a@-@your_instance_pid_x
├──your_instance_ip_b@-@your_instance_pid_y
├──....
datasources
├──ds0
├──ds1
├──....
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>state/instances&lt;/p>
&lt;p>数据库访问对象运行实例信息，子节点是当前运行实例的标识。 运行实例标识由运行服务器 的IP地址和PID构成。运行实例标识均为临时节点，当实例上线时注册，下线时自动清理。 注册中心监控这些节点的变化来治理运行中实例对数据库的访问等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>state/datasources&lt;/p>
&lt;p>可以控制读写分离，可动态添加删除以及禁用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>熔断实例&lt;/p>
&lt;p>可在IP地址@-@PID节点写入DISABLED（忽略大小写）表示禁用该实例，删除DISABLED表示启用。&lt;/p>
&lt;p>Zookeeper命令如下：&lt;/p>
&lt;pre>&lt;code>[zk: localhost:2181(CONNECTED) 0] set /your_zk_namespace/your_app_name/state/instances/your_instance_ip_a@@your_instance_pid_x DISABLED
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>禁用从库&lt;/p>
&lt;p>在读写分离场景下，可在数据源名称子节点中写入DISABLED表示禁用从库数据源，删除 DISABLED或节点表示启用。&lt;/p>
&lt;p>Zookeeper命令如下：&lt;/p>
&lt;pre>&lt;code>[zk: localhost:2181(CONNECTED) 0] set
/your_zk_namespace/your_app_name/state/datasources/your_slave_datasource_nam e DISABLED
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>支持的配置中心和注册中心&lt;/p>
&lt;p>ShardingSphere在数据库治理模块使用SPI方式载入数据到配置中心/注册中心，进行实例熔断和 数据库禁用。 目前，ShardingSphere内部支持Zookeeper和Etcd这种常用的配置中心/注册中心。 此外，您可以使用其他第三方配置中心/注册中心，例如Apollo、Nacos等，并通过SPI的方式 注入到ShardingSphere，从而使用该配置中心/注册中心，实现数据库治理功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>应用性能监控&lt;/p>
&lt;p>APM是应用性能监控的缩写。目前APM的主要功能着眼于分布式系统的性能诊断，其主要功能包 括调用链展示，应用拓扑分析等。&lt;/p>
&lt;p>ShardingSphere并不负责如何采集、存储以及展示应用性能监控的相关数据，而是将SQL解析与 SQL执行这两块数据分片的最核心的相关信息发送至应用性能监控系统，并交由其处理。 换句话 说，ShardingSphere仅负责产生具有价值的数据，并通过标准协议递交至相关系统。 ShardingSphere可以通过两种方式对接应用性能监控系统。&lt;/p>
&lt;ul>
&lt;li>使用OpenTracing API发送性能追踪数据。面向OpenTracing协议的APM产品都可以和 ShardingSphere自动对接，比如SkyWalking，Zipkin和Jaeger。&lt;/li>
&lt;li>使用SkyWalking的自动探针。 ShardingSphere团队与SkyWalking团队共同合作，在 SkyWalking中实现了ShardingSphere自动探针，可以将相关的应用性能数据自动发送到 SkyWalking中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="sharding-proxy实战">Sharding-Proxy实战&lt;/h2>
&lt;p>Sharding-Proxy是ShardingSphere的第二个产品，定位为透明化的数据库代理端，提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持。 目前先提供MySQL版本，它可以使用任何兼容MySQL协议的访问客户端(如：MySQL Command Client, MySQL Workbench等操作数据，对DBA更 加友好。&lt;/p>
&lt;ul>
&lt;li>向应用程序完全透明，可直接当做MySQL使用&lt;/li>
&lt;li>适用于任何兼容MySQL协议的客户端&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201224-141308-0645.png" alt="20201224-141308-0645.png">&lt;/p>
&lt;p>Sharding-Proxy的优势在于对异构语言的支持，以及为DBA提供可操作入口。&lt;/p>
&lt;p>&lt;strong>Sharding-Proxy使用过程：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>下载Sharding-Proxy的最新发行版；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>解压缩后修改conf/server.yaml和以config-前缀开头的文件，进行分片规则、读写分离规则配置&lt;/p>
&lt;p>编辑%SHARDING_PROXY_HOME%\conf\config-xxx.yaml&lt;/p>
&lt;p>编辑%SHARDING_PROXY_HOME%\conf\server.yaml&lt;/p>
&lt;/li>
&lt;li>
&lt;p>引入依赖jar&lt;/p>
&lt;p>如果后端连接MySQL数据库，需要下载MySQL驱动， 解压缩后将mysql-connector-java5.1.48.jar拷贝到${sharding-proxy}\lib目录。&lt;/p>
&lt;p>如果后端连接PostgreSQL数据库，不需要引入额外依赖。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Linux操作系统请运行bin/start.sh，Windows操作系统请运行bin/start.bat启动Sharding-Proxy。&lt;/p>
&lt;p>使用默认配置启动：${sharding-proxy}\bin\start.sh&lt;/p>
&lt;p>配置端口启动：${sharding-proxy}\bin\start.sh ${port}&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用客户端工具连接。如: mysql -h 127.0.0.1 -P 3307 -u root -p root&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>若想使用Sharding-Proxy的数据库治理功能，则需要使用注册中心实现实例熔断和从库禁用功能。 Sharding-Proxy默认提供了Zookeeper的注册中心解决方案。只需按照配置规则进行注册中心的配置， 即可使用。&lt;/p>
&lt;p>&lt;strong>注意事项&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Sharding-Proxy 默认不支持hint，如需支持，请在conf/server.yaml中，将props的属性 proxy.hint.enabled设置为true。在Sharding-Proxy中，HintShardingAlgorithm的泛型只能是 String类型。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Sharding-Proxy默认使用3307端口，可以通过启动脚本追加参数作为启动端口号。如: bin/start.sh 3308&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Sharding-Proxy使用conf/server.yaml配置注册中心、认证信息以及公用属性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Sharding-Proxy支持多逻辑数据源，每个以&amp;quot;config-&amp;quot;做前缀命名yaml配置文件，即为一个逻辑数据源。&lt;/p>
&lt;/li>
&lt;/ul></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category><category domain="https://chuchin.cn/tags/shardingsphere/">ShardingSphere</category></item><item><title>MySQL 分库分表 背景</title><link>https://chuchin.cn/tech/storage/mysql/mysql-segmentation-background/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-segmentation-background/</guid><pubDate>Thu, 17 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h2 id="背景描述">背景描述&lt;/h2>
&lt;ul>
&lt;li>刚开始我们的系统只用了单机数据库&lt;/li>
&lt;li>随着用户的不断增多，考虑到系统的高可用和越来越多的用户请求，我们开始使用数据库主从架构&lt;/li>
&lt;li>当用户量级和业务进一步提升后，写请求越来越多，这时我们开始使用了分库分表&lt;/li>
&lt;/ul>
&lt;h2 id="遇到的问题">遇到的问题&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>用户请求量太大&lt;/p>
&lt;p>单服务器TPS、内存、IO都是有上限的，需要将请求打散分布到多个服务器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>单库数据量太大&lt;/p>
&lt;p>单个数据库处理能力有限；单库所在服务器的磁盘空间有限；单库上的操作IO有瓶颈&lt;/p>
&lt;/li>
&lt;li>
&lt;p>单表数据量太大&lt;/p>
&lt;p>查询、插入、更新操作都会变慢，在加字段、加索引、机器迁移都会产生高负载，影响服务&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="如何解决">如何解决&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>垂直拆分&lt;/p>
&lt;ul>
&lt;li>
&lt;p>垂直分库&lt;/p>
&lt;p>微服务架构时，业务切割得足够独立，数据也会按照业务切分，保证业务数据隔离，大大提升了数据库的吞吐能力&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201218-155312-0109.png" alt="20201218-155312-0109.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>垂直分表&lt;/p>
&lt;p>表中字段太多且包含大字段的时候，在查询时对数据库的IO、内存会受到影响，同时更新数据时，产生的binlog文件会很大，MySQL在主从同步时也会有延迟的风险&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201218-152720-0333.png" alt="20201218-152720-0333.png">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>水平拆分&lt;/p>
&lt;ul>
&lt;li>
&lt;p>水平分表&lt;/p>
&lt;p>针对数据量巨大的单张表（比如订单表），按照规则把一张表的数据切分到多张表里面去。 但是这些表还是在同一个库中，所以库级别的数据库操作还是有IO瓶颈。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201218-154527-0060.png" alt="20201218-154527-0060.png">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>水平分表规则&lt;/p>
&lt;ul>
&lt;li>
&lt;p>RANGE&lt;/p>
&lt;ul>
&lt;li>时间：按照年、月、日去切分。例如order_2020、order_202005、order_20200501&lt;/li>
&lt;li>地域：按照省或市去切分。例如order_beijing、order_shanghai、order_chengdu&lt;/li>
&lt;li>大小：从0到1000000一个表。例如1000001-2000000放一个表，每100万放一个表&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>HASH&lt;/p>
&lt;ul>
&lt;li>
&lt;p>用户ID取模&lt;/p>
&lt;p>不同的业务使用的切分规则是不一样，就上面提到的切分规则，举例如下：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>站内信&lt;/p>
&lt;ul>
&lt;li>用户维度：用户只能看到发送给自己的消息，其他用户是不可见的，这种情况下是按照用户ID hash分库，在用户查看历史记录翻页查询时，所有的查询请求都在同一个库内&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>用户表&lt;/p>
&lt;ul>
&lt;li>
&lt;p>范围法：以用户ID为划分依据，将数据水平切分到两个数据库实例，如：1到1000W在 一张表，1000W到2000W在一张表，这种情况会出现单表的负载较高&lt;/p>
&lt;/li>
&lt;li>
&lt;p>按照用户ID HASH尽量保证用户数据均衡分到数据库中&lt;/p>
&lt;blockquote>
&lt;p>如果在登录场景下，用户输入手机号和验证码进行登录，这种情况下，登录时是 不是需要扫描所有分库的信息？ 最终方案：用户信息采用ID做切分处理，同时存储用户ID和手机号的映射的关系 表（新增一个关系表），关系表采用手机号进行切分。可以通过关系表根据手机 号查询到对应的ID，再定位用户信息。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>流水表&lt;/p>
&lt;ul>
&lt;li>时间维度：可以根据每天新增的流水来判断，选择按照年份分库，还是按照月份分库， 甚至也可以按照日期分库&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>订单表&lt;/p>
&lt;p>在拉勾网，求职者（下面统称C端用户）投递企业（下面统称B端用户）的职位产生的记录称 之为订单表。在线上的业务场景中，C端用户看自己的投递记录，每次的投递到了哪个状态， B端用户查看自己收到的简历，对于合适的简历会进行下一步沟通，同一个公司内的员工可以协作处理简历。&lt;/p>
&lt;p>如何能同时满足C端和B端对数据查询，不进行跨库处理？&lt;/p>
&lt;p>最终方案：为了同时满足两端用户的业务场景，采用空间换时间，将一次的投递记录存为两份，C端的投递记录以用户ID为分片键，B端收到的简历按照公司ID为分片键&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201218-150644-0519.png" alt="20201218-150644-0519.png">&lt;/p>
&lt;ul>
&lt;li>主键选择
&lt;ul>
&lt;li>UUID：本地生成，不依赖数据库，缺点就是作为主键性能太差&lt;/li>
&lt;li>SNOWFLAKE：百度UidGenerator、美团Leaf、基于SNOWFLAKE算法实现&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>数据一致性
&lt;ul>
&lt;li>强一致性：XA协议&lt;/li>
&lt;li>最终一致性：TCC、saga、Seata&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>数据库扩容
&lt;ul>
&lt;li>成倍增加数据节点，实现平滑扩容&lt;/li>
&lt;li>成倍扩容以后，表中的部分数据请求已被路由到其他节点上面，可以清理掉&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>业务层改造
&lt;ul>
&lt;li>基于代理层方式：Mycat、Sharding-Proxy、MySQL Proxy&lt;/li>
&lt;li>基于应用层方式：Sharding-jdbc&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>分库后面临的问题
&lt;ul>
&lt;li>事务问题：一次投递需要插入两条记录，且分布在不同的服务器上，数据需要保障一致性。&lt;/li>
&lt;li>跨库跨表的join问题
&lt;ul>
&lt;li>全局表（字典表）：基础数据/配置数据，所有库都拷贝一份&lt;/li>
&lt;li>字段冗余：可以使用字段冗余就不用join查询了&lt;/li>
&lt;li>系统层组装：可以在业务层分别查询出来，然后组装起来，逻辑较复杂&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>额外的数据管理负担和数据运算压力：数据库扩容、维护成本变高&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>水平分库&lt;/p>
&lt;p>将单张表的数据切分到多个服务器上去，每个服务器具有相应的库与表，只是表中数据集合不同。 水平分库分表能够有效的缓解单机和单库的性能瓶颈和压力，突破IO、连接数、硬件资源等的瓶颈&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201218-153734-0577.png" alt="20201218-153734-0577.png">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>水平分库规则&lt;/p>
&lt;p>不跨库、不跨表，保证同一类的数据都在同一个服务器上面。&lt;/p>
&lt;p>数据在切分之前，需要考虑如何高效的进行数据获取，如果每次查询都要跨越多个节点，就需要谨慎使用。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category></item><item><title>MySQL 集群 分库分表</title><link>https://chuchin.cn/tech/storage/mysql/mysql-cluster-segmentation/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-cluster-segmentation/</guid><pubDate>Wed, 16 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>互联网系统需要处理大量用户的请求。比如微信日活用户破10亿，海量的用户每天产生海量的数量；美 团外卖，每天都是几千万的订单，那这些系统的用户表、订单表、交易流水表等是如何处理呢？
数据量只增不减，历史数据又必须要留存，非常容易成为性能的瓶颈，而要解决这样的数据库瓶颈问 题，“读写分离”和缓存往往都不合适，目前比较普遍的方案就是使用NoSQL/NewSQL或者采用分库分表。&lt;/p>
&lt;p>使用分库分表时，主要有垂直拆分和水平拆分两种拆分模式，都属于物理空间的拆分。&lt;/p>
&lt;p>分库分表方案：只分库、只分表、分库又分表。&lt;/p>
&lt;p>垂直拆分：由于表数量多导致的单个库大。将表拆分到多个库中。&lt;/p>
&lt;p>水平拆分：由于表记录多导致的单个库大。将表记录拆分到多个表中。&lt;/p>
&lt;h2 id="拆分方式">拆分方式&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>垂直拆分&lt;/strong>&lt;/p>
&lt;p>垂直拆分又称为纵向拆分，垂直拆分是将表按库进行分离，或者修改表结构按照访问的差异将某些列拆分出去。应用时有垂直分库和垂直分表两种方式，一般谈到的垂直拆分主要指的是垂直分库。&lt;/p>
&lt;p>如下图所示，采用垂直分库，将用户表和订单表拆分到不同的数据库中。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201214-151953-0492.png" alt="20201214-151953-0492.png">&lt;/p>
&lt;p>垂直分表就是将一张表中不常用的字段拆分到另一张表中，从而保证第一张表中的字段较少，避免 出现数据库跨页存储的问题，从而提升查询效率。&lt;/p>
&lt;p>解决：一个表中字段过多，还有有些字段经常使用，有些字段不经常使用，或者还有text等字段信息。可以考虑使用垂直分表方案。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201214-152954-0695.png" alt="20201214-152954-0695.png">&lt;/p>
&lt;p>按列进行垂直拆分，即把一条记录分开多个地方保存，每个子表的行数相同。把主键和一些列放到一个表，然后把主键和另外的列放到另一个表中。&lt;/p>
&lt;p>&lt;strong>垂直拆分优点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>拆分后业务清晰，拆分规则明确；&lt;/li>
&lt;li>易于数据的维护和扩展；&lt;/li>
&lt;li>可以使得行数据变小，一个数据块 (Block) 就能存放更多的数据，在查询时就会减少 I/O 次数；&lt;/li>
&lt;li>可以达到最大化利用 Cache 的目的，具体在垂直拆分的时候可以将不常变的字段放一起，将经常改变的放一起；&lt;/li>
&lt;li>便于实现冷热分离的数据表设计模式。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>垂直拆分缺点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>主键出现冗余，需要管理冗余列；&lt;/li>
&lt;li>会引起表连接 JOIN 操作，可以通过在业务服务器上进行 join 来减少数据库压力，提高了系统的复杂度；&lt;/li>
&lt;li>依然存在单表数据量过大的问题；&lt;/li>
&lt;li>事务处理复杂。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>水平拆分&lt;/strong>&lt;/p>
&lt;p>水平拆分又称为横向拆分。 相对于垂直拆分，它不再将数据根据业务逻辑分类，而是通过某个字段（或某几个字段），根据某种规则将数据分散至多个库或表中，每个表仅包含数据的一部分，如下图所示。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201214-164006-0610.png" alt="20201214-164006-0610.png">&lt;/p>
&lt;p>水平分表是将一张含有很多记录数的表水平切分，不同的记录可以分开保存，拆分成几张结构相同的表。如果一张表中的记录数过多，那么会对数据库的读写性能产生较大的影响，虽然此时仍然能 够正确地读写，但读写的速度已经到了业务无法忍受的地步，此时就需要使用水平分表来解决这个问题。&lt;/p>
&lt;p>水平拆分：解决表中记录过多问题。&lt;/p>
&lt;p>垂直拆分：解决表过多或者是表字段过多问题。&lt;/p>
&lt;p>水平拆分重点考虑拆分规则：例如范围、时间或Hash算法等。&lt;/p>
&lt;p>&lt;strong>水平拆分优点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>拆分规则设计好，join 操作基本可以数据库做；&lt;/li>
&lt;li>不存在单库大数据，高并发的性能瓶颈；&lt;/li>
&lt;li>切分的表的结构相同，应用层改造较少，只需要增加路由规则即可；&lt;/li>
&lt;li>提高了系统的稳定性和负载能力。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>水平拆分缺点&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>拆分规则难以抽象；&lt;/li>
&lt;li>跨库Join性能较差；&lt;/li>
&lt;li>分片事务的一致性难以解决；&lt;/li>
&lt;li>数据扩容的难度和维护量极大。&lt;/li>
&lt;/ul>
&lt;p>日常工作中，我们通常会同时使用两种拆分方式，垂直拆分更偏向于产品/业务/功能拆分的过程，在技术上我们更关注水平拆分的方案。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="主键策略">主键策略&lt;/h2>
&lt;p>在很多中小项目中，我们往往直接使用数据库自增特性来生成主键ID，这样确实比较简单。而在分库分表的环境中，数据分布在不同的数据表中，不能再借助数据库自增长特性直接生成，否则会造成不同数据表主键重复。下面介绍几种ID生成算法。&lt;/p>
&lt;h3 id="uuid">UUID&lt;/h3>
&lt;p>UUID是通用唯一识别码（Universally Unique Identifier）的缩写，长度是16个字节，被表示为 32个十六进制数字，以“ - ”分隔的五组来显示，格式为8-4-4-4-12，共36个字符，例如： 550e8400-e29b-41d4-a716-446655440000。UUID在生成时使用到了以太网卡地址、纳秒级时 间、芯片ID码和随机数等信息，目的是让分布式系统中的所有元素都能有唯一的识别信息。&lt;/p>
&lt;p>使用UUID做主键，可以在本地生成，没有网络消耗，所以生成性能高。但是UUID比较长，没有规律性，耗费存储空间。&lt;/p>
&lt;blockquote>
&lt;p>All indexes other than the clustered index are known as secondary indexes. In InnoDB, each record in a secondary index contains the primary key columns for the row, as well as the columns specified for the secondary index. InnoDB uses this primary key value to search for the row in the clustered index. If the primary key is long, the secondary indexes use more space, so it is advantageous to have a short primary key.&lt;/p>
&lt;p>除聚集索引以外的所有索引都称为辅助索引。在InnoDB中，二级索引中的每条记录都包含行的主键列，以及为二级索引指定的列。InnoDB使用这个主键值来搜索聚集索引中的行。如果主键是长 的，则次索引使用更多的空间，因此主键短是有利的。&lt;/p>
&lt;/blockquote>
&lt;p>如果UUID作为数据库主键，在InnoDB引擎下，UUID的无序性可能会引起数据位置频繁变动，影响性能。&lt;/p>
&lt;h3 id="combuuid变种">COMB（UUID变种）&lt;/h3>
&lt;p>COMB（combine）型是数据库特有的一种设计思想，可以理解为一种改进的GUID，它通过组合 GUID和系统时间，以使其在索引和检索事有更优的性能。数据库中没有COMB类型，它是Jimmy Nilsson在他的“The Cost of GUIDs as Primary Keys”一文中设计出来的。 COMB设计思路是这样的：既然UniqueIdentifier数据因毫无规律可言造成索引效率低下，影响了系统的性能，那么我们能不能通过组合的方式，保留UniqueIdentifier的前10个字节，用后6个字节表示GUID生成的时间（DateTime），这样我们将时间信息与UniqueIdentifier组合起来，在保留UniqueIdentifier的唯一性的同时增加了有序性，以此来提高索引效率。解决UUID无序的问 题，性能优于UUID。&lt;/p>
&lt;h3 id="snowflake">SNOWFLAKE&lt;/h3>
&lt;p>有些时候我们希望能使用一种简单一些的ID，并且希望ID能够按照时间有序生成，SnowFlake解决 了这种需求。SnowFlake是Twitter开源的分布式ID生成算法，结果是一个long型的ID，long型是8 个字节，64-bit。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号，最后还有一个符号位，永远是0。如下图所 示：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/d8dc3cec4df28130971aa645c633035fb5534a67/20201214-161224-0914.png" alt="20201214-164006-0610.png">&lt;/p>
&lt;p>SnowFlake生成的ID整体上按照时间自增排序，并且整个分布式系统内不会产生ID重复，并且效率 较高。经测试SnowFlake每秒能够产生26万个ID。缺点是强依赖机器时钟，如果多台机器环境时 钟没同步，或时钟回拨，会导致发号重复或者服务会处于不可用状态。因此一些互联网公司也基于 上述的方案做了封装，例如百度的uidgenerator（基于SnowFlake）和美团的leaf（基于数据库和 SnowFlake）等。&lt;/p>
&lt;h3 id="数据库id表">数据库ID表&lt;/h3>
&lt;p>比如A表分表为A1表和A2表，我们可以单独的创建一个MySQL数据库，在这个数据库中创建一张 表，这张表的ID设置为自动递增，其他地方需要全局唯一ID的时候，就先向这个这张表中模拟插 入一条记录，此时ID就会自动递增，然后我们获取刚生成的ID后再进行A1和A2表的插入。 例如，下面DISTRIBUTE_ID就是我们创建要负责ID生成的表，结构如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">DISTRIBUTE_ID&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">bigint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">AUTO_INCREMENT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">COMMENT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;主键&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">createtime&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">datetime&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ENGINE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">InnoDB&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">CHARSET&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">utf8&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当分布式集群环境中哪个应用需要获取一个全局唯一的分布式ID的时候，就可以使用代码连接这个数据库实例，执行如下SQL语句即可。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">DISTRIBUTE_ID&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">createtime&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NOW&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">LAST_INSERT_ID&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="err">；&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>这里的createtime字段无实际意义，是为了随便插入一条数据以至于能够自动递增ID。&lt;/li>
&lt;li>使用独立的MySQL实例生成分布式ID，虽然可行，但是性能和可靠性都不够好，因为你需要 代
码连接到数据库才能获取到ID，性能无法保障，另外mysql数据库实例挂掉了，那么就无法获取分布式ID了。&lt;/li>
&lt;/ul>
&lt;h3 id="redis生成id">Redis生成ID&lt;/h3>
&lt;p>当使用数据库来生成ID性能不够要求的时候，我们可以尝试使用Redis来生成ID。这主要依赖于 Redis是单线程的，所以也可以用生成全局唯一的ID。可以用Redis的原子操作 INCR和INCRBY来实现。&lt;/p>
&lt;p>也可以使用Redis集群来获取更高的吞吐量。假如一个集群中有5台Redis。可以初始化每台Redis 的值分别是1,2,3,4,5，然后步长都是5。各个Redis生成的ID为：&lt;/p>
&lt;pre>&lt;code>A：1,6,11,16,21
B：2,7,12,17,22
C：3,8,13,18,23
D：4,9,14,19,24
E：5,10,15,20,25
&lt;/code>&lt;/pre>&lt;h2 id="分片策略">分片策略&lt;/h2>
&lt;h3 id="分片概念">分片概念&lt;/h3>
&lt;p>分片（Sharding）就是用来确定数据在多台存储设备上分布的技术。Shard这个词的意思是“碎片”，如 果将一个数据库当作一块大玻璃，将这块玻璃打碎，那么每一小块都称为数据库的碎片（Database Sharding）。将一个数据库打碎成多个的过程就叫做分片，分片是属于横向扩展方案。&lt;/p>
&lt;p>分片：表示分配过程，是一个逻辑上概念，表示如何实现&lt;/p>
&lt;p>分库分表：表示分配结果，是一个物理上概念，表示最终实现的结果&lt;/p>
&lt;p>数据库扩展方案：&lt;/p>
&lt;ul>
&lt;li>横向扩展：一个库变多个库，加机器数量&lt;/li>
&lt;li>纵向扩展：一个库还是一个库，优化机器性能，加高配CPU或内存&lt;/li>
&lt;/ul>
&lt;p>在分布式存储系统中，数据需要分散存储在多台设备上，分片就是把数据库横向扩展到多个数据库服务 器上的一种有效的方式，其主要目的就是为突破单节点数据库服务器的 I/O 能力限制，解决数据库扩展性问题。&lt;/p>
&lt;h3 id="分片策略-1">分片策略&lt;/h3>
&lt;p>数据分片是根据指定的分片键和分片策略将数据水平拆分，拆分成多个数据片后分散到多个数据存储节点中。分片键是用于划分和定位表的字段，一般使用ID或者时间字段。而分片策略是指分片的规则，常 用规则有以下几种。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>基于范围分片&lt;/p>
&lt;p>根据特定字段的范围进行拆分，比如用户ID、订单时间、产品价格等。例如：&lt;/p>
&lt;p>{[1 - 100] =&amp;gt; Cluster A, [101 - 199] =&amp;gt; Cluster B}&lt;/p>
&lt;p>优点：新的数据可以落在新的存储节点上，如果集群扩容，数据无需迁移。&lt;/p>
&lt;p>缺点：数据热点分布不均，数据冷热不均匀，导致节点负荷不均。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>哈希取模分片&lt;/p>
&lt;p>整型的Key可直接对设备数量取模，其他类型的字段可以先计算Key的哈希值，然后再对设备数量 取模。假设有n台设备，编号为0 ~ n-1，通过Hash(Key) % n就可以确定数据所在的设备编号。该 模式也称为离散分片。&lt;/p>
&lt;p>优点：实现简单，数据分配比较均匀，不容易出现冷热不均，负荷不均的情况。&lt;/p>
&lt;p>缺点：扩容时会产生大量的数据迁移，比如从n台设备扩容到n+1，绝大部分数据需要重新分配和 迁移。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一致性哈希分片&lt;/p>
&lt;p>采用Hash取模的方式进行拆分，后期集群扩容需要迁移旧的数据。使用一致性Hash算法能够很大 程度的避免这个问题，所以很多中间件的集群分片都会采用一致性Hash算法。&lt;/p>
&lt;p>一致性Hash是将数据按照特征值映射到一个首尾相接的Hash环上，同时也将节点（按照IP地址或 者机器名Hash）映射到这个环上。对于数据，从数据在环上的位置开始，顺时针找到的第一个节 点即为数据的存储节点。Hash环示意图与数据的分布如下：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201218-141750-0114.png" alt="20201218-141750-0114.png">&lt;/p>
&lt;p>一致性Hash在增加或者删除节点的时候，受到影响的数据是比较有限的，只会影响到Hash环相邻的节点，不会发生大规模的数据迁移。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="扩容方案">扩容方案&lt;/h2>
&lt;p>当系统用户进入了高速增长期时，即便是对数据进行分库分表，但数据库的容量，还有表的数据量也总 会达到天花板。当现有数据库达到承受极限时，就需要增加新服务器节点数量进行横向扩容。&lt;/p>
&lt;p>首先来思考一下，横向扩展会有什么技术难度？&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201218-144056-0137.png" alt="20201218-144056-0137.png">&lt;/p>
&lt;ul>
&lt;li>数据迁移问题&lt;/li>
&lt;li>分片规则改变&lt;/li>
&lt;li>数据同步、时间点、数据一致性&lt;/li>
&lt;/ul>
&lt;p>遇到上述问题时，我们可以使用以下两种方案：&lt;/p>
&lt;h3 id="停机扩容">停机扩容&lt;/h3>
&lt;p>这是一种很多人初期都会使用的方案，尤其是初期只有几台数据库的时候。停机扩容的具体步骤如下：&lt;/p>
&lt;ul>
&lt;li>站点发布一个公告，例如：“为了为广大用户提供更好的服务，本站点将在今晚00:00-2:00之间升 级，给您带来不便抱歉&amp;quot;；&lt;/li>
&lt;li>时间到了，停止所有对外服务；&lt;/li>
&lt;li>新增n个数据库，然后写一个数据迁移程序，将原有x个库的数据导入到最新的y个库中。比如分片 规则由%x变为%y；&lt;/li>
&lt;li>数据迁移完成，修改数据库服务配置，原来x个库的配置升级为y个库的配置&lt;/li>
&lt;li>重启服务，连接新库重新对外提供服务&lt;/li>
&lt;/ul>
&lt;p>回滚方案：万一数据迁移失败，需要将配置和数据回滚，改天再挂公告。&lt;/p>
&lt;p>优点：简单&lt;/p>
&lt;p>缺点：&lt;/p>
&lt;ul>
&lt;li>停止服务，缺乏高可用&lt;/li>
&lt;li>程序员压力山大，需要在指定时间完成&lt;/li>
&lt;li>如果有问题没有及时测试出来启动了服务，运行后发现问题，数据会丢失一部分，难以回滚。&lt;/li>
&lt;/ul>
&lt;p>适用场景：&lt;/p>
&lt;ul>
&lt;li>小型网站&lt;/li>
&lt;li>大部分游戏&lt;/li>
&lt;li>对高可用要求不高的服务&lt;/li>
&lt;/ul>
&lt;h3 id="平滑扩容">平滑扩容&lt;/h3>
&lt;p>数据库扩容的过程中，如果想要持续对外提供服务，保证服务的可用性，平滑扩容方案是最好的选择。 平滑扩容就是将数据库数量扩容成原来的2倍，比如：由2个数据库扩容到4个数据库，具体步骤如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>新增2个数据库&lt;/p>
&lt;/li>
&lt;li>
&lt;p>配置双主进行数据同步（先测试、后上线）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据同步完成之后，配置双主双写（同步因为有延迟，如果时时刻刻都有写和更新操作，会存在不准确问题）&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201218-153401-0764.png" alt="20201218-153401-0764.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据同步完成后，删除双主同步，修改数据库配置，并重启；&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201218-153702-0035.png" alt="20201218-153702-0035.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>此时已经扩容完成，但此时的数据并没有减少，新增的数据库跟旧的数据库一样多的数据，此时还需要写一个程序，清空数据库中多余的数据，如：&lt;/p>
&lt;p>User1去除 uid % 4 = 2的数据；&lt;/p>
&lt;p>User3去除 uid % 4 = 0的数据；&lt;/p>
&lt;p>User2去除 uid % 4 = 3的数据；&lt;/p>
&lt;p>User4去除 uid % 4 = 1的数据；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>平滑扩容方案能够实现n库扩2n库的平滑扩容，增加数据库服务能力，降低单库一半的数据量。其核心原理是：成倍扩容，避免数据迁移。&lt;/p>
&lt;p>优点：&lt;/p>
&lt;ul>
&lt;li>扩容期间，服务正常进行，保证高可用&lt;/li>
&lt;li>相对停机扩容，时间长，项目组压力没那么大，出错率低&lt;/li>
&lt;li>扩容期间遇到问题，随时解决，不怕影响线上服务&lt;/li>
&lt;li>可以将每个数据库数据量减少一半&lt;/li>
&lt;/ul>
&lt;p>缺点：&lt;/p>
&lt;ul>
&lt;li>程序复杂、配置双主同步、双主双写、检测数据同步等&lt;/li>
&lt;li>后期数据库扩容，比如成千上万，代价比较高&lt;/li>
&lt;/ul>
&lt;p>适用场景：&lt;/p>
&lt;ul>
&lt;li>大型网站&lt;/li>
&lt;li>对高可用要求高的服务&lt;/li>
&lt;/ul></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category></item><item><title>MySQL 集群 双主模式</title><link>https://chuchin.cn/tech/storage/mysql/mysql-cluster-dm/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-cluster-dm/</guid><pubDate>Tue, 15 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h2 id="适用场景">适用场景&lt;/h2>
&lt;p>很多企业刚开始都是使用MySQL主从模式，一主多从、读写分离等。但是单主如果发生单点故障，从库 切换成主库还需要作改动。因此，如果是双主或者多主，就会增加MySQL入口，提升了主库的可用性。 因此随着业务的发展，数据库架构可以由主从模式演变为双主模式。双主模式是指两台服务器互为主 从，任何一台服务器数据变更，都会通过复制应用到另外一方的数据库中。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201214-153126-0511.png" alt="20201214-153126-0511.png">&lt;/p>
&lt;p>使用双主双写还是双主单写？&lt;/p>
&lt;p>建议大家使用双主单写，因为双主双写存在以下问题：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ID冲突&lt;/p>
&lt;p>在A主库写入，当A数据未同步到B主库时，对B主库写入，如果采用自动递增容易发生ID主键的冲突。&lt;/p>
&lt;p>可以采用MySQL自身的自动增长步长来解决，例如A的主键为1,3,5,7...，B的主键为2,4,6,8... ，但 是对数据库运维、扩展都不友好。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>更新丢失&lt;/p>
&lt;p>同一条记录在两个主库中进行更新，会发生前面覆盖后面的更新丢失。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>高可用架构如下图所示，其中一个Master提供线上服务，另一个Master作为备胎供高可用切换， Master下游挂载Slave承担读请求。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201214-151128-0324.png" alt="20201214-151128-0324.png">&lt;/p>
&lt;p>随着业务发展，架构会从主从模式演变为双主模式，建议用双主单写，再引入高可用组件，例如 Keepalived和MMM等工具，实现主库故障自动切换。&lt;/p>
&lt;h2 id="mmm架构">MMM架构&lt;/h2>
&lt;p>MMM（Master-Master Replication Manager for MySQL）是一套用来管理和监控双主复制，支持双主故障切换 的第三方软件。MMM 使用Perl语言开发，虽然是双主架构，但是业务上同一时间只允许一 个节点进行写入操作。下图是基于MMM实现的双主高可用架构。&lt;/p>
&lt;p>&lt;img src="C:%5CUsers%5CChuChinRCC%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1607931042009.png" alt="1607931042009">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>MMM故障处理机制&lt;/p>
&lt;p>MMM 包含writer和reader两类角色，分别对应写节点和读节点。&lt;/p>
&lt;ul>
&lt;li>当 writer节点出现故障，程序会自动移除该节点上的VIP&lt;/li>
&lt;li>写操作切换到 Master2，并将Master2设置为writer&lt;/li>
&lt;li>将所有Slave节点会指向Master2&lt;/li>
&lt;/ul>
&lt;p>除了管理双主节点，MMM 也会管理 Slave 节点，在出现宕机、复制延迟或复制错误，MMM 会移除该节点的 VIP，直到节点恢复正常。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MMM监控机制&lt;/p>
&lt;p>MMM 包含monitor和agent两类程序，功能如下：&lt;/p>
&lt;ul>
&lt;li>monitor：监控集群内数据库的状态，在出现异常时发布切换命令，一般和数据库分开部署。&lt;/li>
&lt;li>agent：运行在每个MySQL 服务器上的代理进程，monitor 命令的执行者，完成监控的探针工作和具体服务设置，例如设置 VIP（虚拟IP）、指向新同步节点。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="mha架构">MHA架构&lt;/h2>
&lt;p>MHA（Master High Availability）是一套比较成熟的 MySQL 高可用方案，也是一款优秀的故障切换和主从提升的高可用软件。在MySQL故障切换过程中，MHA能做到在30秒之内自动完成数据库的故障切 换操作，并且在进行故障切换的过程中，MHA能在最大程度上保证数据的一致性，以达到真正意义上的高可用。MHA还支持在线快速将Master切换到其他主机，通常只需0.5－2秒。&lt;/p>
&lt;p>目前MHA主要支持一主多从的架构，要搭建MHA，要求一个复制集群中必须最少有三台数据库服务器。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201214-152833-0394.png" alt="20201214-152833-0394.png">&lt;/p>
&lt;p>MHA由两部分组成：MHA Manager（管理节点）和MHA Node（数据节点）。&lt;/p>
&lt;ul>
&lt;li>MHA Manager可以单独部署在一台独立的机器上管理多个master-slave集群，也可以部署在一台 slave节点上。负责检测master是否宕机、控制故障转移、检查MySQL复制状况等。&lt;/li>
&lt;li>MHA Node运行在每台MySQL服务器上，不管是Master角色，还是Slave角色，都称为Node，是被监控管理的对象节点，负责保存和复制master的二进制日志、识别差异的中继日志事件并将其差异的事件应用于其他的slave、清除中继日志。&lt;/li>
&lt;/ul>
&lt;p>MHA Manager会定时探测集群中的master节点，当master出现故障时，它可以自动将最新数据的 slave提升为新的master，然后将所有其他的slave重新指向新的master，整个故障转移过程对应用程序完全透明。&lt;/p>
&lt;p>MHA故障处理机制：&lt;/p>
&lt;ul>
&lt;li>把宕机master的binlog保存下来&lt;/li>
&lt;li>根据binlog位置点找到最新的slave&lt;/li>
&lt;li>用最新slave的relay log修复其它slave&lt;/li>
&lt;li>将保存下来的binlog在最新的slave上恢复&lt;/li>
&lt;li>将最新的slave提升为master&lt;/li>
&lt;li>将其它slave重新指向新提升的master，并开启主从复制&lt;/li>
&lt;/ul>
&lt;p>MHA优点：&lt;/p>
&lt;ul>
&lt;li>自动故障转移快&lt;/li>
&lt;li>主库崩溃不存在数据一致性问题&lt;/li>
&lt;li>性能优秀，支持半同步复制和异步复制&lt;/li>
&lt;li>一个Manager监控节点可以监控多个集群&lt;/li>
&lt;/ul>
&lt;h2 id="主备切换">主备切换&lt;/h2>
&lt;p>主备切换是指将备库变为主库，主库变为备库，有&lt;strong>可靠性优先&lt;/strong>和&lt;strong>可用性优先&lt;/strong>两种策略。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>主备延迟问题&lt;/p>
&lt;p>主备延迟是由主从数据同步延迟导致的，与数据同步有关的时间点主要包括以下三个：&lt;/p>
&lt;ul>
&lt;li>主库 A 执行完成一个事务，写入 binlog，我们把这个时刻记为 T1;&lt;/li>
&lt;li>之后将binlog传给备库 B，我们把备库 B 接收完 binlog 的时刻记为 T2;&lt;/li>
&lt;li>备库 B 执行完成这个binlog复制，我们把这个时刻记为 T3。&lt;/li>
&lt;/ul>
&lt;p>所谓主备延迟，就是同一个事务，在备库执行完成的时间和主库执行完成的时间之间的差值，也就是 T3-T1。&lt;/p>
&lt;p>在备库上执行show slave status命令，它可以返回结果信息，seconds_behind_master表示当前 备库延迟了多少秒。&lt;/p>
&lt;p>同步延迟主要原因如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>备库机器性能问题&lt;/p>
&lt;p>机器性能差，甚至一台机器充当多个主库的备库。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分工问题&lt;/p>
&lt;p>备库提供了读操作，或者执行一些后台分析处理的操作，消耗大量的CPU资源。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>大事务操作&lt;/p>
&lt;p>大事务耗费的时间比较长，导致主备复制时间长。比如一些大量数据的delete或大表DDL操作都可能会引发大事务。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>可靠性优先&lt;/p>
&lt;p>主备切换过程一般由专门的HA高可用组件完成，但是切换过程中会存在短时间不可用，因为在切 换过程中某一时刻主库A和从库B都处于只读状态。如下图所示：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201214-150448-0813.png" alt="20201214-150448-0813.png">&lt;/p>
&lt;p>主库由A切换到B，切换的具体流程如下：&lt;/p>
&lt;ul>
&lt;li>判断从库B的Seconds_Behind_Master值，当小于某个值才继续下一步&lt;/li>
&lt;li>把主库A改为只读状态（readonly=true）&lt;/li>
&lt;li>等待从库B的Seconds_Behind_Master值降为 0&lt;/li>
&lt;li>把从库B改为可读写状态（readonly=false）&lt;/li>
&lt;li>把业务请求切换至从库B&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>可用性优先&lt;/p>
&lt;p>不等主从同步完成， 直接把业务请求切换至从库B ，并且让从库B可读写 ，这样几乎不存在不可用时间，但可能会数据不一致。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201214-154049-0917.png" alt="20201214-154049-0917.png">&lt;/p>
&lt;p>如上图所示，在A切换到B过程中，执行两个INSERT操作，过程如下：&lt;/p>
&lt;ul>
&lt;li>主库A执行完 INSERT c=4 ，得到 (4,4) ，然后开始执行 主从切换&lt;/li>
&lt;li>主从之间有5S的同步延迟，从库B会先执行 INSERT c=5 ，得到 (4,5)&lt;/li>
&lt;li>从库B执行主库A传过来的binlog日志 INSERT c=4 ，得到 (5,4)&lt;/li>
&lt;li>主库A执行从库B传过来的binlog日志 INSERT c=5 ，得到 (5,5)&lt;/li>
&lt;li>此时主库A和从库B会有 两行 不一致的数据&lt;/li>
&lt;/ul>
&lt;p>通过上面介绍了解到，主备切换采用可用性优先策略，由于可能会导致数据不一致，所以大多数情况下，优先选择可靠性优先策略。在满足数据可靠性的前提下，MySQL的可用性依赖于同步延时的大小，同步延时越小，可用性就越高。&lt;/p>
&lt;/li>
&lt;/ul></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category></item><item><title>MySQL 集群 主从模式</title><link>https://chuchin.cn/tech/storage/mysql/mysql-cluster-ms/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-cluster-ms/</guid><pubDate>Mon, 14 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h2 id="适用场景">适用场景&lt;/h2>
&lt;p>MySQL主从模式是指数据可以从一个MySQL数据库服务器主节点复制到一个或多个从节点。MySQL 默认采用异步复制方式，这样从节点不用一直访问主服务器来更新自己的数据，从节点可以复制主数据库中的所有数据库，或者特定的数据库，或者特定的表。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201214-143242-0197.png" alt="20201214-143242-0197.png">&lt;/p>
&lt;p>mysql主从复制用途：&lt;/p>
&lt;ul>
&lt;li>实时灾备，用于故障切换（高可用）&lt;/li>
&lt;li>读写分离，提供查询服务（读扩展）&lt;/li>
&lt;li>数据备份，避免影响业务（高可用）&lt;/li>
&lt;/ul>
&lt;p>主从部署必要条件：&lt;/p>
&lt;ul>
&lt;li>从库服务器能连通主库&lt;/li>
&lt;li>主库开启binlog日志（设置log-bin参数）&lt;/li>
&lt;li>主从server-id不同&lt;/li>
&lt;/ul>
&lt;h2 id="实现原理">实现原理&lt;/h2>
&lt;h3 id="主从复制">主从复制&lt;/h3>
&lt;p>下图是主从复制的原理图。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201214-144044-0899.png" alt="20201214-144044-0899.png">&lt;/p>
&lt;p>主从复制整体分为以下三个步骤：&lt;/p>
&lt;ul>
&lt;li>主库将数据库的变更操作记录到Binlog日志文件中&lt;/li>
&lt;li>从库读取主库中的Binlog日志文件信息写入到从库的Relay Log中继日志中&lt;/li>
&lt;li>从库读取中继日志信息在从库中进行Replay,更新从库数据信息&lt;/li>
&lt;/ul>
&lt;p>在上述三个过程中，涉及了Master的BinlogDump Thread和Slave的I/O Thread、SQL Thread，它们的作用如下：&lt;/p>
&lt;ul>
&lt;li>Master服务器对数据库更改操作记录在Binlog中，BinlogDump Thread接到写入请求后，读取 Binlog信息推送给Slave的I/O Thread。&lt;/li>
&lt;li>Slave的I/O Thread将读取到的Binlog信息写入到本地Relay Log中。&lt;/li>
&lt;li>Slave的SQL Thread检测到Relay Log的变更请求，解析relay log中内容在从库上执行。&lt;/li>
&lt;/ul>
&lt;p>上述过程都是异步操作，俗称异步复制，存在数据延迟现象。&lt;/p>
&lt;p>下图是异步复制的时序图。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201214-140947-0844.png" alt="20201214-140947-0844.png">&lt;/p>
&lt;p>mysql主从复制存在的问题：&lt;/p>
&lt;ul>
&lt;li>主库宕机后，数据可能丢失&lt;/li>
&lt;li>从库只有一个SQL Thread，主库写压力大，复制很可能延时&lt;/li>
&lt;/ul>
&lt;p>解决方法：&lt;/p>
&lt;ul>
&lt;li>半同步复制---解决数据丢失的问题&lt;/li>
&lt;li>并行复制----解决从库复制延迟的问题&lt;/li>
&lt;/ul>
&lt;h3 id="半同步复制">半同步复制&lt;/h3>
&lt;p>为了提升数据安全，MySQL让Master在某一个时间点等待Slave节点的 ACK（Acknowledge character）消息，接收到ACK消息后才进行事务提交，这也是半同步复制的基础，MySQL从5.5版本开 始引入了半同步复制机制来降低数据丢失的概率。&lt;/p>
&lt;p>介绍半同步复制之前先快速过一下 MySQL 事务写入碰到主从复制时的完整过程，主库事务写入分为 4 个步骤：&lt;/p>
&lt;ul>
&lt;li>InnoDB Redo File Write (Prepare Write)&lt;/li>
&lt;li>Binlog File Flush &amp;amp; Sync to Binlog File&lt;/li>
&lt;li>nnoDB Redo File Commit（Commit Write）&lt;/li>
&lt;li>Send Binlog to Slave&lt;/li>
&lt;/ul>
&lt;p>当Master不需要关注Slave是否接受到Binlog Event时，即为传统的主从复制。&lt;/p>
&lt;p>当Master需要在第三步等待Slave返回ACK时，即为 after-commit，半同步复制（MySQL 5.5引入）。&lt;/p>
&lt;p>当Master需要在第二步等待 Slave 返回 ACK 时，即为 after-sync，增强半同步（MySQL 5.7引入）。&lt;/p>
&lt;p>下图是 MySQL 官方对于半同步复制的时序图，主库等待从库写入 relay log 并返回 ACK 后才进行 Engine Commit。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201214-145050-0441.png" alt="20201214-145050-0441.png">&lt;/p>
&lt;h2 id="并行复制">并行复制&lt;/h2>
&lt;p>MySQL的主从复制延迟一直是受开发者最为关注的问题之一，MySQL从5.6版本开始追加了并行复制功 能，目的就是为了改善复制延迟问题，并行复制称为enhanced multi-threaded slave（简称MTS）。&lt;/p>
&lt;p>在从库中有两个线程IO Thread和SQL Thread，都是单线程模式工作，因此有了延迟问题，我们可以采用多线程机制来加强，减少从库复制延迟。（IO Thread多线程意义不大，主要指的是SQL Thread多线 程）&lt;/p>
&lt;p>在MySQL的5.6、5.7、8.0版本上，都是基于上述SQL Thread多线程思想，不断优化，减少复制延迟。&lt;/p>
&lt;h3 id="mysql-56并行复制原理">MySQL 5.6并行复制原理&lt;/h3>
&lt;p>MySQL 5.6版本也支持所谓的并行复制，但是其并行只是基于库的。如果用户的MySQL数据库中是多个 库，对于从库复制的速度的确可以有比较大的帮助。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201214-144858-0090.png" alt="20201214-144858-0090.png">&lt;/p>
&lt;p>基于库的并行复制，实现相对简单，使用也相对简单些。基于库的并行复制遇到单库多表使用场景就发 挥不出优势了，另外对事务并行处理的执行顺序也是个大问题。&lt;/p>
&lt;h3 id="mysql-57并行复制原理">MySQL 5.7并行复制原理&lt;/h3>
&lt;p>MySQL 5.7是基于组提交的并行复制，MySQL 5.7才可称为真正的并行复制，这其中最为主要的原因就 是slave服务器的回放与master服务器是一致的，即master服务器上是怎么并行执行的slave上就怎样进行并行回放。不再有库的并行复制限制。&lt;/p>
&lt;p>&lt;strong>MySQL 5.7中组提交的并行复制究竟是如何实现的？&lt;/strong>&lt;/p>
&lt;p>MySQL 5.7是通过对事务进行分组，当事务提交时，它们将在单个操作中写入到二进制日志中。如果多个事务能同时提交成功，那么它们意味着没有冲突，因此可以在Slave上并行执行，所以通过在主库上 的二进制日志中添加组提交信息。&lt;/p>
&lt;p>MySQL 5.7的并行复制基于一个前提，即所有已经处于prepare阶段的事务，都是可以并行提交的。这 些当然也可以在从库中并行提交，因为处理这个阶段的事务都是没有冲突的。在一个组里提交的事务， 一定不会修改同一行。这是一种新的并行复制思路，完全摆脱了原来一直致力于为了防止冲突而做的分 发算法，等待策略等复杂的而又效率底下的工作。&lt;/p>
&lt;p>InnoDB事务提交采用的是两阶段提交模式。一个阶段是prepare，另一个是commit。&lt;/p>
&lt;p>为了兼容MySQL 5.6基于库的并行复制，5.7引入了新的变量slave-parallel-type，其可以配置的值有： DATABASE（默认值，基于库的并行复制方式）、LOGICAL_CLOCK（基于组提交的并行复制方式）。&lt;/p>
&lt;p>&lt;strong>那么如何知道事务是否在同一组中，生成的Binlog内容如何告诉Slave哪些事务是可以并行复制的？&lt;/strong>&lt;/p>
&lt;p>在MySQL 5.7版本中，其设计方式是将组提交的信息存放在GTID中。为了避免用户没有开启GTID功能 （gtid_mode=OFF），MySQL 5.7又引入了称之为Anonymous_Gtid的二进制日志event类型 ANONYMOUS_GTID_LOG_EVENT。&lt;/p>
&lt;p>通过mysqlbinlog工具分析binlog日志，就可以发现组提交的内部信息。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201214-151801-0426.png" alt="20201214-151801-0426.png">&lt;/p>
&lt;p>可以发现MySQL 5.7二进制日志较之原来的二进制日志内容多了last_committed和 sequence_number，last_committed表示事务提交的时候，上次事务提交的编号，如果事务具有相同 的last_committed，表示这些事务都在一组内，可以进行并行的回放。&lt;/p>
&lt;h3 id="mysql80-并行复制">MySQL8.0 并行复制&lt;/h3>
&lt;p>MySQL8.0 是基于write-set的并行复制。MySQL会有一个集合变量来存储事务修改的记录信息（主键哈希值），所有已经提交的事务所修改的主键值经过hash后都会与那个变量的集合进行对比，来判断改行是否与其冲突，并以此来确定依赖关系，没有冲突即可并行。这样的粒度，就到了 row级别了，此时并行的粒度更加精细，并行的速度会更快。&lt;/p>
&lt;h3 id="并行复制配置与调优">并行复制配置与调优&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>binlog_transaction_dependency_history_size&lt;/p>
&lt;p>用于控制集合变量的大小。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>binlog_transaction_depandency_tracking&lt;/p>
&lt;p>用于控制binlog文件中事务之间的依赖关系，即last_committed值。&lt;/p>
&lt;ul>
&lt;li>COMMIT_ORDERE: 基于组提交机制&lt;/li>
&lt;li>WRITESET: 基于写集合机制&lt;/li>
&lt;li>WRITESET_SESSION: 基于写集合，比writeset多了一个约束，同一个session中的事务 last_committed按先后顺序递增&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>transaction_write_set_extraction&lt;/p>
&lt;p>用于控制事务的检测算法，参数值为：OFF、 XXHASH64、MURMUR32&lt;/p>
&lt;/li>
&lt;li>
&lt;p>master_info_repository&lt;/p>
&lt;p>开启MTS功能后，务必将参数master_info_repostitory设置为TABLE，这样性能可以有50%~80% 的提升。这是因为并行复制开启后对于元master.info这个文件的更新将会大幅提升，资源的竞争 也会变大。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>slave_parallel_workers&lt;/p>
&lt;p>若将slave_parallel_workers设置为0，则MySQL 5.7退化为原单线程复制，但将 slave_parallel_workers设置为1，则SQL线程功能转化为coordinator线程，但是只有1个worker 线程进行回放，也是单线程复制。然而，这两种性能却又有一些的区别，因为多了一次 coordinator线程的转发，因此slave_parallel_workers=1的性能反而比0还要差。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>slave_preserve_commit_order&lt;/p>
&lt;p>MySQL 5.7后的MTS可以实现更小粒度的并行复制，但需要将slave_parallel_type设置为 LOGICAL_CLOCK，但仅仅设置为LOGICAL_CLOCK也会存在问题，因为此时在slave上应用事务的 顺序是无序的，和relay log中记录的事务顺序不一样，这样数据一致性是无法保证的，为了保证事 务是按照relay log中记录的顺序来回放，就需要开启参数slave_preserve_commit_order。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>要开启enhanced multi-threaded slave其实很简单，只需根据如下设置：&lt;/p>
&lt;pre>&lt;code>slave-parallel-type=LOGICAL_CLOCK
slave-parallel-workers=16
slave_pending_jobs_size_max = 2147483648
slave_preserve_commit_order=1
master_info_repository=TABLE
relay_log_info_repository=TABLE
relay_log_recovery=ON
&lt;/code>&lt;/pre>&lt;h3 id="并行复制监控">并行复制监控&lt;/h3>
&lt;p>在使用了MTS后，复制的监控依旧可以通过SHOW SLAVE STATUS\G，但是MySQL 5.7在 performance_schema库中提供了很多元数据表，可以更详细的监控并行复制过程。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201214-154010-0347.png" alt="20201214-154010-0347.png">&lt;/p>
&lt;p>通过replication_applier_status_by_worker可以看到worker进程的工作情况：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201214-153311-0519.png" alt="20201214-153311-0519.png">&lt;/p>
&lt;p>最后，如果MySQL 5.7要使用MTS功能，建议使用新版本，最少升级到5.7.19版本，修复了很多Bug。&lt;/p>
&lt;h2 id="读写分离">读写分离&lt;/h2>
&lt;h3 id="读写分离引入时机">读写分离引入时机&lt;/h3>
&lt;p>大多数互联网业务中，往往读多写少，这时候数据库的读会首先成为数据库的瓶颈。如果我们已经优化 了SQL，但是读依旧还是瓶颈时，这时就可以选择“读写分离”架构了。
读写分离首先需要将数据库分为主从库，一个主库用于写数据，多个从库完成读数据的操作，主从库之间通过主从复制机制进行数据的同步，如图所示。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201214-155612-0612.png" alt="20201214-155612-0612.png">&lt;/p>
&lt;p>在应用中可以在从库追加多个索引来优化查询，主库这些索引可以不加，用于提升写效率。&lt;/p>
&lt;p>读写分离架构也能够消除读写锁冲突从而提升数据库的读写性能。使用读写分离架构需要注意：&lt;strong>主从同步延迟和读写分配机制问题&lt;/strong>&lt;/p>
&lt;h3 id="主从同步延迟">主从同步延迟&lt;/h3>
&lt;p>使用读写分离架构时，数据库主从同步具有延迟性，数据一致性会有影响，对于一些实时性要求比较高的操作，可以采用以下解决方案。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>写后立刻读&lt;/p>
&lt;p>在写入数据库后，某个时间段内读操作就去主库，之后读操作访问从库。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>二次查询&lt;/p>
&lt;p>先去从库读取数据，找不到时就去主库进行数据读取。该操作容易将读压力返还给主库，为了避免恶意攻击，建议对数据库访问API操作进行封装，有利于安全和低耦合。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>根据业务特殊处理&lt;/p>
&lt;p>根据业务特点和重要程度进行调整，比如重要的，实时性要求高的业务数据读写可以放在主库。对于次要的业务，实时性要求不高可以进行读写分离，查询时去从库查询。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="读写分离落地">读写分离落地&lt;/h3>
&lt;p>&lt;strong>读写路由分配机制&lt;/strong>是实现读写分离架构最关键的一个环节，就是控制何时去主库写，何时去从库读。目 前较为常见的实现方案分为以下两种：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>基于编程和配置实现（应用端）&lt;/p>
&lt;p>程序员在代码中封装数据库的操作，代码中可以根据操作类型进行路由分配，增删改时操作主库， 查询时操作从库。这类方法也是目前生产环境下应用最广泛的。优点是实现简单，因为程序在代码 中实现，不需要增加额外的硬件开支，缺点是需要开发人员来实现，运维人员无从下手，如果其中 一个数据库宕机了，就需要修改配置重启项目。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>基于服务器端代理实现（服务器端）&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201214-153520-0432.png" alt="20201214-153520-0432.png">&lt;/p>
&lt;p>中间件代理一般介于应用服务器和数据库服务器之间，从图中可以看到，应用服务器并不直接进入到master数据库或者slave数据库，而是进入MySQL proxy代理服务器。代理服务器接收到应用服务器的请求后，先进行判断然后转发到后端master和slave数据库。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>目前有很多性能不错的数据库中间件，常用的有MySQL Proxy、MyCat以及Shardingsphere等等。&lt;/p>
&lt;ul>
&lt;li>MySQL Proxy：是官方提供的MySQL中间件产品可以实现负载平衡、读写分离等。&lt;/li>
&lt;li>MyCat：MyCat是一款基于阿里开源产品Cobar而研发的，基于 Java 语言编写的开源数据库中间件。&lt;/li>
&lt;li>ShardingSphere：ShardingSphere是一套开源的分布式数据库中间件解决方案，它由ShardingJDBC、Sharding-Proxy和Sharding-Sidecar（计划中）这3款相互独立的产品组成。已经在2020 年4月16日从Apache孵化器毕业，成为Apache顶级项目。&lt;/li>
&lt;li>Atlas：Atlas是由 Qihoo 360公司Web平台部基础架构团队开发维护的一个数据库中间件。&lt;/li>
&lt;li>Amoeba：变形虫，该开源框架于2008年开始发布一款 Amoeba for MySQL软件。&lt;/li>
&lt;/ul></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category></item><item><title>MySQL 集群 架构设计</title><link>https://chuchin.cn/tech/storage/mysql/mysql-cluster-design/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-cluster-design/</guid><pubDate>Sun, 13 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h2 id="架构设计理念">架构设计理念&lt;/h2>
&lt;p>在集群架构设计时，主要遵从下面三个维度：&lt;/p>
&lt;ul>
&lt;li>可用性&lt;/li>
&lt;li>拓展性&lt;/li>
&lt;li>一致性&lt;/li>
&lt;/ul>
&lt;h2 id="可用性设计">可用性设计&lt;/h2>
&lt;ul>
&lt;li>站点高可用，冗余站点&lt;/li>
&lt;li>服务高可用，冗余服务&lt;/li>
&lt;li>数据高可用，冗余数据&lt;/li>
&lt;/ul>
&lt;p>**保证高可用的方法是冗余。**但是数据冗余带来的问题是数据一致性问题。&lt;/p>
&lt;p>实现高可用的方案有以下几种架构模式：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>主从模式&lt;/p>
&lt;p>简单灵活，能满足多种需求。比较主流的用法，但是写操作高可用需要自行处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>双主模式&lt;/p>
&lt;p>互为主从，有双主双写、双主单写两种方式，建议使用双主单写&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="拓展性设计">拓展性设计&lt;/h2>
&lt;p>扩展性主要围绕着读操作扩展和写操作扩展展开。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如何扩展以提高读性能&lt;/p>
&lt;ul>
&lt;li>
&lt;p>加从库&lt;/p>
&lt;p>简单易操作，方案成熟。
从库过多会引发主库性能损耗。建议不要作为长期的扩充方案，应该设法用良好的设计避免持续加从库来缓解读性能问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分库分表&lt;/p>
&lt;p>可以分为垂直拆分和水平拆分，垂直拆分可以缓解部分压力，水平拆分理论上可以无限扩展。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>如何扩展以提高写性能&lt;/p>
&lt;ul>
&lt;li>分库分表&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="一致性设计">一致性设计&lt;/h2>
&lt;p>一致性主要考虑集群中各数据库数据同步以及同步延迟问题。可以采用的方案如下：&lt;/p>
&lt;ul>
&lt;li>不使用从库
扩展读性能问题需要单独考虑，否则容易出现系统瓶颈。&lt;/li>
&lt;li>增加访问路由层
可以先得到主从同步最长时间t，在数据发生修改后的t时间内，先访问主库。&lt;/li>
&lt;/ul></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category></item><item><title>MySQL 锁 机制和实战</title><link>https://chuchin.cn/tech/storage/mysql/mysql-lock/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-lock/</guid><pubDate>Sat, 12 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h2 id="锁分类">锁分类&lt;/h2>
&lt;p>在 MySQL中锁有很多不同的分类。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>从操作的粒度可分为表级锁、行级锁和页级锁。&lt;/p>
&lt;ul>
&lt;li>表级锁：每次操作锁住整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低。应用在 MyISAM、InnoDB、BDB 等存储引擎中。&lt;/li>
&lt;li>行级锁：每次操作锁住一行数据。锁定粒度最小，发生锁冲突的概率最低，并发度最高。应 用在InnoDB 存储引擎中。&lt;/li>
&lt;li>页级锁：每次锁定相邻的一组记录，锁定粒度界于表锁和行锁之间，开销和加锁时间界于表 锁和行锁之间，并发度一般。应用在BDB 存储引擎中。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201214-112434-0166.png" alt="20201214-112434-0166.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从操作的类型可分为读锁和写锁。&lt;/p>
&lt;ul>
&lt;li>读锁（S锁）：共享锁，针对同一份数据，多个读操作可以同时进行而不会互相影响。&lt;/li>
&lt;li>写锁（X锁）：排他锁，当前写操作没有完成前，它会阻断其他写锁和读锁。&lt;/li>
&lt;/ul>
&lt;p>IS锁、IX锁：意向读锁、意向写锁，属于表级锁，S和X主要针对行级锁。在对表记录添加S或X锁之前，会先对表添加IS或IX锁。&lt;/p>
&lt;p>S锁：事务A对记录添加了S锁，可以对记录进行读操作，不能做修改，其他事务可以对该记录追加S锁，但是不能追加X锁，需要追加X锁，需要等记录的S锁全部释放。&lt;/p>
&lt;p>X锁：事务A对记录添加了X锁，可以对记录进行读和修改操作，其他事务不能对记录做读和修改操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从操作的性能可分为乐观锁和悲观锁。&lt;/p>
&lt;ul>
&lt;li>乐观锁：一般的实现方式是对记录数据版本进行比对，在数据更新提交的时候才会进行冲突 检测，如果发现冲突了，则提示错误信息。&lt;/li>
&lt;li>悲观锁：在对一条数据修改的时候，为了避免同时被其他人修改，在修改数据之前先锁定， 再修改的控制方式。共享锁和排他锁是悲观锁的不同实现，但都属于悲观锁范畴。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="行锁原理">行锁原理&lt;/h2>
&lt;p>在InnoDB引擎中，我们可以使用行锁和表锁，其中行锁又分为共享锁和排他锁。&lt;strong>InnoDB行锁是通过对索引数据页上的记录加锁实现的&lt;/strong>，主要实现算法有 3 种：Record Lock、Gap Lock 和 Next-key Lock。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>RecordLock锁&lt;/strong>：锁定单个行记录的锁。（记录锁，RC、RR隔离级别都支持）&lt;/li>
&lt;li>&lt;strong>GapLock锁&lt;/strong>：间隙锁，锁定索引记录间隙，确保索引记录的间隙不变。（范围锁，RR隔离级别支 持）&lt;/li>
&lt;li>&lt;strong>Next-key Lock 锁&lt;/strong>：记录锁和间隙锁组合，同时锁住数据，并且锁住数据前后范围。（记录锁+范 围锁，RR隔离级别支持）&lt;/li>
&lt;/ul>
&lt;p>在RR隔离级别，InnoDB对于记录加锁行为都是先采用Next-Key Lock，但是当SQL操作含有唯一索引 时，Innodb会对Next-Key Lock进行优化，降级为RecordLock，仅锁住索引本身而非范围。&lt;/p>
&lt;ol>
&lt;li>select ... from 语句：InnoDB引擎采用MVCC机制实现非阻塞读，所以对于普通的select语句， InnoDB不加锁&lt;/li>
&lt;li>select ... from lock in share mode语句：追加了共享锁，InnoDB会使用Next-Key Lock锁进行处 理，如果扫描发现唯一索引，可以降级为RecordLock锁。&lt;/li>
&lt;li>select ... from for update语句：追加了排他锁，InnoDB会使用Next-Key Lock锁进行处理，如果扫 描发现唯一索引，可以降级为RecordLock锁。&lt;/li>
&lt;li>update ... where 语句：InnoDB会使用Next-Key Lock锁进行处理，如果扫描发现唯一索引，可以 降级为RecordLock锁。&lt;/li>
&lt;li>delete ... where 语句：InnoDB会使用Next-Key Lock锁进行处理，如果扫描发现唯一索引，可以降 级为RecordLock锁。&lt;/li>
&lt;li>insert语句：InnoDB会在将要插入的那一行设置一个排他的RecordLock锁。
下面以“update t1 set name=‘XX’ where id=10”操作为例，举例子分析下 InnoDB 对不同索引的加锁行 为，以RR隔离级别为例。&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>主键加锁&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201214-143004-0371.png" alt="20201214-143004-0371.png">&lt;/p>
&lt;p>加锁行为：仅在id=10的主键索引记录上加X锁。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>唯一键加锁&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201214-140233-0605.png" alt="20201214-140233-0605.png">&lt;/p>
&lt;p>加锁行为：现在唯一索引id上加X锁，然后在id=10的主键索引记录上加X锁。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>非唯一键加锁&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201214-143006-0874.png" alt="20201214-143006-0874.png">&lt;/p>
&lt;p>加锁行为：对满足id=10条件的记录和主键分别加X锁，然后在(6,c)-(10,b)、(10,b)-(10,d)、(10,d)(11,f)范围分别加Gap Lock。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>无索引加锁&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201214-144807-0997.png" alt="20201214-144807-0997.png">&lt;/p>
&lt;p>加锁行为：表里所有行和间隙都会加X锁。（当没有索引时，会导致全表锁定，因为InnoDB引擎锁机制是基于索引实现的记录锁定）。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="悲观锁">悲观锁&lt;/h2>
&lt;p>悲观锁（Pessimistic Locking），是指在数据处理过程，将数据处于锁定状态，一般使用数据库的锁机制实现。从广义上来讲，前面提到的行锁、表锁、读锁、写锁、共享锁、排他锁等，这些都属于悲观锁范畴。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>表级锁&lt;/p>
&lt;p>表级锁每次操作都锁住整张表，并发度最低。常用命令如下：&lt;/p>
&lt;p>手动增加表锁&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">lock&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">表名称&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">read&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="k">write&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">表名称&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">read&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="k">write&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查看表上加过的锁&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">show&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">open&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tables&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>删除表锁&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="n">unlock&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tables&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>表级读锁：当前表追加read锁，当前连接和其他的连接都可以读操作；但是当前连接增删改操作会报错，其他连接增删改会被阻塞。&lt;/p>
&lt;p>表级写锁：当前表追加write锁，当前连接可以对表做增删改查操作，其他连接对该表所有操作都被阻塞（包括查询）。&lt;/p>
&lt;p>总结：表级读锁会阻塞写操作，但是不会阻塞读操作。而写锁则会把读和写操作都阻塞。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>共享锁（行级锁-读锁）&lt;/p>
&lt;p>共享锁又称为读锁，简称S锁。共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改。使用共享锁的方法是在select ... lock in share mode，只适用查询语句。&lt;/p>
&lt;p>总结：事务使用了共享锁（读锁），只能读取，不能修改，修改操作被阻塞。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>排他锁（行级锁-写锁）&lt;/p>
&lt;p>排他锁又称为写锁，简称X锁。排他锁就是不能与其他锁并存，如一个事务获取了一个数据行的排他锁，其他事务就不能对该行记录做其他操作，也不能获取该行的锁。 使用排他锁的方法是在SQL末尾加上for update，innodb引擎默认会在update，delete语句加上 for update。行级锁的实现其实是依靠其对应的索引，所以如果操作没用到索引的查询，那么会锁住全表记录。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>总结：事务使用了排他锁（写锁），当前事务可以读取和修改，其他事务不能修改，也不能获取记录 锁（select... for update）。如果查询没有使用到索引，将会锁住整个表记录。&lt;/p>
&lt;h2 id="乐观锁">乐观锁&lt;/h2>
&lt;p>乐观锁是相对于悲观锁而言的，它不是数据库提供的功能，需要开发者自己去实现。在数据库操作时， 想法很乐观，认为这次的操作不会导致冲突，因此在数据库操作时并不做任何的特殊处理，即不加锁， 而是在进行事务提交时再去判断是否有冲突了。&lt;/p>
&lt;p>乐观锁实现的关键点：冲突的检测。&lt;/p>
&lt;p>悲观锁和乐观锁都可以解决事务写写并发，在应用中可以根据并发处理能力选择区分，比如对并发率要求高的选择乐观锁；对于并发率要求低的可以选择悲观锁。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>乐观锁实现原理&lt;/p>
&lt;ul>
&lt;li>
&lt;p>使用版本字段（version）&lt;/p>
&lt;p>先给数据表增加一个版本(version) 字段，每操作一次，将那条记录的版本号加 1。version 是用来查看被读的记录有无变化，作用是防止记录在业务处理期间被其他事务修改。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201214-140415-0256.png" alt="20201214-140415-0256.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用时间戳（Timestamp）&lt;/p>
&lt;p>与使用version版本字段相似，同样需要给在数据表增加一个字段，字段类型使用timestamp 时间戳。也是在更新提交的时候检查当前数据库中数据的时间戳和自己更新前取到的时间戳进行对比，如果一致则提交更新，否则就是版本冲突，取消操作。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>乐观锁案例&lt;/p>
&lt;p>下面我们使用下单过程作为案例，描述下乐观锁的使用。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>第一步：查询商品信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">quantity&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="k">version&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">products&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>第二步：根据商品信息生成订单&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">orders&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>第三步：修改商品库存&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">update&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">products&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">quantity&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">quantity&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="k">version&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">version&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">version&lt;/span>&lt;span class="o">=#&lt;/span>&lt;span class="err">{&lt;/span>&lt;span class="k">version&lt;/span>&lt;span class="err">}&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>除了自己手动实现乐观锁之外，许多数据库访问框架也封装了乐观锁的实现，比如 hibernate框架。MyBatis框架大家可以使用OptimisticLocker插件来扩展。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="死锁与解决方案">死锁与解决方案&lt;/h2>
&lt;p>下面介绍几种常见的死锁现象和解决方案：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>表锁死锁&lt;/strong>&lt;/p>
&lt;p>&lt;strong>产生原因&lt;/strong>：用户A访问表A（锁住了表A），然后又访问表B；另一个用户B访问表B（锁住了表B），然后企图 访问表A；这时用户A由于用户B已经锁住表B，它必须等待用户B释放表B才能继续，同样用户B要 等用户A释放表A才能继续，这就死锁就产生了。 用户A--》A表（表锁）--》B表（表锁） 用户B--》B表（表锁）--》A表（表锁）&lt;/p>
&lt;p>&lt;strong>解决方案&lt;/strong>：这种死锁比较常见，是由于程序的BUG产生的，除了调整的程序的逻辑没有其它的办法。仔细分 析程序的逻辑，对于数据库的多表操作时，尽量按照相同的顺序进行处理，尽量避免同时锁定两个 资源，如操作A和B两张表时，总是按先A后B的顺序处理， 必须同时锁定两个资源时，要保证在任 何时刻都应该按照相同的顺序来锁定资源。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>行级死锁&lt;/strong>&lt;/p>
&lt;p>&lt;strong>产生原因1&lt;/strong>：如果在事务中执行了一条没有索引条件的查询，引发全表扫描，把行级锁上升为全表记录锁定（等 价于表级锁），多个这样的事务执行后，就很容易产生死锁和阻塞，最终应用系统会越来越慢，发 生阻塞或死锁。&lt;/p>
&lt;p>&lt;strong>解决方案1&lt;/strong>：&lt;/p>
&lt;p>SQL语句中不要使用太复杂的关联多表的查询；使用explain“执行计划&amp;quot;对SQL语句进行分析，对于 有全表扫描和全表锁定的SQL语句，建立相应的索引进行优化。&lt;/p>
&lt;p>&lt;strong>产生原因2&lt;/strong>：&lt;/p>
&lt;p>两个事务分别想拿到对方持有的锁，互相等待，于是产生死锁。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201214-142621-0435.png" alt="20201214-142621-0435.png">&lt;/p>
&lt;p>&lt;strong>解决方案2&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在同一个事务中，尽可能做到一次锁定所需要的所有资源&lt;/li>
&lt;li>按照id对资源排序，然后按顺序进行处理&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>共享锁转换为排他锁&lt;/strong>&lt;/p>
&lt;p>&lt;strong>产生原因&lt;/strong>：&lt;/p>
&lt;p>事务A 查询一条纪录，然后更新该条纪录；此时事务B 也更新该条纪录，这时事务B 的排他锁由于事务A 有共享锁，必须等A 释放共享锁后才可以获取，只能排队等待。事务A 再执行更新操作时， 此处发生死锁，因为事务A 需要排他锁来做更新操作。但是，无法授予该锁请求，因为事务B 已经 有一个排他锁请求，并且正在等待事务A 释放其共享锁。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="err">事务&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dept&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">deptno&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">lock&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">share&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mode&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">共享锁&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">update&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dept&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dname&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;java&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">deptno&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">排他锁&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="err">事务&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">update&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dept&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dname&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;Java&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">deptno&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">由于&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="err">有共享锁，没法获取排他锁，需等待，&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>解决方案&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对于按钮等控件，点击立刻失效，不让用户重复点击，避免引发同时对同一条记录多次操作；&lt;/li>
&lt;li>使用乐观锁进行控制。乐观锁机制避免了长事务中的数据库加锁开销，大大提升了大并发量下的系统性能。需要注意的是，由于乐观锁机制是在我们的系统中实现，来自外部系统的用 户更新操作不受我们系统的控制，因此可能会造成脏数据被更新到数据库中；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>死锁排查&lt;/strong>&lt;/p>
&lt;p>MySQL提供了几个与锁有关的参数和命令，可以辅助我们优化锁操作，减少死锁发生。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>查看死锁日志&lt;/p>
&lt;p>通过show engine innodb status\G命令查看近期死锁日志信息。&lt;/p>
&lt;p>使用方法：1、查看近期死锁日志信息；2、使用explain查看下SQL执行计划&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查看锁状态变量&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过show status like'innodb_row_lock%‘命令检查状态变量，分析系统中的行锁的争夺情况&lt;/p>
&lt;ul>
&lt;li>Innodb_row_lock_current_waits：当前正在等待锁的数量&lt;/li>
&lt;li>nnodb_row_lock_time：从系统启动到现在锁定总时间长度&lt;/li>
&lt;li>Innodb_row_lock_time_avg： 每次等待锁的平均时间&lt;/li>
&lt;li>Innodb_row_lock_time_max：从系统启动到现在等待最长的一次锁的时&lt;/li>
&lt;li>Innodb_row_lock_waits：系统启动后到现在总共等待的次数&lt;/li>
&lt;/ul>
&lt;p>如果等待次数高，而且每次等待时间长，需要分析系统中为什么会有如此多的等待，然后着手定制优化。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category></item><item><title>MySQL 事务 隔离级别</title><link>https://chuchin.cn/tech/storage/mysql/mysql-transaction-isolation-level/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-transaction-isolation-level/</guid><pubDate>Fri, 11 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h2 id="隔离级别类型">隔离级别类型&lt;/h2>
&lt;p>前面提到的“更新丢失”、”脏读”、“不可重复读”和“幻读”等并发事务问题，其实都是数据库一致性问题， 为了解决这些问题，MySQL数据库是通过事务隔离级别来解决的，数据库系统提供了以下 4 种事务隔离级别供用户选择。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201211-160541-0706.png" alt="20201211-160541-0706.png">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>(Read Uncommitted)读未提交&lt;/strong>&lt;/p>
&lt;p>解决了回滚覆盖类型的更新丢失，但可能发生脏读现象，也就是 可能读取到其他会话中未提交事务修改的数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>(Read Committed)已提交读&lt;/strong>&lt;/p>
&lt;p>只能读取到其他会话中已经提交的数据，解决了脏读。但可能发生 不可重复读现象，也就是可能在一个事务中两次查询结果不一致。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>(Repeatable Read)可重复读&lt;/strong>&lt;/p>
&lt;p>解决了不可重复读，它确保同一事务的多个实例在并发读取数据 时，会看到同样的数据行。不过理论上会出现幻读，简单的说幻读指的的当用户读取某一范围的数 据行时，另一个事务又在该范围插入了新行，当用户在读取该范围的数据时会发现有新的幻影行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>(Serializable)串行化&lt;/strong>&lt;/p>
&lt;p>所有的增删改查串行执行。它通过强制事务排序，解决相互冲突，从而解决 幻度的问题。这个级别可能导致大量的超时现象的和锁竞争，效率低下。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>数据库的事务隔离级别越高，并发问题就越小，但是并发处理能力越差（代价）。读未提交隔离级别最低，并发问题多，但是并发处理能力好。以后使用时，可以根据系统特点来选择一个合适的隔离级别， 比如对不可重复读和幻读并不敏感，更多关心数据库并发处理能力，此时可以使用Read Commited隔离级别。&lt;/p>
&lt;p>事务隔离级别，针对Innodb引擎，支持事务的功能。像MyISAM引擎没有关系。&lt;/p>
&lt;p>&lt;strong>事务隔离级别和锁的关系&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>事务隔离级别是SQL92定制的标准，相当于事务并发控制的整体解决方案，本质上是对锁和MVCC使用的封装，隐藏了底层细节。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>锁是数据库实现并发控制的基础，事务隔离性是采用锁来实现，对相应操作加不同的锁，就可以防止其他事务同时对数据进行读写操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对用户来讲，首先选择使用隔离级别，当选用的隔离级别不能解决并发问题或需求时，才有必要在开发中手动的设置锁。&lt;/p>
&lt;p>MySQL默认隔离级别：可重复读&lt;/p>
&lt;p>Oracle、SQLServer默认隔离级别：读已提交&lt;/p>
&lt;p>一般使用时，建议采用默认隔离级别，然后存在的一些并发问题，可以通过悲观锁、乐观锁等实现处理。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="mysql隔离级别控制">MySQL隔离级别控制&lt;/h2>
&lt;p>MySQL默认的事务隔离级别是Repeatable Read，查看MySQL当前数据库的事务隔离级别命令如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">show&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">variables&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">like&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;tx_isolation&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">@@&lt;/span>&lt;span class="n">tx_isolation&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>设置事务隔离级别可以如下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tx_isolation&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;READ-UNCOMMITTED&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tx_isolation&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;READ-COMMITTED&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tx_isolation&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;REPEATABLE-READ&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tx_isolation&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;SERIALIZABLE&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category></item><item><title>MySQL 事务 控制演进</title><link>https://chuchin.cn/tech/storage/mysql/mysql-transaction-evolution/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-transaction-evolution/</guid><pubDate>Thu, 10 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h2 id="并发事务">并发事务&lt;/h2>
&lt;p>事务并发处理可能会带来一些问题，比如：更新丢失、脏读、不可重复读、幻读等。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>更新丢失&lt;/strong>&lt;/p>
&lt;p>当两个或多个事务更新同一行记录，会产生更新丢失现象。可以分为回滚覆盖和提交覆盖。&lt;/p>
&lt;ul>
&lt;li>回滚覆盖：一个事务回滚操作，把其他事务已提交的数据给覆盖了。&lt;/li>
&lt;li>提交覆盖：一个事务提交操作，把其他事务已提交的数据给覆盖了。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>脏读&lt;/strong>&lt;/p>
&lt;p>一个事务读取到了另一个事务修改但未提交的数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>不可重复读&lt;/strong>&lt;/p>
&lt;p>一个事务中多次读取同一行记录不一致，后面读取的跟前面读取的不一致&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>幻读&lt;/strong>&lt;/p>
&lt;p>一个事务中多次按相同条件查询，结果不一致。后续查询的结果和面前查询结果不同，多了或少了 几行记录。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="排队">排队&lt;/h2>
&lt;p>最简单的方法，就是完全顺序执行所有事务的数据库操作，不需要加锁，简单的说就是全局排队。序列 化执行所有的事务单元，数据库某个时刻只处理一个事务操作，特点是强一致性，处理性能低。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201211-110833-0651.png" alt="20201211-110833-0651.png">&lt;/p>
&lt;h2 id="排他锁">排他锁&lt;/h2>
&lt;p>引入锁之后就可以支持并发处理事务，如果事务之间涉及到相同的数据项时，会使用排他锁，或叫互斥锁，先进入的事务独占数据项以后，其他事务被阻塞，等待前面的事务释放锁。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201211-114734-0843.png" alt="20201211-114734-0843.png">&lt;/p>
&lt;p>注意，在整个事务1结束之前，锁是不会被释放的，所以，事务2必须等到事务1结束之后开始。&lt;/p>
&lt;h2 id="读写锁">读写锁&lt;/h2>
&lt;p>读和写操作：读读、写写、读写、写读。&lt;/p>
&lt;p>读写锁就是进一步细化锁的颗粒度，区分读操作和写操作，让读和读之间不加锁，这样下面的两个事务就可以同时被执行了。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201211-115938-0570.png" alt="20201211-115938-0570.png">&lt;/p>
&lt;p>读写锁，可以让读和读并行，而读和写、写和读、写和写这几种之间还是要加排他锁。&lt;/p>
&lt;h2 id="mvcc">MVCC&lt;/h2>
&lt;p>多版本控制MVCC，也就是Copy on Write的思想。MVCC除了支持读和读并行，还支持读和写、写和读的并行，但为了保证一致性，写和写是无法并行的。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201211-131340-0387.png" alt="20201211-131340-0387.png">&lt;/p>
&lt;p>在事务1开始写操作的时候会copy一个记录的副本，其他事务读操作会读取这个记录副本，因此不会影 响其他事务对此记录的读取，实现写和读并行。&lt;/p>
&lt;h3 id="mvcc-概念">MVCC 概念&lt;/h3>
&lt;p>MVCC（Multi Version Concurrency Control）被称为多版本控制，是指在数据库中为了实现高并发的数据访问，对数据进行多版本处理，并通过事务的可见性来保证事务能看到自己应该看到的数据版本。 多版本控制很巧妙地将稀缺资源的独占互斥转换为并发，大大提高了数据库的吞吐量及读写性能。&lt;/p>
&lt;p>如何生成的多版本？每次事务修改操作之前，都会在Undo日志中记录修改之前的数据状态和事务号， 该备份记录可以用于其他事务的读取，也可以进行必要时的数据回滚。&lt;/p>
&lt;h3 id="mvcc实现原理">MVCC实现原理&lt;/h3>
&lt;p>MVCC最大的好处是读不加锁，读写不冲突。在读多写少的系统应用中，读写不冲突是非常重要的，极大的提升系统的并发性能，这也是为什么现阶段几乎所有的关系型数据库都支持 MVCC 的原因，不过目前MVCC只在 Read Commited 和 Repeatable Read 两种隔离级别下工作。&lt;/p>
&lt;p>在 MVCC 并发控制中，读操作可以分为两类: 快照读（Snapshot Read）与当前读 （Current Read）。&lt;/p>
&lt;ul>
&lt;li>快照读：读取的是记录的快照版本（有可能是历史版本），不用加锁。（select）&lt;/li>
&lt;li>当前读：读取的是记录的最新版本，并且当前读返回的记录，都会加锁，保证其他事务不会再并发修改这条记录。（select... for update 或lock in share mode，insert/delete/update）&lt;/li>
&lt;/ul>
&lt;p>为了让大家更直观地理解 MVCC 的实现原理，举一个记录更新的案例来讲解 MVCC 中多版本的实现。&lt;/p>
&lt;p>假设 F1～F6 是表中字段的名字，1～6 是其对应的数据。后面三个隐含字段分别对应该行的隐含ID、事务号和回滚指针，如下图所示。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201211-154036-0025.png" alt="20201211-154036-0025.png">&lt;/p>
&lt;p>具体的更新过程如下：&lt;/p>
&lt;p>假如一条数据是刚 INSERT 的，DB_ROW_ID 为 1，其他两个字段为空。当事务 1 更改该行的数据值 时，会进行如下操作，如下图所示。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201211-155740-0162.png" alt="20201211-155740-0162.png">&lt;/p>
&lt;p>MVCC已经实现了读读、读写、写读并发处理，如果想进一步解决写写冲突，可以采用下面两种方案：&lt;/p>
&lt;ul>
&lt;li>乐观锁&lt;/li>
&lt;li>悲观锁&lt;/li>
&lt;/ul>
&lt;p>​&lt;/p></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category></item><item><title>MySQL 事务 ACID特性</title><link>https://chuchin.cn/tech/storage/mysql/mysql-transaction-acid/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-transaction-acid/</guid><pubDate>Wed, 09 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>在关系型数据库管理系统中，一个逻辑工作单元要成为事务，必须满足这 4 个特性，即所谓的 ACID： 原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability）。&lt;/p>
&lt;h2 id="原子性">原子性&lt;/h2>
&lt;p>原子性：事务是一个原子操作单元，其对数据的修改，要么全都执行，要么全都不执行。&lt;/p>
&lt;p>修改---》Buffer Pool修改---》刷盘。可能会有下面两种情况：&lt;/p>
&lt;ul>
&lt;li>事务提交了，如果此时Buffer Pool的脏页没有刷盘，如何保证修改的数据生效？ Redo&lt;/li>
&lt;li>如果事务没提交，但是Buffer Pool的脏页刷盘了，如何保证不该存在的数据撤销？Undo&lt;/li>
&lt;/ul>
&lt;p>每一个写事务，都会修改BufferPool，从而产生相应的Redo/Undo日志，在Buffer Pool 中的页被刷到磁盘之前，这些日志信息都会先写入到日志文件中，如果 Buffer Pool 中的脏页没有刷成功，此时数据库挂了，那在数据库再次启动之后，可以通过 Redo 日志将其恢复出来，以保证脏页写的数据不会丢 失。如果脏页刷新成功，此时数据库挂了，就需要通过Undo来实现了。&lt;/p>
&lt;h2 id="持久性">持久性&lt;/h2>
&lt;p>持久性：指的是一个事务一旦提交，它对数据库中数据的改变就应该是永久性的，后续的操作或故障不应该对其有任何影响，不会丢失。&lt;/p>
&lt;p>如下图所示，一个“提交”动作触发的操作有：binlog落地、发送binlog、存储引擎提交、flush_logs， check_point、事务提交标记等。这些都是数据库保证其数据完整性、持久性的手段。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201211-112518-0253.png" alt="20201211-112518-0253.png">&lt;/p>
&lt;p>MySQL的持久性也与WAL（Write-Ahead-Loggin 先写日志再写磁盘）技术相关，redo log在系统Crash重启之类的情况时，可以修复数据，从而保障事务的持久性。通过原子性可以保证逻辑上的持久性，通过存储引擎的数据刷盘可以保证物理上的持久性。&lt;/p>
&lt;h2 id="隔离性">隔离性&lt;/h2>
&lt;p>隔离性：指的是事务开始之前和事务结束之后，数据库的完整性限制未被破坏。一致性包括两方面的内 容，分别是约束一致性和数据一致性。&lt;/p>
&lt;ul>
&lt;li>约束一致性：创建表结构时所指定的外键、Check、唯一索引等约束，可惜在 MySQL 中不支持 Check 。&lt;/li>
&lt;li>数据一致性：是一个综合性的规定，因为它是由原子性、持久性、隔离性共同保证的结果，而不是单单依赖于某一种技术。&lt;/li>
&lt;/ul>
&lt;p>一致性也可以理解为数据的完整性。数据的完整性是通过原子性、隔离性、持久性来保证的，而这3个特性又是通过 Redo/Undo 来保证的。逻辑上的一致性，包括唯一索引、外键约束、check 约束，这属于业务逻辑范畴。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201211-115722-0668.png" alt="20201211-115722-0668.png">&lt;/p>
&lt;p>ACID及他们之间的关系如下图，4个特性中有3个与 WAL 有关系，都需要通过 Redo、Undo 日志来保证等。&lt;/p>
&lt;p>WAL的全称为Write-Ahead Logging，先写日志，再写磁盘。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201211-114826-0298.png" alt="20201211-114826-0298.png">&lt;/p></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category></item><item><title>MySQL 索引 查询优化</title><link>https://chuchin.cn/tech/storage/mysql/mysql-index-query-optimization/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-index-query-optimization/</guid><pubDate>Tue, 08 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h2 id="慢查询定位">慢查询定位&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>开启慢查询日志&lt;/strong>&lt;/p>
&lt;p>查看 MySQL 数据库是否开启了慢查询日志和慢查询日志文件的存储位置的命令如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SHOW&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">VARIABLES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">LIKE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;slow_query_log%&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过如下命令开启慢查询日志：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">global&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">slow_query_log&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">global&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">slow_query_log_file&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;OAK-slow.log&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">global&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">log_queries_not_using_indexes&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">long_query_time&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>long_query_time：指定慢查询的阀值，单位秒。如果SQL执行时间超过阀值，就属于慢查询 记录到日志文件中。&lt;/li>
&lt;li>log_queries_not_using_indexes：表示会记录没有使用索引的查询SQL。前提是slow_query_log 的值为ON，否则不会奏效。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>查看慢查询日志&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>文本方式查看&lt;/p>
&lt;p>直接使用文本编辑器打开slow.log日志即可。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201210-162948-0922.png" alt="20201210-162948-0922.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用mysqldumpslow查看&lt;/p>
&lt;p>MySQL 提供了一个慢查询日志分析工具mysqldumpslow，可以通过该工具分析慢查询日志 内容。&lt;/p>
&lt;p>在 MySQL bin目录下执行下面命令可以查看该使用格式。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">perl mysqldumpslow.pl --help
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行如下命令查看慢查询日志信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">perl mysqldumpslow.pl -t &lt;span class="m">5&lt;/span> -s at C:&lt;span class="se">\P&lt;/span>rogramData&lt;span class="se">\M&lt;/span>ySQL&lt;span class="se">\D&lt;/span>ata&lt;span class="se">\O&lt;/span>AK-slow.log
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>除了使用mysqldumpslow工具，也可以使用第三方分析工具，比如pt-query-digest、 mysqlsla等。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="慢查询优化">慢查询优化&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>索引和慢查询&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如何判断是否为慢查询？&lt;/p>
&lt;p>MySQL判断一条语句是否为慢查询语句，主要依据SQL语句的执行时间，它把当前语句的执行时间跟 long_query_time 参数做比较，如果语句的执行时间 &amp;gt; long_query_time，就会把这条执行语句记录到慢查询日志里面。long_query_time 参数的默认值是 10s，该参数值可以根据自己的业务需要进行调整。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如何判断是否应用了索引？&lt;/p>
&lt;p>SQL语句是否使用了索引，可根据SQL语句执行过程中有没有用到表的索引，可通过 explain 命令分析查看，检查结果中的 key 值，是否为NULL。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>应用了索引是否一定快？&lt;/p>
&lt;p>下面我们来看看下面语句的 explain 的结果，你觉得这条语句有用上索引吗？比如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>虽然使用了索引，但是还是从主键索引的最左边的叶节点开始向右扫描整个索引树，进行了全表扫描，此时索引就失去了意义。&lt;/p>
&lt;p>而像 select * from user where id = 2; 这样的语句，才是我们平时说的使用了索引。它表示的意思是，我们使用了索引的快速搜索功能，并且有效地减少了扫描行数。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>查询是否使用索引，只是表示一个SQL语句的执行过程；而是否为慢查询，是由它执行的时间决定 的，也就是说是否使用了索引和是否是慢查询两者之间没有必然的联系。&lt;/p>
&lt;p>我们在使用索引时，不要只关注是否起作用，应该关心索引是否减少了查询扫描的数据行数，如果 扫描行数减少了，效率才会得到提升。对于一个大表，不止要创建索引，还要考虑索引过滤性，过 滤性好，执行速度才会快。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>提高索引过滤性&lt;/strong>&lt;/p>
&lt;p>假如有一个5000万记录的用户表，通过sex='男'索引过滤后，还需要定位3000万，SQL执行速度也不会很快。其实这个问题涉及到索引的过滤性，比如1万条记录利用索引过滤后定位10条、100 条、1000条，那他们过滤性是不同的。索引过滤性与索引字段、表的数据量、表设计结构都有关系。&lt;/p>
&lt;p>下面我们看一个案例：&lt;/p>
&lt;pre>&lt;code>表：student
字段：id,name,sex,age
造数据：insert into student (name,sex,age) select name,sex,age from student;
SQL案例：select * from student where age=18 and name like '张%';（全表扫描）
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>
&lt;p>优化1&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">alter&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">student&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">add&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">追加&lt;/span>&lt;span class="n">name索引&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>优化2&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">alter&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">student&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">add&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">追加&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">name索引&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>优化3&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="err">可以看到，&lt;/span>&lt;span class="k">index&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pushdown&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">优化的效果还是很不错的。再进一步优化，我们可以把名&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="err">字的第一个字和年龄做一个联合索引，这里可以使用&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MySQL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">引入的虚拟列来实现。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="o">//&lt;/span>&lt;span class="err">为&lt;/span>&lt;span class="n">user表添加first_name虚拟列&lt;/span>&lt;span class="err">，以及联合索引&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">first_name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">alter&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">student&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">add&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">first_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">generated&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">always&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">left&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">add&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">first_name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">explain&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">student&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">first_name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;张&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>慢查询原因总结&lt;/p>
&lt;ul>
&lt;li>全表扫描：expain分析type属性all&lt;/li>
&lt;li>全索引扫描：explain分析type属性index&lt;/li>
&lt;li>索引过滤性不好：靠索引字段选型、数据量和状态、表设计&lt;/li>
&lt;li>频繁的回表查询开销：尽量少用select *，使用覆盖索引&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="分页查询优化">分页查询优化&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>一般性分页&lt;/p>
&lt;p>一般的分页查询使用简单的 limit 子句就可以实现。limit格式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">表名&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">LIMIT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">offset&lt;/span>&lt;span class="p">,]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">rows&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>第一个参数指定第一个返回记录行的偏移量，注意从0开始；&lt;/li>
&lt;li>第二个参数指定返回记录行的最大数目；&lt;/li>
&lt;li>如果只给定一个参数，它表示返回最大的记录行数目；&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>思考1：如果偏移量固定，返回记录量对执行时间有什么影响？&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">limit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">limit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">limit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">limit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">limit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果：在查询记录时，返回记录量低于100条，查询时间基本没有变化，差距不大。随着查询记录量越大，所花费的时间也会越来越多。&lt;/p>
&lt;p>&lt;strong>思考2：如果查询偏移量变化，返回记录数固定对执行时间有什么影响？&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">limit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">limit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">limit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">limit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">limit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果：在查询记录时，如果查询记录量相同，偏移量超过100后就开始随着偏移量增大，查询时间急剧的增加。（这种分页查询机制，每次都会从数据库第一条记录开始扫描，越往后查询越慢，而且查询的数据越多，也会拖慢总查询速度。）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分页优化方案&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>利用覆盖索引优化&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">limit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">limit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>利用子查询优化&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">limit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">&amp;gt;=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">limit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">limit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>原因：使用了id做主键比较(id&amp;gt;=)，并且子查询使用了覆盖索引进行优化&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category></item><item><title>MySQL 索引 分析优化</title><link>https://chuchin.cn/tech/storage/mysql/mysql-index-analysis-optimization/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-index-analysis-optimization/</guid><pubDate>Mon, 07 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h2 id="explain">EXPLAIN&lt;/h2>
&lt;p>MySQL 提供了一个 EXPLAIN 命令，它可以对 SELECT 语句进行分析，并输出 SELECT 执行的详细信 息，供开发人员有针对性的优化。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">EXPLAIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>EXPLAIN 命令的输出内容大致如下：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201210-150815-0761.png" alt="20201210-150815-0761.png">&lt;/p>
&lt;p>参数说明：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>select_type&lt;/p>
&lt;p>表示查询的类型。常用的值如下：&lt;/p>
&lt;ul>
&lt;li>SIMPLE ： 表示查询语句不包含子查询或union&lt;/li>
&lt;li>PRIMARY：表示此查询是最外层的查询&lt;/li>
&lt;li>UNION：表示此查询是UNION的第二个或后续的查询&lt;/li>
&lt;li>DEPENDENT UNION：UNION中的第二个或后续的查询语句，使用了外面查询结果&lt;/li>
&lt;li>UNION RESULT：UNION的结果&lt;/li>
&lt;li>SUBQUERY：SELECT子查询语句&lt;/li>
&lt;li>DEPENDENT SUBQUERY：SELECT子查询语句依赖外层查询的结果。&lt;/li>
&lt;/ul>
&lt;p>最常见的查询类型是SIMPLE，表示我们的查询没有子查询也没用到UNION查询。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>type&lt;/p>
&lt;p>表示存储引擎查询数据时采用的方式。比较重要的一个属性，通过它可以判断出查询是全表扫描还 是基于索引的部分扫描。常用属性值如下，从上至下效率依次增强。&lt;/p>
&lt;ul>
&lt;li>ALL：表示全表扫描，性能最差。&lt;/li>
&lt;li>index：表示基于索引的全表扫描，先扫描索引再扫描全表数据。&lt;/li>
&lt;li>range：表示使用索引范围查询。使用&amp;gt;、&amp;gt;=、&amp;lt;、&amp;lt;=、in等等。&lt;/li>
&lt;li>ref：表示使用非唯一索引进行单值查询。&lt;/li>
&lt;li>eq_ref：一般情况下出现在多表join查询，表示前面表的每一个记录，都只能匹配后面表的一 行结果。&lt;/li>
&lt;li>const：表示使用主键或唯一索引做等值查询，常量查询。&lt;/li>
&lt;li>NULL：表示不用访问表，速度最快。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>possible_keys&lt;/p>
&lt;p>表示查询时能够使用到的索引。注意并不一定会真正使用，显示的是索引名称。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>key&lt;/p>
&lt;p>表示查询时真正使用到的索引，显示的是索引名称。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>rows&lt;/p>
&lt;p>MySQL查询优化器会根据统计信息，估算SQL要查询到结果需要扫描多少行记录。原则上rows是 越少效率越高，可以直观的了解到SQL效率高低。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>key_len&lt;/p>
&lt;p>表示查询使用了索引的字节数量。可以判断是否全部使用了组合索引。&lt;/p>
&lt;p>key_len的计算规则如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>字符串类型&lt;/p>
&lt;p>字符串长度跟字符集有关：latin1=1、gbk=2、utf8=3、utf8mb4=4&lt;/p>
&lt;p>char(n)：n*字符集长度&lt;/p>
&lt;p>varchar(n)：n * 字符集长度 + 2字节&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数值类型&lt;/p>
&lt;p>TINYINT：1个字节&lt;/p>
&lt;p>SMALLINT：2个字节&lt;/p>
&lt;p>MEDIUMINT：3个字节&lt;/p>
&lt;p>INT、FLOAT：4个字节&lt;/p>
&lt;p>BIGINT、DOUBLE：8个字节&lt;/p>
&lt;/li>
&lt;li>
&lt;p>时间类型&lt;/p>
&lt;p>DATE：3个字节&lt;/p>
&lt;p>TIMESTAMP：4个字节&lt;/p>
&lt;p>DATETIME：8个字节&lt;/p>
&lt;/li>
&lt;li>
&lt;p>字段属性&lt;/p>
&lt;p>NULL属性占用1个字节，如果一个字段设置了NOT NULL，则没有此项。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Extra&lt;/p>
&lt;p>Extra表示很多额外的信息，各种操作会在Extra提示相关信息，常见几种如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Using where&lt;/p>
&lt;p>表示查询需要通过索引回表查询数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Using index&lt;/p>
&lt;p>表示查询需要通过索引，索引就可以满足所需数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Using filesort&lt;/p>
&lt;p>表示查询出来的结果需要额外排序，数据量小在内存，大的话在磁盘，因此有Using filesort 建议优化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Using temprorary&lt;/p>
&lt;p>查询使用到了临时表，一般出现于去重、分组等操作。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="回表查询">回表查询&lt;/h2>
&lt;p>在之前介绍过，InnoDB索引有聚簇索引和辅助索引。聚簇索引的叶子节点存储行记录，InnoDB必须要有，且只有一个。辅助索引的叶子节点存储的是主键值和索引字段值，通过辅助索引无法直接定位行记录，通常情况下，需要扫码两遍索引树。先通过辅助索引定位主键值，然后再通过聚簇索引定位行记 录，这就叫做回表查询，它的性能比扫一遍索引树低。&lt;/p>
&lt;p>&lt;strong>总结：通过索引查询主键值，然后再去聚簇索引查询记录信息&lt;/strong>&lt;/p>
&lt;h2 id="覆盖索引">覆盖索引&lt;/h2>
&lt;p>在SQL-Server官网的介绍如下：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201210-165316-0974.png" alt="20201210-165316-0974.png">&lt;/p>
&lt;p>在MySQL官网，类似的说法出现在explain查询计划优化章节，即explain的输出结果Extra字段为Using index时，能够触发索引覆盖。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201210-164517-0180.png" alt="20201210-164517-0180.png">&lt;/p>
&lt;p>不管是SQL-Server官网，还是MySQL官网，都表达了：&lt;strong>只需要在一棵索引树上就能获取SQL所需的所有列数据，无需回表，速度更快，这就叫做索引覆盖。&lt;/strong>&lt;/p>
&lt;p>实现索引覆盖最常见的方法就是：将被查询的字段，建立到组合索引。&lt;/p>
&lt;h2 id="最左前缀原则">最左前缀原则&lt;/h2>
&lt;p>复合索引使用时遵循最左前缀原则，最左前缀顾名思义，就是最左优先，即查询中使用到最左边的列， 那么查询就会使用到索引，如果从索引的第二列开始查找，索引将失效。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201210-160122-0049.png" alt="20201210-160122-0049.png">&lt;/p>
&lt;h2 id="like-查询">LIKE 查询&lt;/h2>
&lt;p>&lt;strong>面试题：MySQL在使用like模糊查询时，索引能不能起作用？&lt;/strong>&lt;/p>
&lt;p>回答：MySQL在使用Like模糊查询时，索引是可以被使用的，只有把%字符写在后面才会使用到索引。&lt;/p>
&lt;p>select * from user where name like '%o%'; //不起作用&lt;/p>
&lt;p>select * from user where name like 'o%'; //起作用&lt;/p>
&lt;p>select * from user where name like '%o'; //不起作用&lt;/p>
&lt;h2 id="null-查询">NULL 查询&lt;/h2>
&lt;p>&lt;strong>面试题：如果MySQL表的某一列含有NULL值，那么包含该列的索引是否有效？&lt;/strong>&lt;/p>
&lt;p>对MySQL来说，NULL是一个特殊的值，从概念上讲，NULL意味着“一个未知值”，它的处理方式与其他 值有些不同。比如：不能使用=，&amp;lt;，&amp;gt;这样的运算符，对NULL做算术运算的结果都是NULL，count时不会包括NULL行等，NULL比空字符串需要更多的存储空间等。&lt;/p>
&lt;blockquote>
&lt;p>“NULL columns require additional space in the row to record whether their values are NULL. For MyISAM tables, each NULL column takes one bit extra, rounded up to the nearest byte.”&lt;/p>
&lt;/blockquote>
&lt;p>NULL列需要增加额外空间来记录其值是否为NULL。对于MyISAM表，每一个空列额外占用一位，四舍 五入到最接近的字节。&lt;/p>
&lt;p>虽然MySQL可以在含有NULL的列上使用索引，但NULL和其他数据还是有区别的，不建议列上允许为 NULL。最好设置NOT NULL，并给一个默认值，比如0和 ‘’ 空字符串等，如果是datetime类型，也可以设置系统当前时间或某个固定的特殊值，例如'1970-01-01 00:00:00'。&lt;/p>
&lt;h2 id="索引与排序">索引与排序&lt;/h2>
&lt;p>MySQL查询支持filesort和index两种方式的排序，filesort是先把结果查出，然后在缓存或磁盘进行排序操作，效率较低。使用index是指利用索引自动实现排序，不需另做排序操作，效率会比较高。&lt;/p>
&lt;p>filesort有两种排序算法：双路排序和单路排序。&lt;/p>
&lt;p>双路排序：需要两次磁盘扫描读取，最终得到用户数据。第一次将排序字段读取出来，然后排序；第二 次去读取其他字段数据。&lt;/p>
&lt;p>单路排序：从磁盘查询所需的所有列数据，然后在内存排序将结果返回。如果查询数据超出缓存 sort_buffer，会导致多次磁盘读取操作，并创建临时表，最后产生了多次IO，反而会增加负担。解决方 案：少使用select *；增加sort_buffer_size容量和max_length_for_sort_data容量。&lt;/p>
&lt;p>如果我们Explain分析SQL，结果中Extra属性显示Using filesort，表示使用了filesort排序方式，需要优 化。如果Extra属性显示Using index时，表示覆盖索引，也表示所有操作在索引上完成，也可以使用 index排序方式，建议大家尽可能采用覆盖索引。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>以下几种情况，会使用index方式的排序。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ORDER BY 子句索引列组合满足索引最左前缀&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">explain&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">对应&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">、&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">索引有效&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>WHERE子句+ORDER BY子句索引列组合满足索引最左前缀&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">explain&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">对应&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">索引&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>以下几种情况，会使用filesort方式的排序。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>对索引列同时使用了ASC和DESC&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">explain&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">asc&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">desc&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">对应&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">索引&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>WHERE子句和ORDER BY子句满足最左前缀，但where子句使用了范围查询（例如&amp;gt;、&amp;lt;、in 等）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">explain&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">对应&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">索引&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>ORDER BY或者WHERE+ORDER BY索引列没有满足索引最左前列&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">explain&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">对应&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">索引&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用了不同的索引，MySQL每次只采用一个索引，ORDER BY涉及了两个索引&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">explain&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">对应&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">、&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">两个索&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">引&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>WHERE子句与ORDER BY子句，使用了不同的索引&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">explain&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;tom&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">对应&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">、&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">索引&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>WHERE子句或者ORDER BY子句中索引列使用了表达式，包括函数表达式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">explain&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">abs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">对应&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">索引&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category></item><item><title>MySQL 索引 原理</title><link>https://chuchin.cn/tech/storage/mysql/mysql-index-principle/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-index-principle/</guid><pubDate>Sun, 06 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>MySQL官方对索引定义：是存储引擎用于快速查找记录的一种数据结构。需要额外开辟空间和数据维护工作。&lt;/p>
&lt;ul>
&lt;li>索引是物理数据页存储，在数据文件中（InnoDB，ibd文件），利用数据页(page)存储。&lt;/li>
&lt;li>索引可以加快检索速度，但是同时也会降低增删改操作速度，索引维护需要代价。&lt;/li>
&lt;/ul>
&lt;p>索引涉及的理论知识：二分查找法、Hash和B+Tree。&lt;/p>
&lt;h2 id="二分查找法">二分查找法&lt;/h2>
&lt;p>二分查找法也叫作折半查找法，它是在有序数组中查找指定数据的搜索算法。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>优点：等值查询、范围查询性能优秀&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点：更新数据、新增数据、删除数据维护成本高&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>查找过程：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>首先定位left和right两个指针&lt;/p>
&lt;/li>
&lt;li>
&lt;p>计算(left+right)/2&lt;/p>
&lt;/li>
&lt;li>
&lt;p>判断除2后索引位置值与目标值的大小比对&lt;/p>
&lt;/li>
&lt;li>
&lt;p>索引位置值大于目标值就-1，right移动；如果小于目标值就+1，left移动&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>举个例子，下面的有序数组有17 个值，查找的目标值是7，过程如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>第一次查找&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201210-140455-0208.png" alt="20201210-140455-0208.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第二次查找&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201210-144455-0097.png" alt="20201210-144455-0097.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第三次查找&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201210-142356-0038.png" alt="20201210-142356-0038.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第四次查找&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201210-140457-0544.png" alt="20201210-140457-0544.png">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="hash-结构">Hash 结构&lt;/h2>
&lt;p>Hash底层实现是由Hash表来实现的，是根据键值 &amp;lt;key,value&amp;gt; 存储数据的结构。非常适合根据key查找 value值，也就是单个key查询，或者说等值查询。其结构如下所示：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201210-145258-0685.png" alt="20201210-145258-0685.png">&lt;/p>
&lt;p>从上面结构可以看出，Hash索引可以方便的提供等值查询，但是对于范围查询就需要全表扫描了。 Hash索引在MySQL 中Hash结构主要应用在Memory原生的Hash索引 、InnoDB 自适应哈希索引。&lt;/p>
&lt;p>InnoDB提供的自适应哈希索引功能强大，接下来重点描述下InnoDB 自适应哈希索引。&lt;/p>
&lt;p>InnoDB自适应哈希索引是为了提升查询效率，InnoDB存储引擎会监控表上各个索引页的查询，当 InnoDB注意到某些索引值访问非常频繁时，会在内存中基于B+Tree索引再创建一个哈希索引，使得内存中的 B+Tree 索引具备哈希索引的功能，即能够快速定值访问频繁访问的索引页。&lt;/p>
&lt;p>InnoDB自适应哈希索引：在使用Hash索引访问时，一次性查找就能定位数据，等值查询效率要优于 B+Tree。&lt;/p>
&lt;p>自适应哈希索引的建立使得InnoDB存储引擎能自动根据索引页访问的频率和模式自动地为某些热点页建立哈希索引来加速访问。另外InnoDB自适应哈希索引的功能，用户只能选择开启或关闭功能，无法进行人工干涉。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">show&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">engine&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">innodb&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="k">G&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">show&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">variables&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">like&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;%innodb_adaptive%&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="btree-结构">B+Tree 结构&lt;/h2>
&lt;p>MySQL数据库索引采用的是B+Tree结构，在B-Tree结构上做了优化改造。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>B-Tree结构&lt;/p>
&lt;ul>
&lt;li>索引值和data数据分布在整棵树结构中&lt;/li>
&lt;li>每个节点可以存放多个索引值及对应的data数据&lt;/li>
&lt;li>树节点中的多个索引值从左到右升序排列&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201210-155001-0690.png" alt="20201210-155001-0690.png">&lt;/p>
&lt;p>B树的搜索：从根节点开始，对节点内的索引值序列采用二分法查找，如果命中就结束查找。没有命中会进入子节点重复查找过程，直到所对应的的节点指针为空，或已经是叶子节点了才结束。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>B+Tree&lt;/p>
&lt;ul>
&lt;li>非叶子节点不存储data数据，只存储索引值，这样便于存储更多的索引值&lt;/li>
&lt;li>叶子节点包含了所有的索引值和data数据&lt;/li>
&lt;li>叶子节点用指针连接，提高区间的访问性能&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201210-155903-0210.png" alt="20201210-155903-0210.png">&lt;/p>
&lt;p>相比B树，B+树进行范围查找时，只需要查找定位两个节点的索引值，然后利用叶子节点的指针进 行遍历即可。而B树需要遍历范围内所有的节点和数据，显然B+Tree效率高。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="聚簇索引和辅助索引">聚簇索引和辅助索引&lt;/h2>
&lt;p>聚簇索引和非聚簇索引：B+Tree的叶子节点存放主键索引值和行记录就属于聚簇索引；如果索引值和行记录分开存放就属于非聚簇索引。&lt;/p>
&lt;p>主键索引和辅助索引：B+Tree的叶子节点存放的是主键字段值就属于主键索引；如果存放的是非主键值就属于辅助索引（二级索引）。&lt;/p>
&lt;p>在InnoDB引擎中，主键索引采用的就是聚簇索引结构存储&lt;/p>
&lt;ul>
&lt;li>
&lt;p>聚簇索引（聚集索引）&lt;/p>
&lt;p>聚簇索引是一种数据存储方式，InnoDB的聚簇索引就是按照主键顺序构建 B+Tree结构。B+Tree 的叶子节点就是行记录，行记录和主键值紧凑地存储在一起。 这也意味着 InnoDB 的主键索引就 是数据表本身，它按主键顺序存放了整张表的数据，占用的空间就是整个表数据量的大小。通常说 的主键索引就是聚集索引。&lt;/p>
&lt;p>InnoDB的表要求必须要有聚簇索引：&lt;/p>
&lt;ul>
&lt;li>如果表定义了主键，则主键索引就是聚簇索引&lt;/li>
&lt;li>如果表没有定义主键，则第一个非空unique列作为聚簇索引&lt;/li>
&lt;li>否则InnoDB会从建一个隐藏的row-id作为聚簇索引&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>辅助索引&lt;/p>
&lt;p>InnoDB辅助索引，也叫作二级索引，是根据索引列构建 B+Tree结构。但在 B+Tree 的叶子节点中只存了索引列和主键的信息。二级索引占用的空间会比聚簇索引小很多， 通常创建辅助索引就是为了提升查询效率。一个表InnoDB只能创建一个聚簇索引，但可以创建多个辅助索引。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201210-153609-0526.png" alt="20201210-153609-0526.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>非聚簇索引&lt;/p>
&lt;p>与InnoDB表存储不同，MyISAM数据表的索引文件和数据文件是分开的，被称为非聚簇索引结构。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201210-155908-0534.png" alt="20201210-155908-0534.png">&lt;/p>
&lt;/li>
&lt;/ul></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category></item><item><title>MySQL 索引 类型</title><link>https://chuchin.cn/tech/storage/mysql/mysql-index-types/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-index-types/</guid><pubDate>Sat, 05 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>索引可以提升查询速度，会影响where查询，以及order by排序。MySQL索引类型如下：&lt;/p>
&lt;ul>
&lt;li>从&lt;strong>索引存储&lt;/strong>结构划分：&lt;strong>B Tree索引&lt;/strong>、&lt;strong>Hash索引&lt;/strong>、&lt;strong>FULLTEXT全文索引&lt;/strong>、&lt;strong>R Tree索引&lt;/strong>&lt;/li>
&lt;li>从&lt;strong>应用层次&lt;/strong>划分：&lt;strong>普通索引&lt;/strong>、&lt;strong>唯一索引&lt;/strong>、&lt;strong>主键索引&lt;/strong>、&lt;strong>复合索引&lt;/strong>&lt;/li>
&lt;li>从&lt;strong>索引键值类型&lt;/strong>划分：&lt;strong>主键索引&lt;/strong>、&lt;strong>辅助索引（二级索引）&lt;/strong>&lt;/li>
&lt;li>从&lt;strong>数据存储和索引键值逻辑关系&lt;/strong>划分：&lt;strong>聚集索引（聚簇索引）&lt;/strong>、&lt;strong>非聚集索引（非聚簇索引）&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="普通索引">普通索引&lt;/h2>
&lt;p>这是最基本的索引类型，基于普通字段建立的索引，没有任何限制。&lt;/p>
&lt;p>创建普通索引的方法如下：&lt;/p>
&lt;ul>
&lt;li>CREATE INDEX &amp;lt;索引的名字&amp;gt; ON tablename (字段名);&lt;/li>
&lt;li>ALTER TABLE tablename ADD INDEX [索引的名字] (字段名);&lt;/li>
&lt;li>CREATE TABLE tablename ( [...], INDEX [索引的名字] (字段名) );&lt;/li>
&lt;/ul>
&lt;h2 id="唯一索引">唯一索引&lt;/h2>
&lt;p>与&amp;quot;普通索引&amp;quot;类似，不同的就是：索引字段的值必须唯一，但允许有空值 。在创建或修改表时追加唯一 约束，就会自动创建对应的唯一索引。&lt;/p>
&lt;p>创建唯一索引的方法如下：&lt;/p>
&lt;ul>
&lt;li>CREATE UNIQUE INDEX &amp;lt;索引的名字&amp;gt; ON tablename (字段名);&lt;/li>
&lt;li>ALTER TABLE tablename ADD UNIQUE INDEX [索引的名字] (字段名);&lt;/li>
&lt;li>CREATE TABLE tablename ( [...], UNIQUE [索引的名字] (字段名) ;&lt;/li>
&lt;/ul>
&lt;h2 id="主键索引">主键索引&lt;/h2>
&lt;p>它是一种特殊的唯一索引，不允许有空值。在创建或修改表时追加主键约束即可，每个表只能有一个主键。&lt;/p>
&lt;p>创建主键索引的方法如下：&lt;/p>
&lt;ul>
&lt;li>CREATE TABLE tablename ( [...], PRIMARY KEY (字段名) );&lt;/li>
&lt;li>ALTER TABLE tablename ADD PRIMARY KEY (字段名);&lt;/li>
&lt;/ul>
&lt;h2 id="复合索引">复合索引&lt;/h2>
&lt;p>单一索引是指索引列为一列的情况，即新建索引的语句只实施在一列上；用户可以在多个列上建立索 引，这种索引叫做组复合索引（组合索引）。复合索引可以代替多个单一索引，相比多个单一索引复合 索引所需的开销更小。&lt;/p>
&lt;p>索引同时有两个概念叫做窄索引和宽索引，窄索引是指索引列为1-2列的索引，宽索引也就是索引列超 过2列的索引，设计索引的一个重要原则就是能用窄索引不用宽索引，因为窄索引往往比组合索引更有 效。&lt;/p>
&lt;p>创建组合索引的方法如下：&lt;/p>
&lt;ul>
&lt;li>CREATE INDEX &amp;lt;索引的名字&amp;gt; ON tablename (字段名1，字段名2...);&lt;/li>
&lt;li>ALTER TABLE tablename ADD INDEX [索引的名字] (字段名1，字段名2...);&lt;/li>
&lt;li>CREATE TABLE tablename ( [...], INDEX [索引的名字] (字段名1，字段名2...) );&lt;/li>
&lt;/ul>
&lt;p>复合索引使用注意事项：&lt;/p>
&lt;ul>
&lt;li>复合索引字段是有顺序的，在查询使用时要按照索引字段的顺序使用。例如select * from user where name=xx and age=xx，匹配(name,age)组合索引，不匹配(age,name)。&lt;/li>
&lt;li>何时使用复合索引，要根据where条件建索引，注意不要过多使用索引，过多使用会对更新操作效 率有很大影响。&lt;/li>
&lt;li>如果表已经建立了(col1，col2)，就没有必要再单独建立（col1）；如果现在有(col1)索引，如果查 询需要col1和col2条件，可以建立(col1,col2)复合索引，对于查询有一定提高。&lt;/li>
&lt;/ul>
&lt;h2 id="全文索引">全文索引&lt;/h2>
&lt;p>查询操作在数据量比较少时，可以使用like模糊查询，但是对于大量的文本数据检索，效率很低。如果 使用全文索引，查询速度会比like快很多倍。在MySQL 5.6 以前的版本，只有MyISAM存储引擎支持全 文索引，从MySQL 5.6开始MyISAM和InnoDB存储引擎均支持。&lt;/p>
&lt;p>创建全文索引的方法如下：&lt;/p>
&lt;ul>
&lt;li>CREATE FULLTEXT INDEX &amp;lt;索引的名字&amp;gt; ON tablename (字段名);&lt;/li>
&lt;li>ALTER TABLE tablename ADD FULLTEXT [索引的名字] (字段名);&lt;/li>
&lt;li>CREATE TABLE tablename ( [...], FULLTEXT KEY [索引的名字] (字段名) ;&lt;/li>
&lt;/ul>
&lt;p>和常用的like模糊查询不同，全文索引有自己的语法格式，使用 match 和 against 关键字，比如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">against&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;aaa&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>全文索引使用注意事项：&lt;/p>
&lt;ul>
&lt;li>全文索引必须在字符串、文本字段上建立。&lt;/li>
&lt;li>全文索引字段值必须在最小字符和最大字符之间的才会有效。（innodb：3-84；myisam：484）&lt;/li>
&lt;li>全文索引字段值要进行切词处理，按syntax字符进行切割，例如b+aaa，切分成b和aaa&lt;/li>
&lt;li>全文索引匹配查询，默认使用的是等值匹配，例如a匹配a，不会匹配ab,ac。如果想匹配可以在布 尔模式下搜索a*&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">against&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;a*&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">boolean&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mode&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category></item><item><title>MySQL 架构原理 存储引擎</title><link>https://chuchin.cn/tech/storage/mysql/mysql-storage-engine/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-storage-engine/</guid><pubDate>Fri, 04 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>存储引擎在MySQL的体系架构中位于第三层，负责MySQL中的数据的存储和提取，是与文件打交道的子系统，它是根据MySQL提供的文件访问层抽象接口定制的一种文件访问机制，这种机制就叫作存储引擎。&lt;/p>
&lt;p>使用show engines命令，就可以查看当前数据库支持的引擎信息。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201209-140523-0748.png" alt="20201209-140523-0748.png">&lt;/p>
&lt;p>在5.5版本之前默认采用MyISAM存储引擎，从5.5开始采用InnoDB存储引擎。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>存储引擎&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>InnoDB&lt;/td>
&lt;td>支持事务，具有提交，回滚和崩溃恢复能力，事务安全&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MyISAM&lt;/td>
&lt;td>不支持事务和外键，访问速度快&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Memory&lt;/td>
&lt;td>利用内存创建表，访问速度非常快，因为数据在内存，而且默认使用Hash索引，但是 一旦关闭，数据就会丢失&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Archive&lt;/td>
&lt;td>归档类型引擎，仅能支持insert和select语句&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Csv&lt;/td>
&lt;td>以CSV文件进行数据存储，由于文件限制，所有列必须强制指定not null，另外CSV引擎也不 支持索引和分区，适合做数据交换的中间表&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>BlackHole&lt;/td>
&lt;td>黑洞，只进不出，进来消失，所有插入数据都不会保存&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Federated&lt;/td>
&lt;td>可以访问远端MySQL数据库中的表。一个本地表，不保存数据，访问远程表内容。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MRG_MyISAM&lt;/td>
&lt;td>一组MyISAM表的组合，这些MyISAM表必须结构相同，Merge表本身没有数据， 对Merge操作可以对一组MyISAM表进行操作。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="innodb和myisam对比">InnoDB和MyISAM对比&lt;/h2>
&lt;p>InnoDB和MyISAM是使用MySQL时最常用的两种引擎类型，我们重点来看下两者区别。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>事务和外键&lt;/p>
&lt;p>InnoDB支持事务和外键，具有安全性和完整性，适合大量insert或update操作&lt;/p>
&lt;p>MyISAM不支持事务和外键，它提供高速存储和检索，适合大量的select查询操作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>锁机制&lt;/p>
&lt;p>InnoDB支持行级锁，锁定指定记录。基于索引来加锁实现。&lt;/p>
&lt;p>MyISAM支持表级锁，锁定整张表。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>索引结构&lt;/p>
&lt;p>InnoDB使用聚集索引（聚簇索引），索引和记录在一起存储，既缓存索引，也缓存记录。&lt;/p>
&lt;p>MyISAM使用非聚集索引（非聚簇索引），索引和记录分开。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>并发处理能力&lt;/p>
&lt;p>MyISAM使用表锁，会导致写操作并发率低，读之间并不阻塞，读写阻塞。&lt;/p>
&lt;p>InnoDB读写阻塞可以与隔离级别有关，可以采用多版本并发控制（MVCC）来支持高并发&lt;/p>
&lt;/li>
&lt;li>
&lt;p>存储文件&lt;/p>
&lt;p>InnoDB表对应两个文件，一个.frm表结构文件，一个.ibd数据文件。InnoDB表最大支持64TB；&lt;/p>
&lt;p>MyISAM表对应三个文件，一个.frm表结构文件，一个MYD表数据文件，一个.MYI索引文件。从 MySQL5.0开始默认限制是256TB。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201209-142935-0122.png" alt="20201209-142935-0122.png">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>适用场景&lt;/p>
&lt;p>&lt;strong>MyISAM&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>不需要事务支持（不支持）&lt;/li>
&lt;li>并发相对较低（锁定机制问题）&lt;/li>
&lt;li>数据修改相对较少，以读为主&lt;/li>
&lt;li>数据一致性要求不高&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>InnoDB&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>需要事务支持（具有较好的事务特性）&lt;/li>
&lt;li>行级锁定对高并发有很好的适应能力&lt;/li>
&lt;li>数据更新较为频繁的场景&lt;/li>
&lt;li>数据一致性要求较高&lt;/li>
&lt;li>硬件设备内存较大，可以利用InnoDB较好的缓存能力来提高内存利用率，减少磁盘IO&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>总结&lt;/p>
&lt;p>两种引擎该如何选择？&lt;/p>
&lt;ul>
&lt;li>是否需要事务？有，InnoDB&lt;/li>
&lt;li>是否存在并发修改？有，InnoDB&lt;/li>
&lt;li>是否追求快速查询，且数据修改少？是，MyISAM&lt;/li>
&lt;li>在绝大多数情况下，推荐使用InnoDB&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>资料：各个存储引擎特性对比&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201209-143539-0827.png" alt="20201209-143539-0827.png">&lt;/p>
&lt;h2 id="innodb-存储结构">InnoDB 存储结构&lt;/h2>
&lt;p>从MySQL 5.5版本开始默认使用InnoDB作为引擎，它擅长处理事务，具有自动崩溃恢复的特性，在日常开发中使用非常广泛。下面是官方的InnoDB引擎架构图，主要分为&lt;strong>内存结构&lt;/strong>和&lt;strong>磁盘结构&lt;/strong>两大部分。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201209-145840-0240.png" alt="20201209-145840-0240.png">&lt;/p>
&lt;p>内存结构主要包括&lt;strong>Buffer Pool&lt;/strong>、&lt;strong>Change Buffer&lt;/strong>、&lt;strong>Adaptive Hash Index&lt;/strong>和&lt;strong>Log Buffer&lt;/strong>四大组件&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Buffer Pool：缓冲池，简称BP&lt;/strong>。BP以Page页为单位，默认大小16K，BP的底层采用链表数据结构管理Page。在InnoDB访问表记录和索引时会在Page页中缓存，以后使用可以减少磁盘IO操作，提升效率。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Page管理机制&lt;/p>
&lt;p>Page根据状态可以分为三种类型：&lt;/p>
&lt;ul>
&lt;li>free page ： 空闲page，未被使用&lt;/li>
&lt;li>clean page：被使用page，数据没有被修改过&lt;/li>
&lt;li>dirty page：脏页，被使用page，数据被修改过，页中数据和磁盘的数据产生了不一致&lt;/li>
&lt;/ul>
&lt;p>针对上述三种page类型，InnoDB通过三种链表结构来维护和管理&lt;/p>
&lt;ul>
&lt;li>free list ：表示空闲缓冲区，管理free page&lt;/li>
&lt;li>flush list：表示需要刷新到磁盘的缓冲区，管理dirty page，内部page按修改时间排序。脏页即存在于flush链表，也在LRU链表中，但是两种互不影响，LRU链表负 责管理page的可用性和释放，而flush链表负责管理脏页的刷盘操作。&lt;/li>
&lt;li>lru list：表示正在使用的缓冲区，管理clean page和dirty page，缓冲区以 midpoint为基点，前面链表称为new列表区，存放经常访问的数据，占63%；后面的链表称为old列表区，存放使用较少数据，占37%。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>改进型LRU算法维护&lt;/p>
&lt;p>普通LRU：末尾淘汰法，新数据从链表头部加入，释放空间时从末尾淘汰&lt;/p>
&lt;p>改性LRU：链表分为new和old两个部分，加入元素时并不是从表头插入，而是从中间 midpoint位置插入，如果数据很快被访问，那么page就会向new列表头部移动，如果 数据没有被访问，会逐步向old尾部移动，等待淘汰。&lt;/p>
&lt;p>每当有新的page数据读取到buffer pool时，InnoDb引擎会判断是否有空闲页，是否足够，如果有就将free page从free list列表删除，放入到LRU列表中。没有空闲页，就会 根据LRU算法淘汰LRU链表默认的页，将内存空间释放分配给新的页。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Buffer Pool配置参数&lt;/p>
&lt;p>show variables like '%innodb_page_size%'; //查看page页大小&lt;/p>
&lt;p>show variables like '%innodb_old%'; //查看lru list中old列表参数&lt;/p>
&lt;p>show variables like '%innodb_buffer%'; //查看buffer pool参数&lt;/p>
&lt;p>建议：将innodb_buffer_pool_size设置为总内存大小的60%-80%， innodb_buffer_pool_instances可以设置为多个，这样可以避免缓存争夺。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Change Buffer：写缓冲区，简称CB&lt;/strong>。在进行DML操作时，如果BP没有其相应的Page数据， 并不会立刻将磁盘页加载到缓冲池，而是在CB记录缓冲变更，等未来数据被读取时，再将数据合并恢复到BP中。&lt;/p>
&lt;p>ChangeBuffer占用BufferPool空间，默认占25%，最大允许占50%，可以根据读写业务量来进行调整。参数innodb_change_buffer_max_size;&lt;/p>
&lt;p>当更新一条记录时，该记录在BufferPool存在，直接在BufferPool修改，一次内存操作。如果该记录在BufferPool不存在（没有命中），会直接在ChangeBuffer进行一次内存操作，不用再去磁盘查询数据，避免一次磁盘IO。当下次查询记录时，会先进性磁盘读取，然后再从 ChangeBuffer中读取信息合并，最终载入BufferPool中。&lt;/p>
&lt;p>写缓冲区，仅适用于非唯一普通索引页，为什么？&lt;/p>
&lt;p>如果在索引设置唯一性，在进行修改时，InnoDB必须要做唯一性校验，因此必须查询磁盘， 做一次IO操作。会直接将记录查询到BufferPool中，然后在缓冲池修改，不会在 ChangeBuffer操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Adaptive Hash Index：自适应哈希索引&lt;/strong>，用于优化对BP数据的查询。InnoDB存储引擎会监 控对表索引的查找，如果观察到建立哈希索引可以带来速度的提升，则建立哈希索引，所以称之为自适应。InnoDB存储引擎会自动根据访问的频率和模式来为某些页建立哈希索引。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Log Buffer：日志缓冲区&lt;/strong>，用来保存要写入磁盘上log文件（Redo/Undo）的数据，日志缓冲区的内容定期刷新到磁盘log文件中。日志缓冲区满时会自动将其刷新到磁盘，当遇到BLOB 或多行更新的大事务操作时，增加日志缓冲区可以节省磁盘I/O。
LogBuffer主要是用于记录InnoDB引擎日志，在DML操作时会产生Redo和Undo日志。
LogBuffer空间满了，会自动写入磁盘。可以通过将innodb_log_buffer_size参数调大，减少 磁盘IO频率&lt;/p>
&lt;p>innodb_flush_log_at_trx_commit参数控制日志刷新行为，默认为1&lt;/p>
&lt;ul>
&lt;li>0 ： 每隔1秒写日志文件和刷盘操作（写日志文件LogBuffer--&amp;gt;OS cache，刷盘OS cache--&amp;gt;磁盘文件），最多丢失1秒数据&lt;/li>
&lt;li>1：事务提交，立刻写日志文件和刷盘，数据不丢失，但是会频繁IO操作&lt;/li>
&lt;li>2：事务提交，立刻写日志文件，每隔1秒钟进行刷盘操作&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="innodb-磁盘结构">InnoDB 磁盘结构&lt;/h2>
&lt;p>InnoDB磁盘主要包含&lt;strong>Tablespaces&lt;/strong>，&lt;strong>InnoDB Data Dictionary&lt;/strong>，&lt;strong>Doublewrite Buffer&lt;/strong>、&lt;strong>Redo Log&lt;/strong> 和Undo Logs。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>表空间（Tablespaces）&lt;/strong>：用于存储表结构和数据。表空间又分为系统表空间、独立表空间、 通用表空间、临时表空间、Undo表空间等多种类型；&lt;/p>
&lt;ul>
&lt;li>
&lt;p>系统表空间（The System Tablespace）&lt;/p>
&lt;p>包含InnoDB数据字典，Doublewrite Buffer，Change Buffer，Undo Logs的存储区 域。系统表空间也默认包含任何用户在系统表空间创建的表数据和索引数据。系统表空 间是一个共享的表空间因为它是被多个表共享的。该空间的数据文件通过参数 innodb_data_file_path控制，默认值是ibdata1:12M:autoextend(文件名为ibdata1、 12MB、自动扩展)。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>独立表空间（File-Per-Table Tablespaces）&lt;/p>
&lt;p>默认开启，独立表空间是一个单表表空间，该表创建于自己的数据文件中，而非创建于 系统表空间中。当innodb_file_per_table选项开启时，表将被创建于表空间中。否则， innodb将被创建于系统表空间中。每个表文件表空间由一个.ibd数据文件代表，该文件 默认被创建于数据库目录中。表空间的表文件支持动态（dynamic）和压缩 （commpressed）行格式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通用表空间（General Tablespaces）&lt;/p>
&lt;p>通用表空间为通过create tablespace语法创建的共享表空间。通用表空间可以创建于 mysql数据目录外的其他表空间，其可以容纳多张表，且其支持所有的行格式。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">TABLESPACE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ts1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ADD&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">DATAFILE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ts1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ibd&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Engine&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">InnoDB&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">创建表空&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">间&lt;/span>&lt;span class="n">ts1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">INT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">TABLESPACE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ts1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">将表添加到&lt;/span>&lt;span class="n">ts1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">表空间&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>撤销表空间（Undo Tablespaces）&lt;/p>
&lt;p>撤销表空间由一个或多个包含Undo日志文件组成。在MySQL 5.7版本之前Undo占用的 是System Tablespace共享区，从5.7开始将Undo从System Tablespace分离了出来。 InnoDB使用的undo表空间由innodb_undo_tablespaces配置选项控制，默认为0。参 数值为0表示使用系统表空间ibdata1;大于0表示使用undo表空间undo_001、 undo_002等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>临时表空间（Temporary Tablespaces）&lt;/p>
&lt;p>分为session temporary tablespaces 和global temporary tablespace两种。session temporary tablespaces 存储的是用户创建的临时表和磁盘内部的临时表。global temporary tablespace储存用户临时表的回滚段（rollback segments ）。mysql服务 器正常关闭或异常终止时，临时表空间将被移除，每次启动时会被重新创建。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据字典（InnoDB Data Dictionary）&lt;/strong>&lt;/p>
&lt;p>InnoDB数据字典由内部系统表组成，这些表包含用于查找表、索引和表字段等对象的元数 据。元数据物理上位于InnoDB系统表空间中。由于历史原因，数据字典元数据在一定程度上 与InnoDB表元数据文件（.frm文件）中存储的信息重叠。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>双写缓冲区（Doublewrite Buffer）&lt;/strong>&lt;/p>
&lt;p>位于系统表空间，是一个存储区域。在BufferPage的page页刷新到磁盘真正的位置前，会先将数据存在Doublewrite 缓冲区。如果在page页写入过程中出现操作系统、存储子系统或 mysqld进程崩溃，InnoDB可以在崩溃恢复期间从Doublewrite 缓冲区中找到页面的一个好 备份。在大多数情况下，默认情况下启用双写缓冲区，要禁用Doublewrite 缓冲区，可以将 innodb_doublewrite设置为0。使用Doublewrite 缓冲区时建议将innodb_flush_method设 置为O_DIRECT。&lt;/p>
&lt;blockquote>
&lt;p>MySQL的innodb_flush_method这个参数控制着innodb数据文件及redo log的打开、 刷写模式。有三个值：fdatasync(默认)，O_DSYNC，O_DIRECT。设置O_DIRECT表示 数据文件写入操作会通知操作系统不要缓存数据，也不要用预读，直接从Innodb Buffer写到磁盘文件。
默认的fdatasync意思是先写入操作系统缓存，然后再调用fsync()函数去异步刷数据文 件与redo log的缓存信息。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>重做日志（Redo Log）&lt;/strong>&lt;/p>
&lt;p>重做日志是一种基于磁盘的数据结构，用于在崩溃恢复期间更正不完整事务写入的数据。 MySQL以循环方式写入重做日志文件，记录InnoDB中所有对Buffer Pool修改的日志。当出 现实例故障（像断电），导致数据未能更新到数据文件，则数据库重启时须redo，重新把数 据更新到数据文件。读写事务在执行的过程中，都会不断的产生redo log。默认情况下，重 做日志在磁盘上由两个名为ib_logfile0和ib_logfile1的文件物理表示。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>撤销日志（Undo Logs）&lt;/strong>&lt;/p>
&lt;p>撤消日志是在事务开始之前保存的被修改数据的备份，用于例外情况时回滚事务。撤消日志属于逻辑日志，根据每行记录进行记录。撤消日志存在于系统表空间、撤消表空间和临时表 空间中。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>新版本结构演变&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201209-145840-0240.png" alt="20201209-145840-0240.png">&lt;/p>
&lt;ul>
&lt;li>MySQL 5.7 版本
&lt;ul>
&lt;li>将 Undo日志表空间从共享表空间 ibdata 文件中分离出来，可以在安装 MySQL 时由用户自行指定文件大小和数量。&lt;/li>
&lt;li>增加了 temporary 临时表空间，里面存储着临时表或临时查询结果集的数据。&lt;/li>
&lt;li>Buffer Pool 大小可以动态修改，无需重启数据库实例。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>MySQL 8.0 版本
&lt;ul>
&lt;li>将InnoDB表的数据字典和Undo都从共享表空间ibdata中彻底分离出来了，以前需要 ibdata中数据字典与独立表空间ibd文件中数据字典一致才行，8.0版本就不需要了。&lt;/li>
&lt;li>temporary 临时表空间也可以配置多个物理文件，而且均为 InnoDB 存储引擎并能创建索引，这样加快了处理的速度。&lt;/li>
&lt;li>用户可以像 Oracle 数据库那样设置一些表空间，每个表空间对应多个物理文件，每个表空间可以给多个表使用，但一个表只能存储在一个表空间中。&lt;/li>
&lt;li>将Doublewrite Buffer从共享表空间ibdata中也分离出来了。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="innodb-线程模型">InnoDB 线程模型&lt;/h2>
&lt;p>​ &lt;img src="https://gitee.com/chuchin/img/raw/master/20201209-152400-0050.png" alt="20201209-152400-0050.png">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>IO Thread&lt;/strong>&lt;/p>
&lt;p>在InnoDB中使用了大量的AIO（Async IO）来做读写处理，这样可以极大提高数据库的性能。在 InnoDB1.0版本之前共有4个IO Thread，分别是write，read，insert buffer和log thread，后来版本将read thread和write thread分别增大到了4个，一共有10个了。&lt;/p>
&lt;ul>
&lt;li>read thread ： 负责读取操作，将数据从磁盘加载到缓存page页。4个&lt;/li>
&lt;li>write thread：负责写操作，将缓存脏页刷新到磁盘。4个&lt;/li>
&lt;li>log thread：负责将日志缓冲区内容刷新到磁盘。1个&lt;/li>
&lt;li>insert buffer thread ：负责将写缓冲内容刷新到磁盘。1个&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Purge Thread&lt;/strong>&lt;/p>
&lt;p>事务提交之后，其使用的undo日志将不再需要，因此需要Purge Thread回收已经分配的undo 页。&lt;/p>
&lt;p>show variables like '%innodb_purge_threads%';&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Page Cleaner Thread&lt;/strong>&lt;/p>
&lt;p>作用是将脏数据刷新到磁盘，脏数据刷盘后相应的redo log也就可以覆盖，即可以同步数据，又能 达到redo log循环使用的目的。会调用write thread线程处理。&lt;/p>
&lt;p>show variables like '%innodb_page_cleaners%';&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Master Thread&lt;/strong>&lt;/p>
&lt;p>Master thread是InnoDB的主线程，负责调度其他各线程，优先级最高。作用是将缓冲池中的数 据异步刷新到磁盘 ，保证数据的一致性。包含：脏页的刷新（page cleaner thread）、undo页 回收（purge thread）、redo日志刷新（log thread）、合并写缓冲等。内部有两个主处理，分别是每隔1秒和10秒处理。&lt;/p>
&lt;p>每1秒的操作：&lt;/p>
&lt;ul>
&lt;li>刷新日志缓冲区，刷到磁盘&lt;/li>
&lt;li>合并写缓冲区数据，根据IO读写压力来决定是否操作&lt;/li>
&lt;li>刷新脏页数据到磁盘，根据脏页比例达到75%才操作（innodb_max_dirty_pages_pct， innodb_io_capacity）&lt;/li>
&lt;/ul>
&lt;p>每10秒的操作：&lt;/p>
&lt;ul>
&lt;li>刷新脏页数据到磁盘&lt;/li>
&lt;li>合并写缓冲区数据&lt;/li>
&lt;li>刷新日志缓冲区&lt;/li>
&lt;li>删除无用的undo页&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="innodb-数据文件">InnoDB 数据文件&lt;/h2>
&lt;h3 id="innodb-文件存储结构">InnoDB 文件存储结构&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201209-153610-0316.png" alt="20201209-153610-0316.png">&lt;/p>
&lt;p>InnoDB数据文件存储结构：&lt;/p>
&lt;p>分为一个ibd数据文件--&amp;gt;Segment（段）--&amp;gt;Extent（区）--&amp;gt;Page（页）--&amp;gt;Row（行）&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Tablesapce 表空间&lt;/strong>&lt;/p>
&lt;p>用于存储多个ibd数据文件，用于存储表的记录和索引。一个文件包含多个段。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Segment 段&lt;/strong>&lt;/p>
&lt;p>段，用于管理多个Extent，分为数据段（Leaf node segment）、索引段（Non-leaf node segment）、回滚段（Rollback segment）。一个表至少会有两个segment，一个管理数 据，一个管理索引。每多创建一个索引，会多两个segment。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Extent 区&lt;/strong>&lt;/p>
&lt;p>区，一个区固定包含64个连续的页，大小为1M。当表空间不足，需要分配新的页资源，不会 一页一页分，直接分配一个区。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Page 页&lt;/strong>&lt;/p>
&lt;p>页，用于存储多个Row行记录，大小为16K。包含很多种页类型，比如数据页，undo页，系统页，事务数据页，大的BLOB对象页。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Row 行&lt;/strong>&lt;/p>
&lt;p>行，包含了记录的字段值，事务ID（Trx id）、滚动指针（Roll pointer）、字段指针（Field pointers）等信息。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Page是文件最基本的单位，无论何种类型的page，都是由page header，page trailer和page body组成。如下图所示&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201209-155515-0154.png" alt="20201209-155515-0154.png">&lt;/p>
&lt;h3 id="innodb-文件存储格式">InnoDB 文件存储格式&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>通过 SHOW TABLE STATUS 命令&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201209-151417-0165.png" alt="20201209-151417-0165.png">&lt;/p>
&lt;p>一般情况下，如果row_format为REDUNDANT、COMPACT，文件格式为Antelope；如果 row_format为DYNAMIC和COMPRESSED，文件格式为Barracuda。&lt;/p>
&lt;p>通过 information_schema 查看指定表的文件格式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">information_schema&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">innodb_sys_tables&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="file-文件格式file-format">File 文件格式（File-Format）&lt;/h3>
&lt;p>在早期的InnoDB版本中，文件格式只有一种，随着InnoDB引擎的发展，出现了新文件格式，用于 支持新的功能。目前InnoDB只支持两种文件格式：&lt;strong>Antelope&lt;/strong> 和 &lt;strong>Barracuda&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>Antelope: 先前未命名的，最原始的InnoDB文件格式，它支持两种行格式：COMPACT和 REDUNDANT，MySQL 5.6及其以前版本默认格式为Antelope。&lt;/li>
&lt;li>Barracuda: 新的文件格式。它支持InnoDB的所有行格式，包括新的行格式：COMPRESSED 和 DYNAMIC。&lt;/li>
&lt;/ul>
&lt;p>通过innodb_file_format 配置参数可以设置InnoDB文件格式，之前默认值为Antelope，5.7版本 开始改为Barracuda。&lt;/p>
&lt;h3 id="row行格式row_format">Row行格式（Row_format）&lt;/h3>
&lt;p>表的行格式决定了它的行是如何物理存储的，这反过来又会影响查询和DML操作的性能。如果在 单个page页中容纳更多行，查询和索引查找可以更快地工作，缓冲池中所需的内存更少，写入更 新时所需的I/O更少。&lt;/p>
&lt;p>InnoDB存储引擎支持四种行格式：REDUNDANT、COMPACT、DYNAMIC和COMPRESSED。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201209-155521-0799.png" alt="20201209-155521-0799.png">&lt;/p>
&lt;p>DYNAMIC和COMPRESSED新格式引入的功能有：数据压缩、增强型长列数据的页外存储和大索引前缀。&lt;/p>
&lt;p>每个表的数据分成若干页来存储，每个页中采用B树结构存储；&lt;/p>
&lt;p>如果某些字段信息过长，无法存储在B树节点中，这时候会被单独分配空间，此时被称为溢出页， 该字段被称为页外列。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>REDUNDANT 行格式&lt;/p>
&lt;p>使用REDUNDANT行格式，表会将变长列值的前768字节存储在B树节点的索引记录中，其余的存储在溢出页上。对于大于等于786字节的固定长度字段InnoDB会转换为变长字段，以便 能够在页外存储。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>COMPACT 行格式&lt;/p>
&lt;p>与REDUNDANT行格式相比，COMPACT行格式减少了约20%的行存储空间，但代价是增加了 某些操作的CPU使用量。如果系统负载是受缓存命中率和磁盘速度限制，那么COMPACT格式 可能更快。如果系统负载受到CPU速度的限制，那么COMPACT格式可能会慢一些。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>DYNAMIC 行格式&lt;/p>
&lt;p>使用DYNAMIC行格式，InnoDB会将表中长可变长度的列值完全存储在页外，而索引记录只 包含指向溢出页的20字节指针。大于或等于768字节的固定长度字段编码为可变长度字段。 DYNAMIC行格式支持大索引前缀，最多可以为3072字节，可通过innodb_large_prefix参数 控制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>COMPRESSED 行格式&lt;/p>
&lt;p>COMPRESSED行格式提供与DYNAMIC行格式相同的存储特性和功能，但增加了对表和索引数据压缩的支持。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>在创建表和索引时，文件格式都被用于每个InnoDB表数据文件（其名称与*.ibd匹配）。修改文件 格式的方法是重新创建表及其索引，最简单方法是对要修改的每个表使用以下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">ALTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">表名&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ROW_FORMAT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="err">格式类型&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="undo-log">Undo Log&lt;/h2>
&lt;h3 id="undo-log介绍">Undo Log介绍&lt;/h3>
&lt;p>Undo：意为撤销或取消，以撤销操作为目的，返回指定某个状态的操作。&lt;/p>
&lt;p>Undo Log：数据库事务开始之前，会将要修改的记录存放到 Undo 日志里，当事务回滚时或者数据库崩溃时，可以利用 Undo 日志，撤销未提交事务对数据库产生的影响。&lt;/p>
&lt;p>Undo Log产生和销毁：Undo Log在事务开始前产生；事务在提交时，并不会立刻删除undo log，innodb会将该事务对应的undo log放入到删除列表中，后面会通过后台线程purge thread进 行回收处理。Undo Log属于逻辑日志，记录一个变化过程。例如执行一个delete，undolog会记 录一个insert；执行一个update，undolog会记录一个相反的update。&lt;/p>
&lt;p>Undo Log存储：undo log采用段的方式管理和记录。在innodb数据文件中包含一种rollback segment回滚段，内部包含1024个undo log segment。可以通过下面一组参数来控制Undo log存储。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">show&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">variables&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">like&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;%innodb_undo%&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="undo-log作用">Undo Log作用&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>实现事务的原子性&lt;/p>
&lt;p>Undo Log 是为了实现事务的原子性而出现的产物。事务处理过程中，如果出现了错误或者用户执行了 ROLLBACK 语句，MySQL 可以利用 Undo Log 中的备份将数据恢复到事务开始之前的状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>实现多版本并发控制（MVCC）&lt;/p>
&lt;p>Undo Log 在 MySQL InnoDB 存储引擎中用来实现多版本并发控制。事务未提交之前，Undo Log 保存了未提交之前的版本数据，Undo Log 中的数据可作为数据旧版本快照供其他并发事务进行快照读。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201209-151329-0124.png" alt="20201209-151329-0124.png">&lt;/p>
&lt;p>事务A手动开启事务，执行更新操作，首先会把更新命中的数据备份到 Undo Buffer 中。&lt;/p>
&lt;p>事务B手动开启事务，执行查询操作，会读取 Undo 日志数据返回，进行快照读&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="redo-log-和-binlog">Redo Log 和 Binlog&lt;/h2>
&lt;p>Redo Log和Binlog是MySQL日志系统中非常重要的两种机制，也有很多相似之处，下面介绍下两者细节和区别。&lt;/p>
&lt;h3 id="redo-log-日志">Redo Log 日志&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Redo Log 介绍&lt;/p>
&lt;p>Redo：顾名思义就是重做。以恢复操作为目的，在数据库发生意外时重现操作。 Redo Log：指事务中修改的任何数据，将最新的数据备份存储的位置（Redo Log），被称为重做日志。
Redo Log 的生成和释放：随着事务操作的执行，就会生成Redo Log，在事务提交时会将产生 Redo Log写入Log Buffer，并不是随着事务的提交就立刻写入磁盘文件。等事务操作的脏页写入到磁盘之后，Redo Log 的使命也就完成了，Redo Log占用的空间就可以重用（被覆盖写入）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Redo Log 工作原理&lt;/p>
&lt;p>Redo Log 是为了实现事务的持久性而出现的产物。防止在发生故障的时间点，尚有脏页未写入表的 IBD 文件中，在重启 MySQL 服务的时候，根据 Redo Log 进行重做，从而达到事务的未入磁盘 数据进行持久化这一特性。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201209-155733-0786.png" alt="20201209-155733-0786.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Redo Log 写入机制&lt;/p>
&lt;p>Redo Log 文件内容是以顺序循环的方式写入文件，写满时则回溯到第一个文件，进行覆盖写。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201209-154835-0658.png" alt="20201209-154835-0658.png">&lt;/p>
&lt;p>如图所示：&lt;/p>
&lt;ul>
&lt;li>write pos 是当前记录的位置，一边写一边后移，写到最后一个文件末尾后就回到 0 号文件开头；&lt;/li>
&lt;li>checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件；&lt;/li>
&lt;/ul>
&lt;p>write pos 和 checkpoint 之间还空着的部分，可以用来记录新的操作。如果 write pos 追上 checkpoint，表示写满，这时候不能再执行新的更新，得停下来先擦掉一些记录，把 checkpoint 推进一下。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Redo Log相关配置参数&lt;/p>
&lt;p>每个InnoDB存储引擎至少有1个重做日志文件组（group），每个文件组至少有2个重做日志文件，默认为ib_logfile0和ib_logfile1。可以通过下面一组参数控制Redo Log存储：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">show&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">variables&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">like&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;%innodb_log%&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Redo Buffer 持久化到 Redo Log 的策略，可通过 Innodb_flush_log_at_trx_commit 设置：&lt;/p>
&lt;ul>
&lt;li>0：每秒提交 Redo buffer -&amp;gt;OS cache -&amp;gt; flush cache to disk，可能丢失一秒内的事务数据。由后台Master线程每隔 1秒执行一次操作。&lt;/li>
&lt;li>1（默认值）：每次事务提交执行 Redo Buffer -&amp;gt; OS cache -&amp;gt; flush cache to disk，最安全，性能最差的方式。&lt;/li>
&lt;li>2：每次事务提交执行 Redo Buffer -&amp;gt; OS cache，然后由后台Master线程再每隔1秒执行OS cache -&amp;gt; flush cache to disk 的操作。&lt;/li>
&lt;/ul>
&lt;p>一般建议选择取值2，因为 MySQL 挂了数据没有损失，整个服务器挂了才会损失1秒的事务提交数据。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201209-151741-0911.png" alt="20201209-151741-0911.png">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="binlog-日志">Binlog 日志&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Binlog记录模式&lt;/strong>&lt;/p>
&lt;p>Redo Log 是属于InnoDB引擎所特有的日志，而MySQL Server也有自己的日志，即 Binary log（二进制日志），简称Binlog。Binlog是记录所有数据库表结构变更以及表数据修改的二进制日志，不会记录SELECT和SHOW这类操作。Binlog日志是以事件形式记录，还包含语句所执行的消耗时间。开启Binlog日志有以下两个最重要的使用场景。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>主从复制&lt;/strong>：在主库中开启Binlog功能，这样主库就可以把Binlog传递给从库，从库拿到 Binlog后实现数据恢复达到主从数据一致性。&lt;/li>
&lt;li>&lt;strong>数据恢复&lt;/strong>：通过mysqlbinlog工具来恢复数据。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Binlog文件名&lt;/strong>默认为“主机名_binlog-序列号”格式，例如oak_binlog-000001，也可以在配置文件 中指定名称。文件记录模式有STATEMENT、ROW和MIXED三种，具体含义如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>ROW（row-based replication, RBR）&lt;/strong>：日志中会记录每一行数据被修改的情况，然后在 slave端对相同的数据进行修改。&lt;/p>
&lt;p>优点：能清楚记录每一个行数据的修改细节，能完全实现主从数据同步和数据的恢复。&lt;/p>
&lt;p>缺点：批量操作，会产生大量的日志，尤其是alter table会让日志暴涨。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>STATMENT（statement-based replication, SBR）&lt;/strong>：每一条被修改数据的SQL都会记录到 master的Binlog中，slave在复制的时候SQL进程会解析成和原来master端执行过的相同的 SQL再次执行。简称SQL语句复制。&lt;/p>
&lt;p>优点：日志量小，减少磁盘IO，提升存储和恢复速度&lt;/p>
&lt;p>缺点：在某些情况下会导致主从数据不一致，比如last_insert_id()、now()等函数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>MIXED（mixed-based replication, MBR）&lt;/strong>：以上两种模式的混合使用，一般会使用 STATEMENT模式保存binlog，对于STATEMENT模式无法复制的操作使用ROW模式保存 binlog，MySQL会根据执行的SQL语句选择写入模式。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Binlog写入机制&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>根据记录模式和操作触发event事件生成log event（事件触发执行机制）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将事务执行过程中产生log event写入缓冲区，每个事务线程都有一个缓冲区&lt;/p>
&lt;p>Log Event保存在一个binlog_cache_mngr数据结构中，在该结构中有两个缓冲区，一个是 stmt_cache，用于存放不支持事务的信息；另一个是trx_cache，用于存放支持事务的信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>事务在提交阶段会将产生的log event写入到外部binlog文件中。&lt;/p>
&lt;p>不同事务以串行方式将log event写入binlog文件中，所以一个事务包含的log event信息在 binlog文件中是连续的，中间不会插入其他事务的log event。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Binlog文件操作&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Binlog状态查看&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">show&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">variables&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">like&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;log_bin&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>开启Binlog功能&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="n">mysql&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">global&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">log_bin&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">mysqllogbin&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">ERROR&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1238&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">HY000&lt;/span>&lt;span class="p">):&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Variable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;log_bin&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">is&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">read&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">only&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">variable&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>需要修改my.cnf或my.ini配置文件，在[mysqld]下面增加log_bin=mysql_bin_log，重启 MySQL服务。&lt;/p>
&lt;pre>&lt;code>#log-bin=ON
#log-bin-basename=mysqlbinlog
binlog-format=ROW
log-bin=mysqlbinlog
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>使用show binlog events命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">show&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">binary&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">logs&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">等价于&lt;/span>&lt;span class="k">show&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">master&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">logs&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">show&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">master&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">show&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">binlog&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">events&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">show&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">binlog&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">events&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;mysqlbinlog.000001&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用mysqlbinlog 命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="n">mysqlbinlog&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;文件名&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">mysqlbinlog&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;文件名&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;test.sql&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用 binlog 恢复数据&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="o">//&lt;/span>&lt;span class="err">按指定时间恢复&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">mysqlbinlog&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">--start-datetime=&amp;#34;2020-04-25 18:00:00&amp;#34; --stopdatetime=&amp;#34;2020-04-26 00:00:00&amp;#34; mysqlbinlog.000002 | mysql -uroot -p1234
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">按事件位置号恢复&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mysqlbinlog&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">--start-position=154 --stop-position=957 mysqlbinlog.000002 | mysql -uroot -p1234
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>mysqldump：定期全部备份数据库数据。mysqlbinlog可以做增量备份和恢复操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除Binlog文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="n">purge&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">binary&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">logs&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">to&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;mysqlbinlog.000001&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">删除指定文件&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">purge&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">binary&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">logs&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">before&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;2020-04-28 00:00:00&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">删除指定时间之前的文件&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">reset&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">master&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">清除所有文件&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以通过设置expire_logs_days参数来启动自动清理功能。默认值为0表示没启用。设置为1表示超 出1天binlog文件会自动删除掉。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="redo-log-和-binlog区别">Redo Log 和 Binlog区别&lt;/h2>
&lt;ul>
&lt;li>Redo Log是属于InnoDB引擎功能，Binlog是属于MySQL Server自带功能，并且是以二进制 文件记录。&lt;/li>
&lt;li>Redo Log属于物理日志，记录该数据页更新状态内容，Binlog是逻辑日志，记录更新过程。&lt;/li>
&lt;li>Redo Log日志是循环写，日志空间大小是固定，Binlog是追加写入，写完一个写下一个，不会覆盖使用。&lt;/li>
&lt;li>Redo Log作为服务器异常宕机后事务数据自动恢复使用，Binlog可以作为主从复制和数据恢 复使用。Binlog没有自动crash-safe能力。&lt;/li>
&lt;/ul>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​&lt;/p></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category></item><item><title>MySQL 架构原理 运行机制</title><link>https://chuchin.cn/tech/storage/mysql/mysql-operation-mechanism/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-operation-mechanism/</guid><pubDate>Thu, 03 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201209-143324-0299.png" alt="20201209-143324-0299.png">&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>建立连接（Connectors&amp;amp;Connection Pool）&lt;/strong>&lt;/p>
&lt;p>通过客户端/服务器通信协议与MySQL建立连 接。MySQL 客户端与服务端的通信方式是 “ 半双工 ”。对于每一个 MySQL 的连接，时刻都有一个线程状态来标识这个连接正在做什么。&lt;/p>
&lt;p>通讯机制：&lt;/p>
&lt;ul>
&lt;li>全双工：能同时发送和接收数据，例如平时打电话。&lt;/li>
&lt;li>半双工：指的某一时刻，要么发送数据，要么接收数据，不能同时。例如早期对讲机&lt;/li>
&lt;li>单工：只能发送数据或只能接收数据。例如单行道&lt;/li>
&lt;/ul>
&lt;p>线程状态：&lt;/p>
&lt;p>show processlist; //查看用户正在运行的线程信息，root用户能查看所有线程，其他用户只能看自己的&lt;/p>
&lt;ul>
&lt;li>id：线程ID，可以使用kill xx；&lt;/li>
&lt;li>user：启动这个线程的用户&lt;/li>
&lt;li>Host：发送请求的客户端的IP和端口号&lt;/li>
&lt;li>db：当前命令在哪个库执行&lt;/li>
&lt;li>Command：该线程正在执行的操作命令
&lt;ul>
&lt;li>Create DB：正在创建库操作&lt;/li>
&lt;li>Drop DB：正在删除库操作&lt;/li>
&lt;li>Execute：正在执行一个PreparedStatement&lt;/li>
&lt;li>Close Stmt：正在关闭一个PreparedStatement&lt;/li>
&lt;li>Query：正在执行一个语句&lt;/li>
&lt;li>Sleep：正在等待客户端发送语句&lt;/li>
&lt;li>Quit：正在退出&lt;/li>
&lt;li>Shutdown：正在关闭服务器&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Time：表示该线程处于当前状态的时间，单位是秒&lt;/li>
&lt;li>State：线程状态
&lt;ul>
&lt;li>Updating：正在搜索匹配记录，进行修改&lt;/li>
&lt;li>Sleeping：正在等待客户端发送新请求&lt;/li>
&lt;li>Starting：正在执行请求处理&lt;/li>
&lt;li>Checking table：正在检查数据表&lt;/li>
&lt;li>Closing table : 正在将表中数据刷新到磁盘中&lt;/li>
&lt;li>Locked：被其他查询锁住了记录&lt;/li>
&lt;li>Sending Data：正在处理Select查询，同时将结果发送给客户端&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Info：一般记录线程执行的语句，默认显示前100个字符。想查看完整的使用show full processlist;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>查询缓存（Cache&amp;amp;Buffer）&lt;/strong>&lt;/p>
&lt;p>这是MySQL的一个可优化查询的地方，如果开启了查询缓存且在查询缓存过程中查询到完全相同的SQL语句，则将查询结果直接返回给客户端；如果没有开启查询缓存或者没有查询到完全相同的 SQL 语句则会由解析器进行语法语义解析，并生成“解析树”。&lt;/p>
&lt;ul>
&lt;li>缓存Select查询的结果和SQL语句&lt;/li>
&lt;li>执行Select查询时，先查询缓存，判断是否存在可用的记录集，要求是否完全相同（包括参数值），这样才会匹配缓存数据命中。&lt;/li>
&lt;li>即使开启查询缓存，以下SQL也不能缓存
&lt;ul>
&lt;li>查询语句使用SQL_NO_CACHE&lt;/li>
&lt;li>查询的结果大于query_cache_limit设置&lt;/li>
&lt;li>查询中有一些不确定的参数，比如now()&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>show variables like '%query_cache%'; //查看查询缓存是否启用，空间大小，限制等&lt;/li>
&lt;li>show status like 'Qcache%'; //查看更详细的缓存参数，可用缓存空间，缓存块，缓存多少等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>解析器（Parser）&lt;/strong>&lt;/p>
&lt;p>客户端发送的SQL进行语法解析，生成&amp;quot;解析树&amp;quot;。预处理器根据一些MySQL 规则进一步检查“解析树”是否合法，例如这里将检查数据表和数据列是否存在，还会解析名字和别名，看看它们是否有歧义，最后生成新的“解析树”。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>查询优化器（Optimizer）&lt;/strong>&lt;/p>
&lt;p>根据“解析树”生成最优的执行计划。MySQL使用很多优化策略生成最优的执行计划，可以分为两类：静态优化（编译时优化）、动态优化（运行时优化）。&lt;/p>
&lt;ul>
&lt;li>等价变换策略
&lt;ul>
&lt;li>5=5 and a&amp;gt;5 改成 a &amp;gt; 5&lt;/li>
&lt;li>a &amp;lt; b and a=5 改成b&amp;gt;5 and a=5&lt;/li>
&lt;li>基于联合索引，调整条件位置等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>优化count、min、max等函数
&lt;ul>
&lt;li>InnoDB引擎min函数只需要找索引最左边&lt;/li>
&lt;li>InnoDB引擎max函数只需要找索引最右边&lt;/li>
&lt;li>MyISAM引擎count(*)，不需要计算，直接返回&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>提前终止查询
&lt;ul>
&lt;li>使用了limit查询，获取limit所需的数据，就不在继续遍历后面数据&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>in的优化
&lt;ul>
&lt;li>MySQL对in查询，会先进行排序，再采用二分法查找数据。比如where id in (2,1,3)，变 成 in (1,2,3)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>查询执行引擎&lt;/strong>&lt;/p>
&lt;p>负责执行 SQL 语句，此时查询执行引擎会根据 SQL 语句中表的存储引擎类型，以及对应的API接口与底层存储引擎缓存或者物理文件的交互，得到查询结果并返回给客户端。若开启用查询缓存，这时会将SQL 语句和结果完整地保存到查询缓存（Cache&amp;amp;Buffer）中，以后若有 相同的 SQL 语句执行则直接返回结果。&lt;/p>
&lt;ul>
&lt;li>如果开启了查询缓存，先将查询结果做缓存操作&lt;/li>
&lt;li>返回结果过多，采用增量模式返回&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category></item><item><title>MySQL 架构原理 体系架构</title><link>https://chuchin.cn/tech/storage/mysql/mysql-system-structure/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-system-structure/</guid><pubDate>Wed, 02 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201209-140825-0791.png" alt="20201209-140825-0791.png">&lt;/p>
&lt;p>MySQL Server架构自顶向下大致可以分网络连接层、服务层、存储引擎层和系统文件层。&lt;/p>
&lt;h2 id="网络连接层">网络连接层&lt;/h2>
&lt;p>客户端连接器（Client Connectors）：提供与MySQL服务器建立的支持。目前几乎支持所有主流 的服务端编程技术，例如常见的 Java、C、Python、.NET等，它们通过各自API技术与MySQL建立连接。&lt;/p>
&lt;h2 id="服务层mysql-server">服务层（MySQL Server）&lt;/h2>
&lt;p>服务层是MySQL Server的核心，主要包含系统管理和控制工具、连接池、SQL接口、解析器、查询优化器和缓存六个部分。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>连接池（Connection Pool）&lt;/strong>：负责存储和管理客户端与数据库的连接，一个线程负责管理一个连接。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>系统管理和控制工具（Management Services &amp;amp; Utilities）&lt;/strong>：例如备份恢复、安全管理、集群管理等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>SQL接口（SQL Interface）&lt;/strong>：用于接受客户端发送的各种SQL命令，并且返回用户需要查询的结果。比如DML、DDL、存储过程、视图、触发器等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>解析器（Parser）&lt;/strong>：负责将请求的SQL解析生成一个&amp;quot;解析树&amp;quot;。然后根据一些MySQL规则进一步检查解析树是否合法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>查询优化器（Optimizer）&lt;/strong>：当“解析树”通过解析器语法检查后，将交由优化器将其转化成执行计划，然后与存储引擎交互。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">uid&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">gender&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>选取--》投影--》联接 策略&lt;/p>
&lt;ol>
&lt;li>select先根据where语句进行选取，并不是查询出全部数据再过滤&lt;/li>
&lt;li>select查询根据uid和name进行属性投影，并不是取出所有字段&lt;/li>
&lt;li>将前面选取和投影联接起来最终生成查询结果&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>缓存（Cache&amp;amp;Buffer）&lt;/strong>：缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，权限缓存，引擎缓存等。如果查询缓存有命中的查询结果，查询语句就可以直接去查询缓存中取数据。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="存储引擎层pluggable-storage-engines">存储引擎层（Pluggable Storage Engines）&lt;/h2>
&lt;p>存储引擎负责MySQL中数据的存储与提取，与底层系统文件进行交互。MySQL存储引擎是插件式的， 服务器中的查询执行引擎通过接口与存储引擎进行通信，接口屏蔽了不同存储引擎之间的差异 。现在有 很多种存储引擎，各有各的特点，最常见的是MyISAM和InnoDB。&lt;/p>
&lt;h2 id="系统文件层file-system">系统文件层（File System）&lt;/h2>
&lt;p>该层负责将数据库的数据和日志存储在文件系统之上，并完成与存储引擎的交互，是文件的物理存储层。主要包含日志文件，数据文件，配置文件，pid 文件，socket 文件等。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>日志文件&lt;/p>
&lt;ul>
&lt;li>
&lt;p>错误日志（Error log）&lt;/p>
&lt;p>默认开启，show variables like '%log_error%'&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通用查询日志（General query log）&lt;/p>
&lt;p>记录一般查询语句，show variables like '%general%';&lt;/p>
&lt;/li>
&lt;li>
&lt;p>二进制日志（binary log）&lt;/p>
&lt;p>记录了对MySQL数据库执行的更改操作，并且记录了语句的发生时间、执行时长；但是它不 记录select、show等不修改数据库的SQL。主要用于数据库恢复和主从复制。&lt;/p>
&lt;p>show variables like '%log_bin%'; //是否开启&lt;/p>
&lt;p>show variables like '%binlog%'; //参数查看&lt;/p>
&lt;p>show binary logs;//查看日志文件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>慢查询日志（Slow query log）&lt;/p>
&lt;p>记录所有执行时间超时的查询SQL，默认是10秒。&lt;/p>
&lt;p>show variables like '%slow_query%'; //是否开启&lt;/p>
&lt;p>show variables like '%long_query_time%'; //时长&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>配置文件&lt;/p>
&lt;p>用于存放MySQL所有的配置信息文件，比如my.cnf、my.ini等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据文件&lt;/p>
&lt;ul>
&lt;li>db.opt 文件：记录这个库的默认使用的字符集和校验规则。&lt;/li>
&lt;li>frm 文件：存储与表相关的元数据（meta）信息，包括表结构的定义信息等，每一张表都会 有一个frm 文件。&lt;/li>
&lt;li>MYD 文件：MyISAM 存储引擎专用，存放 MyISAM 表的数据（data)，每一张表都会有一个 .MYD 文件。&lt;/li>
&lt;li>MYI 文件：MyISAM 存储引擎专用，存放 MyISAM 表的索引相关信息，每一张 MyISAM 表对 应一个 .MYI 文件。&lt;/li>
&lt;li>ibd文件和 IBDATA 文件：存放 InnoDB 的数据文件（包括索引）。InnoDB 存储引擎有两种 表空间方式：独享表空间和共享表空间。独享表空间使用 .ibd 文件来存放数据，且每一张 InnoDB 表对应一个 .ibd 文件。共享表空间使用 .ibdata 文件，所有表共同使用一个（或多 个，自行配置）.ibdata 文件。&lt;/li>
&lt;li>ibdata1 文件：系统表空间数据文件，存储表元数据、Undo日志等 。&lt;/li>
&lt;li>ib_logfile0、ib_logfile1 文件：Redo log 日志文件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>pid 文件&lt;/p>
&lt;p>pid 文件是 mysqld 应用程序在 Unix/Linux 环境下的一个进程文件，和许多其他 Unix/Linux 服务 端程序一样，它存放着自己的进程 id。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>socket 文件&lt;/p>
&lt;p>socket 文件也是在 Unix/Linux 环境下才有的，用户在 Unix/Linux 环境下客户端连接可以不通过 TCP/IP 网络而直接使用 Unix Socket 来连接 MySQL。&lt;/p>
&lt;/li>
&lt;/ul></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category></item><item><title>MySQL 简述</title><link>https://chuchin.cn/tech/storage/mysql/mysql-introduction/</link><guid isPermaLink="true">https://chuchin.cn/tech/storage/mysql/mysql-introduction/</guid><pubDate>Tue, 01 Sep 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h2 id="基础">基础&lt;/h2>
&lt;p>MySQL软件下载和安装（建议版本5.7.28）熟悉MySQL工具和基本SQL操作，熟悉主键、外键、非空、唯一等约束，熟悉索引、事务概念和基本使用&lt;/p>
&lt;p>Window : MySQL WorkBench, Navicat, SQLyog,HeidiSQL,MySQL Front&lt;/p>
&lt;p>Linux：MySQL WorkBeanch, Navicat&lt;/p>
&lt;p>Mac：Navicat、Sequel Pro&lt;/p>
&lt;h2 id="主要知识">主要知识&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>MySQL架构原理和存储机制&lt;/p>
&lt;p>MySQL体系结构（内存结构、磁盘结构）、SQL运行机制、存储引擎、Undo/Redo Log等等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MySQL索引存储机制和工作原理&lt;/p>
&lt;p>索引存储结构、索引查询原理、索引分析和优化、查询优化等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MySQL事务和锁工作原理&lt;/p>
&lt;p>事务隔离级别、事务并发处理、锁机制和实战等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MySQL集群架构及相关原理&lt;/p>
&lt;p>集群架构设计理念、主从架构、双主架构、分库分表等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>互联网海量数据处理实战&lt;/p>
&lt;p>ShardingSphere、MyCat中间实战操作，分库分表实战&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MySQL第三方工具实战&lt;/p>
&lt;p>同步工具、运维工具、监控工具等&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="mysql-起源与分支">MySQL 起源与分支&lt;/h2>
&lt;p>MySQL 是最流行的关系型数据库软件之一，由于其体积小、速度快、开源免费、简单易用、维护成本 低等，在集群架构中易于扩展、高可用，因此深受开发者和企业的欢迎。&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2020/12/09/UXn29Hc1fDMtQFh.png" alt="ee883c40ba5ab4e8f958438884e6cc9.png">&lt;/p>
&lt;p>Oracle和MySQL是世界市场占比最高的两种数据库。&lt;/p>
&lt;p>IOE：IBM的服务器，Oracle数据库，EMC存储设备。都是有钱的公司产品采购，例如银行、电信、石 油、证券等大企业。&lt;/p>
&lt;p>Oracle：垄断，有钱的大企业采用，互联网企业之外使用第一。&lt;/p>
&lt;p>MySQL：互联网高速发展，互联网企业使用第一。&lt;/p>
&lt;p>MySQL发展历程如下：&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2020/12/09/ejZ5r3f9z2JD4kC.png" alt="f9f5cf1aaa435e94fed925c91fe4477.png">&lt;/p>
&lt;p>MySQL主流分支如下图所示：&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2020/12/09/I1lLiuVxGaWfbCH.png" alt="8f28f4d84967d6ac60033c6c1015ffe.png">&lt;/p>
&lt;p>MySQL从最初的1.0、3.1到后来的8.0，发生了各种各样的变化。被Oracle收购后，MySQL的版本演化 出了多个分支，除了需要付费的MySQL企业版本，还有很多MySQL社区版本。还有一条分支非常流行 的开源分支版本叫Percona Server，它是MySQL的技术支持公司Percona推出的，也是在实际工作中经 常碰到的。Percona Server在MySQL官方版本的基础上做了一些补丁和优化，同时推出了一些工具。另 外一个非常不错的版本叫MariaDB，它是MySQL的公司被Oracle收购后，MySQL的创始人Monty先生，按原来的思路重新写的一套新数据库，同时也把 InnoDB 引擎作为主要存储引擎，也算 MySQL 的分支。&lt;/p>
&lt;h2 id="mysql-应用架构的演变">MySQL 应用架构的演变&lt;/h2>
&lt;p>下面是网站在不同的并发访问量级和数据量级下，MySQL应用架构的演变过程&lt;/p>
&lt;p>用户请求--》 应用层 --》服务层 --》存储层&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>架构V1.0 - 单机单库&lt;/strong>&lt;/p>
&lt;p>一个简单的小型网站或者应用背后的架构可以非常简单, 数据存储只需要一个MySQL Instance就能满足数据读取和写入需求（这里忽略掉了数据备份的实例），处于这个阶段的系统，一般会把所有的信息存到一个MySQL Instance里面。&lt;/p>
&lt;p>V1.0 瓶颈：&lt;/p>
&lt;ul>
&lt;li>数据量太大，超出一台服务器承受&lt;/li>
&lt;li>读写操作量太大，超出一台服务器承受&lt;/li>
&lt;li>一台服务器挂了，应用也会挂掉（可用性差）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>架构V2.0 - 主从架构&lt;/strong>&lt;/p>
&lt;p>V2.0架构主要解决架构V1.0下的高可用和读扩展问题，通过给Instance挂载从库解决读取的压力， 主库宕机也可以通过主从切换保障高可用。在MySQL的场景下就是通过主从结构（双主结构也属 于特殊的主从），主库抗写压力，通过从库来分担读压力，对于写少读多的应用，V2.0主从架构 完全能够胜任。&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2020/12/09/jnxG3gMTO954Umk.png" alt="80618c47e94bc815cdf29daa5cb6de8.png">&lt;/p>
&lt;p>V2.0瓶颈：&lt;/p>
&lt;ul>
&lt;li>数据量太大，超出一台服务器承受&lt;/li>
&lt;li>写操作太大，超出一台M服务器承受&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>架构V3.0 - 分库分表&lt;/strong>&lt;/p>
&lt;p>对于V1.0和V2.0遇到写入瓶颈和存储瓶颈时，可以通过水平拆分来解决，水平拆分和垂直拆分有较大区别，垂直拆分拆完的结果，每一个实例都是拥有全部数据的，而水平拆分之后，任何实例都只有全量的1/n的数据。以下图所示，将Userinfo拆分为3个Sharding，每个Sharding持有总量的 1/3数据，3个Sharding数据的总和等于一份完整数据&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2020/12/09/GyQP3rufHLoRsv4.png" alt="d867c01780b42c1d1a4a8e32b112658.png">&lt;/p>
&lt;p>数据如何路由成为一个关键问题， 一般可以采用范围拆分，List拆分、Hash拆分等。 如何保持数据的一致性也是个难题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>架构V4.0 - 云数据库&lt;/strong>&lt;/p>
&lt;p>云数据库（云计算）现在是各大IT公司内部作为节约成本的一个突破口，对于数据存储的MySQL 来说，如何让其成为一个saas（Software as a Service）是关键点。MySQL作为一个saas服务， 服务提供商负责解决可配置性，可扩展性，多用户存储结构设计等这些疑难问题&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2020/12/09/VORnjgoZkJyaWtQ.png" alt="b32bf33a20cdf9563052b858bec041d.png">&lt;/p>
&lt;/li>
&lt;/ul></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/storage/">storage</category><category domain="https://chuchin.cn/tech/storage/mysql/">mysql</category><category domain="https://chuchin.cn/tags/mysql/">MySQL</category></item><item><title>Tomcat 核心配置</title><link>https://chuchin.cn/tech/webserver/tomcat/tomcat-config/</link><guid isPermaLink="true">https://chuchin.cn/tech/webserver/tomcat/tomcat-config/</guid><pubDate>Sun, 02 Aug 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/webserver/">webserver</category><category domain="https://chuchin.cn/tech/webserver/tomcat/">tomcat</category><category domain="https://chuchin.cn/tags/tomcat/">Tomcat</category></item><item><title>Tomcat 系统架构与原理</title><link>https://chuchin.cn/tech/webserver/tomcat/tomcat-system-architecture/</link><guid isPermaLink="true">https://chuchin.cn/tech/webserver/tomcat/tomcat-system-architecture/</guid><pubDate>Sat, 01 Aug 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>b/s（浏览器/服务器模式） 浏览器是客户端（发送http请求） ———&amp;gt; 服务器端&lt;/p>
&lt;h2 id="浏览器访问服务器的流程">浏览器访问服务器的流程&lt;/h2>
&lt;p>http请求的处理过程&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201222-132859-0659.png" alt="20201222-132859-0659.png">&lt;/p>
&lt;p>注意：浏览器访问服务器使⽤的是Http协议，Http是应⽤层协议，⽤于定义数据通信的格式，具体的数 据传输使⽤的是TCP/IP协议&lt;/p>
&lt;h2 id="tomcat-系统总体架构">Tomcat 系统总体架构&lt;/h2>
&lt;h3 id="tomcat-请求处理大致过程">Tomcat 请求处理大致过程&lt;/h3>
&lt;p>&lt;strong>Tomcat是⼀个Http服务器（能够接收并且处理http请求，所以tomcat是⼀个http服务器）&lt;/strong>&lt;/p>
&lt;p>我们使⽤浏览器向某⼀个⽹站发起请求，发出的是Http请求，那么在远程，Http服务器接收到这个请求之后，会调⽤具体的程序（Java类）进⾏处理，往往不同的请求由不同的Java类完成处理。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201222-145903-0536.png" alt="20201222-145903-0536.png">&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201222-142605-0166.png" alt="20201222-142605-0166.png">&lt;/p>
&lt;p>HTTP 服务器接收到请求之后把请求交给Servlet容器来处理，Servlet 容器通过Servlet接⼝调⽤业务类。&lt;strong>Servlet接口和Servlet容器这⼀整套内容叫作Servlet规范。&lt;/strong>&lt;/p>
&lt;p>注意：Tomcat既按照Servlet规范的要求去实现了Servlet容器，同时它也具有HTTP服务器的功能。&lt;/p>
&lt;p>Tomcat的两个重要身份&lt;/p>
&lt;ol>
&lt;li>http服务器&lt;/li>
&lt;li>Tomcat是一个Servlet容器&lt;/li>
&lt;/ol>
&lt;h3 id="tomcat-servlet容器处理流程">Tomcat Servlet容器处理流程&lt;/h3>
&lt;p>当⽤户请求某个URL资源时&lt;/p>
&lt;ol>
&lt;li>HTTP服务器会把请求信息使⽤ServletRequest对象封装起来&lt;/li>
&lt;li>进⼀步去调⽤Servlet容器中某个具体的Servlet&lt;/li>
&lt;li>在 2 中，Servlet容器拿到请求后，根据URL和Servlet的映射关系，找到相应的Servlet&lt;/li>
&lt;li>如果Servlet还没有被加载，就⽤反射机制创建这个Servlet，并调⽤Servlet的init⽅法来完成初始化&lt;/li>
&lt;li>接着调⽤这个具体Servlet的service⽅法来处理请求，请求处理结果使⽤ServletResponse对象封装&lt;/li>
&lt;li>把ServletResponse对象返回给HTTP服务器，HTTP服务器会把响应发送给客户端&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201222-140411-0225.png" alt="20201222-140411-0225.png">&lt;/p>
&lt;h3 id="tomcat-系统总体架构-1">Tomcat 系统总体架构&lt;/h3>
&lt;p>通过上面的讲解，我们发现tomcat有两个非常重要的功能需要完成&lt;/p>
&lt;ol>
&lt;li>和客户端浏览器进行交互，进⾏socket通信，将字节流和Request/Response等对象进行转换&lt;/li>
&lt;li>Servlet容器处理业务逻辑&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201222-142513-0071.png" alt="20201222-142513-0071.png">&lt;/p>
&lt;p>Tomcat 设计了两个核心组件连接器（Connector）和容器（Container）来完成 Tomcat 的两⼤核心功能。&lt;/p>
&lt;p>&lt;strong>连接器，负责对外交流&lt;/strong>： 处理Socket连接，负责网络字节流与Request和Response对象的转化&lt;/p>
&lt;p>**容器，负责内部处理：**加载和管理Servlet，以及具体处理Request请求&lt;/p>
&lt;h2 id="tomcat-连接器组件-coyote">Tomcat 连接器组件 Coyote&lt;/h2>
&lt;h3 id="coyote-简介">Coyote 简介&lt;/h3>
&lt;p>Coyote 是Tomcat 中连接器的组件名称 , 是对外的接⼝。客户端通过Coyote与服务器建⽴连接、发送请求并接受响应 。&lt;/p>
&lt;ol>
&lt;li>Coyote 封装了底层的⽹络通信（Socket 请求及响应处理）&lt;/li>
&lt;li>Coyote 使Catalina 容器（容器组件）与具体的请求协议及IO操作⽅式完全解耦&lt;/li>
&lt;li>Coyote 将Socket 输⼊转换封装为 Request 对象，进⼀步封装后交由Catalina 容器进⾏处理，处 理请求完成后, Catalina 通过Coyote 提供的Response 对象将结果写⼊输出流&lt;/li>
&lt;li>Coyote 负责的是具体协议（应⽤层）和 IO（传输层）相关内容&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201222-145717-0353.png" alt="20201222-145717-0353.png">&lt;/p>
&lt;p>Tomcat Coyote ⽀持的 IO模型与协议&lt;/p>
&lt;p>Tomcat⽀持多种应⽤层协议和I/O模型，如下：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201222-145418-0813.png" alt="20201222-145418-0813.png">&lt;/p>
&lt;p>在 8.0 之前 ，Tomcat 默认采⽤的I/O⽅式为 BIO，之后改为 NIO。 ⽆论 NIO、NIO2 还是 APR， 在性能⽅⾯均优于以往的BIO。 如果采⽤APR， 甚⾄可以达到 Apache HTTP Server 的影响性能。&lt;/p>
&lt;h3 id="coyote-的内部组件及流程">Coyote 的内部组件及流程&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201222-142920-0774.png" alt="20201222-142920-0774.png">&lt;/p>
&lt;p>Coyote 组件及作⽤&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201222-143521-0766.png" alt="20201222-143521-0766.png">&lt;/p>
&lt;h2 id="tomcat-servlet-容器-catalina">Tomcat Servlet 容器 Catalina&lt;/h2>
&lt;h3 id="tomcat-模块分层结构图及catalina位置">Tomcat 模块分层结构图及Catalina位置&lt;/h3>
&lt;p>Tomcat是⼀个由⼀系列可配置（conf/server.xml）的组件构成的Web容器，⽽Catalina是Tomcat的 servlet容器。&lt;/p>
&lt;p>从另⼀个⻆度来说，Tomcat 本质上就是⼀款 Servlet 容器， 因为 Catalina 才是 Tomcat 的核心， 其他模块都是为Catalina 提供⽀撑的。 比如： 通过 Coyote 模块提供链接通信，Jasper 模块提供 JSP 引 擎，Naming 提供JNDI 服务，Juli 提供日志服务。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201222-143323-0964.png" alt="20201222-143323-0964.png">&lt;/p>
&lt;h3 id="servlet-容器-catalina-的结构">Servlet 容器 Catalina 的结构&lt;/h3>
&lt;p>Tomcat（我们往往有⼀个认识，Tomcat就是⼀个Catalina的实例，因为Catalina是Tomcat的核心）&lt;/p>
&lt;p>Tomcat/Catalina实例&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201222-145224-0505.png" alt="20201222-145224-0505.png">&lt;/p>
&lt;p>其实，可以认为整个Tomcat就是⼀个Catalina实例，Tomcat 启动的时候会初始化这个实例，Catalina 实例通过加载server.xml完成其他实例的创建，创建并管理⼀个Server，Server创建并管理多个服务， 每个服务又可以有多个Connector和⼀个Container。&lt;/p>
&lt;p>⼀个Catalina实例（容器）&lt;/p>
&lt;p>⼀个 Server实例（容器）&lt;/p>
&lt;p>多个Service实例（容器）&lt;/p>
&lt;p>每⼀个Service实例下可以有多个Connector实例和⼀个Container实例&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Catalina&lt;/p>
&lt;p>负责解析Tomcat的配置⽂件（server.xml） , 以此来创建服务器Server组件并进⾏管理&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Server&lt;/p>
&lt;p>服务器表示整个Catalina Servlet容器以及其它组件，负责组装并启动Servlet引擎,Tomcat连接 器。Server通过实现Lifecycle接口，提供了⼀种优雅的启动和关闭整个系统的方式&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Service&lt;/p>
&lt;p>服务是Server内部的组件，⼀个Server包含多个Service。它将若⼲个Connector组件绑定到⼀个 Container&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Container&lt;/p>
&lt;p>容器，负责处理用户的servlet请求，并返回对象给web用户的模块&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="container-组件的具体结构">Container 组件的具体结构&lt;/h3>
&lt;p>Container组件下有⼏种具体的组件，分别是Engine、Host、Context和Wrapper。这4种组件（容器） 是父子关系。Tomcat通过⼀种分层的架构，使得Servlet容器具有很好的灵活性。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Engine&lt;/p>
&lt;p>表示整个Catalina的Servlet引擎，⽤来管理多个虚拟站点，⼀个Service最多只能有⼀个Engine， 但是⼀个引擎可包含多个Host&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Host&lt;/p>
&lt;p>代表⼀个虚拟主机，或者说⼀个站点，可以给Tomcat配置多个虚拟主机地址，⽽⼀个虚拟主机下可包含多个Context&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Context&lt;/p>
&lt;p>表示⼀个Web应⽤程序， ⼀个Web应⽤可包含多个Wrapper&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Wrapper&lt;/p>
&lt;p>表示⼀个Servlet，Wrapper 作为容器中的最底层，不能包含⼦容器&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>上述组件的配置其实就体现在conf/server.xml中。&lt;/strong>&lt;/p></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/webserver/">webserver</category><category domain="https://chuchin.cn/tech/webserver/tomcat/">tomcat</category><category domain="https://chuchin.cn/tags/tomcat/">Tomcat</category></item><item><title>Nginx 底层进程机制</title><link>https://chuchin.cn/tech/webserver/nginx/nginx-principle/</link><guid isPermaLink="true">https://chuchin.cn/tech/webserver/nginx/nginx-principle/</guid><pubDate>Mon, 06 Jul 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/webserver/">webserver</category><category domain="https://chuchin.cn/tech/webserver/nginx/">nginx</category><category domain="https://chuchin.cn/tags/nginx/">Nginx</category></item><item><title>Nginx 应用 动静分离</title><link>https://chuchin.cn/tech/webserver/nginx/nginx-resource-handle/</link><guid isPermaLink="true">https://chuchin.cn/tech/webserver/nginx/nginx-resource-handle/</guid><pubDate>Sun, 05 Jul 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/webserver/">webserver</category><category domain="https://chuchin.cn/tech/webserver/nginx/">nginx</category><category domain="https://chuchin.cn/tags/nginx/">Nginx</category></item><item><title>Nginx 应用 负载均衡</title><link>https://chuchin.cn/tech/webserver/nginx/nginx-load-balance/</link><guid isPermaLink="true">https://chuchin.cn/tech/webserver/nginx/nginx-load-balance/</guid><pubDate>Sat, 04 Jul 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/webserver/">webserver</category><category domain="https://chuchin.cn/tech/webserver/nginx/">nginx</category><category domain="https://chuchin.cn/tags/nginx/">Nginx</category></item><item><title>Nginx 应用 反向代理</title><link>https://chuchin.cn/tech/webserver/nginx/nginx-reverse-proxy/</link><guid isPermaLink="true">https://chuchin.cn/tech/webserver/nginx/nginx-reverse-proxy/</guid><pubDate>Fri, 03 Jul 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/webserver/">webserver</category><category domain="https://chuchin.cn/tech/webserver/nginx/">nginx</category><category domain="https://chuchin.cn/tags/nginx/">Nginx</category></item><item><title>Nginx 核心配置文件解读</title><link>https://chuchin.cn/tech/webserver/nginx/nginx-config/</link><guid isPermaLink="true">https://chuchin.cn/tech/webserver/nginx/nginx-config/</guid><pubDate>Thu, 02 Jul 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/webserver/">webserver</category><category domain="https://chuchin.cn/tech/webserver/nginx/">nginx</category><category domain="https://chuchin.cn/tags/nginx/">Nginx</category></item><item><title>Nginx 基础</title><link>https://chuchin.cn/tech/webserver/nginx/nginx-base/</link><guid isPermaLink="true">https://chuchin.cn/tech/webserver/nginx/nginx-base/</guid><pubDate>Wed, 01 Jul 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/webserver/">webserver</category><category domain="https://chuchin.cn/tech/webserver/nginx/">nginx</category><category domain="https://chuchin.cn/tags/nginx/">Nginx</category></item><item><title>Dubbo 服务动态降级</title><link>https://chuchin.cn/tech/distributed-micro-service/dubbo/dubbo-08/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/dubbo/dubbo-08/</guid><pubDate>Wed, 08 Apr 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/dubbo/">dubbo</category><category domain="https://chuchin.cn/tags/dubbo/">Dubbo</category></item><item><title>Dubbo 路由规则</title><link>https://chuchin.cn/tech/distributed-micro-service/dubbo/dubbo-07/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/dubbo/dubbo-07/</guid><pubDate>Tue, 07 Apr 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/dubbo/">dubbo</category><category domain="https://chuchin.cn/tags/dubbo/">Dubbo</category></item><item><title>Dubbo 线程池</title><link>https://chuchin.cn/tech/distributed-micro-service/dubbo/dubbo-06/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/dubbo/dubbo-06/</guid><pubDate>Mon, 06 Apr 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/dubbo/">dubbo</category><category domain="https://chuchin.cn/tags/dubbo/">Dubbo</category></item><item><title>Dubbo 异步调用</title><link>https://chuchin.cn/tech/distributed-micro-service/dubbo/dubbo-05/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/dubbo/dubbo-05/</guid><pubDate>Sun, 05 Apr 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/dubbo/">dubbo</category><category domain="https://chuchin.cn/tags/dubbo/">Dubbo</category></item><item><title>Dubbo 负载均衡策略</title><link>https://chuchin.cn/tech/distributed-micro-service/dubbo/dubbo-04/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/dubbo/dubbo-04/</guid><pubDate>Sat, 04 Apr 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/dubbo/">dubbo</category><category domain="https://chuchin.cn/tags/dubbo/">Dubbo</category></item><item><title>Dubbo SPI</title><link>https://chuchin.cn/tech/distributed-micro-service/dubbo/dubbo-03/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/dubbo/dubbo-03/</guid><pubDate>Fri, 03 Apr 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/dubbo/">dubbo</category><category domain="https://chuchin.cn/tags/dubbo/">Dubbo</category></item><item><title>Dubbo 架构与实战</title><link>https://chuchin.cn/tech/distributed-micro-service/dubbo/dubbo-02/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/dubbo/dubbo-02/</guid><pubDate>Thu, 02 Apr 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/dubbo/">dubbo</category><category domain="https://chuchin.cn/tags/dubbo/">Dubbo</category></item><item><title>Dubbo 项目架构演变</title><link>https://chuchin.cn/tech/distributed-micro-service/dubbo/dubbo-01/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/dubbo/dubbo-01/</guid><pubDate>Wed, 01 Apr 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/dubbo/">dubbo</category><category domain="https://chuchin.cn/tags/dubbo/">Dubbo</category></item><item><title>Zookeeper leader选举</title><link>https://chuchin.cn/tech/distributed-micro-service/zookeeper/zookeeper-08/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/zookeeper/zookeeper-08/</guid><pubDate>Sun, 08 Mar 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/zookeeper/">zookeeper</category><category domain="https://chuchin.cn/tags/zookeeper/">Zookeeper</category></item><item><title>Zookeeper 服务器启动</title><link>https://chuchin.cn/tech/distributed-micro-service/zookeeper/zookeeper-07/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/zookeeper/zookeeper-07/</guid><pubDate>Sat, 07 Mar 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/zookeeper/">zookeeper</category><category domain="https://chuchin.cn/tags/zookeeper/">Zookeeper</category></item><item><title>Zookeeper 服务器角色</title><link>https://chuchin.cn/tech/distributed-micro-service/zookeeper/zookeeper-06/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/zookeeper/zookeeper-06/</guid><pubDate>Fri, 06 Mar 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/zookeeper/">zookeeper</category><category domain="https://chuchin.cn/tags/zookeeper/">Zookeeper</category></item><item><title>Zookeeper ZAB协议</title><link>https://chuchin.cn/tech/distributed-micro-service/zookeeper/zookeeper-05/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/zookeeper/zookeeper-05/</guid><pubDate>Thu, 05 Mar 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/zookeeper/">zookeeper</category><category domain="https://chuchin.cn/tags/zookeeper/">Zookeeper</category></item><item><title>Redis 底层数据结构</title><link>https://chuchin.cn/tech/cache/redis/redis-04/</link><guid isPermaLink="true">https://chuchin.cn/tech/cache/redis/redis-04/</guid><pubDate>Wed, 04 Mar 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/a/20201228-100203-0496.png" alt="20201228-100203-0496.png">&lt;/p>
&lt;p>Redis作为Key-Value存储系统，数据结构如上图。Redis没有表的概念，Redis实例所对应的db以编号区分，db本身就是key的命名空间。比如：user:1000作为key值，表示在user这个命名空间下id为1000的元素，类似于user表的id=1000的行。&lt;/p>
&lt;h2 id="redisdb-结构">RedisDB 结构&lt;/h2>
&lt;p>Redis中存在“数据库”的概念，该结构由redis.h中的redisDB定义。&lt;/p>
&lt;p>当redis 服务器初始化时，会预先分配 16 个数据库&lt;/p>
&lt;p>所有数据库保存到结构 redisServer 的一个成员 redisServer.db 数组中&lt;/p>
&lt;p>redisClient中存在一个名叫db的指针指向当前使用的数据库&lt;/p>
&lt;p>RedisDB结构体源码：&lt;/p>
&lt;pre>&lt;code>typedef struct redisDb {
int id; //id是数据库序号，为0-15(默认Redis有16个数据库)
long avg_ttl; //存储的数据库对象的平均ttl(time to live)，用于统计
dict *dict; //存储数据库所有的key-value
dict *expires; //存储key的过期时间
dict *blocking_keys;//blpop 存储阻塞key和客户端对象
dict *ready_keys;//阻塞后push 响应阻塞客户端 存储阻塞后push的key和客户端对象
dict *watched_keys;//存储watch监控的的key和客户端对象
} redisDb;
&lt;/code>&lt;/pre>&lt;p>&lt;strong>id&lt;/strong>&lt;/p>
&lt;p>id是数据库序号，为0-15(默认Redis有16个数据库)&lt;/p>
&lt;p>&lt;strong>dict&lt;/strong>&lt;/p>
&lt;p>存储数据库所有的key-value，后面要详细讲解&lt;/p>
&lt;p>&lt;strong>expires&lt;/strong>&lt;/p>
&lt;p>存储key的过期时间，后面要详细讲解&lt;/p>
&lt;h2 id="redisobject结构">RedisObject结构&lt;/h2>
&lt;p>Value是一个对象&lt;/p>
&lt;p>包含字符串对象，列表对象，哈希对象，集合对象和有序集合对象&lt;/p>
&lt;h3 id="结构信息概览">结构信息概览&lt;/h3>
&lt;pre>&lt;code>typedef struct redisObject {
unsigned type:4;//类型 五种对象类型
unsigned encoding:4;//编码
void *ptr;//指向底层实现数据结构的指针
//...
int refcount;//引用计数
//...
unsigned lru:LRU_BITS; //LRU_BITS为24bit 记录最后一次被命令程序访问的时间
//...
}robj;
&lt;/code>&lt;/pre>&lt;p>&lt;strong>4位type&lt;/strong>&lt;/p>
&lt;p>type 字段表示对象的类型，占 4 位；&lt;/p>
&lt;p>REDIS_STRING(字符串)、REDIS_LIST (列表)、REDIS_HASH(哈希)、REDIS_SET(集合)、REDIS_ZSET(有 序集合)。&lt;/p>
&lt;p>当我们执行 type 命令时，便是通过读取 RedisObject 的 type 字段获得对象的类型&lt;/p>
&lt;pre>&lt;code>127.0.0.1:6379&amp;gt; type a1
string
&lt;/code>&lt;/pre>&lt;p>&lt;strong>4位encoding&lt;/strong>&lt;/p>
&lt;p>encoding 表示对象的内部编码，占 4 位&lt;/p>
&lt;p>每个对象有不同的实现编码 Redis 可以根据不同的使用场景来为对象设置不同的编码，大大提高了 Redis 的灵活性和效率。&lt;/p>
&lt;p>通过 object encoding 命令，可以查看对象采用的编码方式&lt;/p>
&lt;pre>&lt;code>127.0.0.1:6379&amp;gt; object encoding a1
&amp;quot;int&amp;quot;
&lt;/code>&lt;/pre>&lt;p>&lt;strong>24位LRU&lt;/strong>&lt;/p>
&lt;p>lru 记录的是对象最后一次被命令程序访问的时间，（ 4.0 版本占 24 位，2.6 版本占 22 位）。&lt;/p>
&lt;p>高16位存储一个分钟数级别的时间戳，低8位存储访问计数（lfu ： 最近访问次数）&lt;/p>
&lt;p>lru----&amp;gt; 高16位: 最后被访问的时间&lt;/p>
&lt;p>lfu-----&amp;gt;低8位：最近访问次数&lt;/p>
&lt;p>&lt;strong>refcount&lt;/strong>&lt;/p>
&lt;p>refcount 记录的是该对象被引用的次数，类型为整型。&lt;/p>
&lt;p>refcount 的作用，主要在于对象的引用计数和内存回收。&lt;/p>
&lt;p>当对象的refcount&amp;gt;1时，称为共享对象&lt;/p>
&lt;p>Redis 为了节省内存，当有一些对象重复出现时，新的程序不会创建新的对象，而是仍然使用原来的对象。&lt;/p>
&lt;p>&lt;strong>ptr&lt;/strong>&lt;/p>
&lt;p>ptr 指针指向具体的数据，比如：set hello world，ptr 指向包含字符串 world 的 SDS。&lt;/p>
&lt;h3 id="7种type">7种type&lt;/h3>
&lt;h4 id="字符串对象">字符串对象&lt;/h4>
&lt;p>C语言： 字符数组 &amp;quot;\0&amp;quot;&lt;/p>
&lt;p>Redis 使用了 SDS(Simple Dynamic String)。用于存储字符串和整型数据。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/a/20201230-161810-0044.png" alt="20201230-161810-0044.png">&lt;/p>
&lt;pre>&lt;code>struct sdshdr{
//记录buf数组中已使用字节的数量
int len;
//记录 buf 数组中未使用字节的数量
int free;
//字符数组，用于保存字符串
char buf[];
}
&lt;/code>&lt;/pre>&lt;p>buf[] 的长度=len+free+1&lt;/p>
&lt;p>SDS的优势：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>SDS 在 C 字符串的基础上加入了 free 和 len 字段，获取字符串长度：SDS 是 O(1)，C 字符串是 O(n)。buf数组的长度=free+len+1&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SDS 由于记录了长度，在可能造成缓冲区溢出时会自动重新分配内存，杜绝了缓冲区溢出。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以存取二进制数据，以字符串长度len来作为结束标识&lt;/p>
&lt;p>C： \0 空字符串 二进制数据包括空字符串，所以没有办法存取二进制数据&lt;/p>
&lt;p>SDS ： 非二进制 \0 二进制： 字符串长度 可以存二进制数据&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>使用场景：&lt;/p>
&lt;p>SDS的主要应用在：存储字符串和整型数据、存储key、AOF缓冲区和用户输入缓冲。&lt;/p>
&lt;h4 id="跳跃表重点">跳跃表（重点）&lt;/h4>
&lt;p>跳跃表是有序集合（sorted-set）的底层实现，效率高，实现简单。&lt;/p>
&lt;p>跳跃表的基本思想：&lt;/p>
&lt;p>将有序链表中的部分节点分层，每一层都是一个有序链表。&lt;/p>
&lt;p>&lt;strong>查找&lt;/strong>&lt;/p>
&lt;p>在查找时优先从最高层开始向后查找，当到达某个节点时，如果next节点值大于要查找的值或next指针 指向null，则从当前节点下降一层继续向后查找。&lt;/p>
&lt;p>举例：&lt;/p>
&lt;p>遍历4次找到元素9&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/a/20210119-144048-0803.png" alt="20210119-144048-0803.png">&lt;/p>
&lt;p>这种数据结构，就是跳跃表，它具有二分查找的功能。&lt;/p>
&lt;p>插入与删除 上面例子中，9个结点，一共4层，是理想的跳跃表。&lt;/p>
&lt;p>通过抛硬币（概率1/2）的方式来决定新插入结点跨越的层数： 正面:插入上层 背面：不插入达到1/2概率（计算次数）&lt;/p>
&lt;p>&lt;strong>删除&lt;/strong>&lt;/p>
&lt;p>找到指定元素并删除每层的该元素即可&lt;/p>
&lt;p>跳跃表特点：
每层都是一个有序链表&lt;/p>
&lt;p>查找次数近似于层数（1/2）&lt;/p>
&lt;p>底层包含所有元素&lt;/p>
&lt;p>空间复杂度 O(n) 扩充了一倍&lt;/p>
&lt;p>&lt;strong>Redis跳跃表的实现&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">//跳跃表节点
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">zskiplistNode&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="cm">/* 存储字符串类型数据 redis3.0版本中使用robj类型表示， 但是在redis4.0.1中直接使用sds类型表示 */&lt;/span>
&lt;span class="n">sds&lt;/span> &lt;span class="n">ele&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">//存储排序的分值
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">score&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">//后退指针，指向当前节点最底层的前一个节点层，柔性数组，随机生成1-64的值
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">zskiplistNode&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">backward&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">zskiplistLevel&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">zskiplistNode&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">forward&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//指向本层下一个节点
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">span&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//本层下个节点到本节点的元素个数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="n">level&lt;/span>&lt;span class="p">[];&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="n">zskiplistNode&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">//链表
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">zskiplist&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="c1">//表头节点和表尾节点
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">structz&lt;/span> &lt;span class="n">skiplistNode&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">header&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">tail&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">//表中节点的数量
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">//表中层数最大的节点的层数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">level&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="n">zskiplist&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>完整的跳跃表结构体：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/a/20210119-144856-0434.png" alt="20210119-144856-0434.png">&lt;/p>
&lt;p>跳跃表的优势：&lt;/p>
&lt;ol>
&lt;li>可以快速查找到需要的节点 O(logn)&lt;/li>
&lt;li>可以在O(1)的时间复杂度下，快速获得跳跃表的头节点、尾结点、长度和高度。&lt;/li>
&lt;/ol>
&lt;p>应用场景：有序集合的实现&lt;/p>
&lt;h4 id="字典重点难点">字典（重点+难点）&lt;/h4>
&lt;p>字典dict又称散列表（hash），是用来存储键值对的一种数据结构。&lt;/p>
&lt;p>Redis整个数据库是用字典来存储的。（K-V结构）&lt;/p>
&lt;p>对Redis进行CURD操作其实就是对字典中的数据进行CURD操作。&lt;/p>
&lt;p>&lt;strong>数组&lt;/strong>&lt;/p>
&lt;p>数组：用来存储数据的容器，采用头指针+偏移量的方式能够以O(1)的时间复杂度定位到数据所在的内存地址。
Redis 海量存储 快&lt;/p>
&lt;p>&lt;strong>Hash函数&lt;/strong>&lt;/p>
&lt;p>Hash（散列），作用是把任意长度的输入通过散列算法转换成固定类型、固定长度的散列值。&lt;/p>
&lt;p>hash函数可以把Redis里的key：包括字符串、整数、浮点数统一转换成整数。&lt;/p>
&lt;p>key=100.1 String “100.1” 5位长度的字符串&lt;/p>
&lt;p>Redis-cli :times 33&lt;/p>
&lt;p>Redis-Server : MurmurHash&lt;/p>
&lt;p>&lt;strong>数组下标&lt;/strong>=hash(key)%数组容量(hash值%数组容量得到的余数)&lt;/p>
&lt;p>&lt;strong>Hash冲突&lt;/strong>&lt;/p>
&lt;p>不同的key经过计算后出现数组下标一致，称为Hash冲突。&lt;/p>
&lt;p>采用单链表在相同的下标位置处存储原始key和value&lt;/p>
&lt;p>当根据key找Value时，找到数组下标，遍历单链表可以找出key相同的value&lt;/p>
&lt;p>&lt;strong>Redis字典的实现&lt;/strong>&lt;/p>
&lt;p>Redis字典实现包括：字典(dict)、Hash表(dictht)、Hash表节点(dictEntry)。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/a/20210119-151403-0754.png" alt="20210119-151403-0754.png">&lt;/p>
&lt;p>&lt;strong>Hash表&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">dictEntry&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//值
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">union&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 值v的类型可以是以下4种类型
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">val&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">unit64_t&lt;/span> &lt;span class="n">u64&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int64_t&lt;/span> &lt;span class="n">s64&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">double&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">distEntry&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 指向下一个哈希表节点，形成单向链表 解决hash冲突
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="n">dictEntry&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>key字段存储的是键值对中的键&lt;/p>
&lt;p>v字段是个联合体，存储的是键值对中的值&lt;/p>
&lt;p>next指向下一个哈希表节点，用于解决hash冲突&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/a/20210119-153908-0281.png" alt="20210119-153908-0281.png">&lt;/p>
&lt;p>&lt;strong>dict字典&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">dict&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">dictType&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 该字典对应的特定操作函数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">privdata&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 上述类型函数对应的可选参数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">dictht&lt;/span> &lt;span class="n">ht&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="cm">/* 两张哈希表，存储键值对数据，ht[0]为原生 哈希表，ht[1]为 rehash 哈希表 */&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">rehashidx&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="cm">/*rehash标识 当等于-1时表示没有在rehash，否则表示正在进行rehash操作，存储的值表示否则表示正在进行rehash操作，存储的值表示hash表ht[0]的rehash进行到哪个索引值(数组下标)*/&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">iterators&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 当前运行的迭代器数量
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="n">dict&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>type字段，指向dictType结构体，里边包括了对该字典操作的函数指针&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">dictType&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 计算哈希值的函数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">hashFunction&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 复制键的函数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">keyDup&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">privdata&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 复制值的函数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">valDup&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">privdata&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 比较键的函数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">keyCompare&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">privdata&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">key1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">key2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 销毁键的函数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">keyDestructor&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">privdata&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 销毁值的函数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">valDestructor&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">privdata&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="n">dictType&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Redis字典除了主数据库的K-V数据存储以外，还可以用于：散列表对象、哨兵模式中的主从节点管理等 在不同的应用中，字典的形态都可能不同，dictType是为了实现各种形态的字典而抽象出来的操作函数 （多态）。&lt;/p>
&lt;p>完整的Redis字典数据结构：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/a/20210119-153219-0645.png" alt="20210119-153219-0645.png">&lt;/p>
&lt;p>&lt;strong>字典扩容&lt;/strong>&lt;/p>
&lt;p>字典达到存储上限（阈值 0.75），需要rehash（扩容）&lt;/p>
&lt;p>扩容流程：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/a/20210119-150121-0806.png" alt="20210119-150121-0806.png">&lt;/p>
&lt;p>说明：&lt;/p>
&lt;ol>
&lt;li>初次申请默认容量为4个dictEntry，非初次申请为当前hash表容量的一倍。&lt;/li>
&lt;li>rehashidx=0表示要进行rehash操作。&lt;/li>
&lt;li>新增加的数据在新的hash表h[1]&lt;/li>
&lt;li>修改、删除、查询在老hash表h[0]、新hash表h[1]中（rehash中）&lt;/li>
&lt;li>将老的hash表h[0]的数据重新计算索引值后全部迁移到新的hash表h[1]中，这个过程称为 rehash。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>渐进式rehash&lt;/strong>&lt;/p>
&lt;p>当数据量巨大时rehash的过程是非常缓慢的，所以需要进行优化。&lt;/p>
&lt;p>服务器忙，则只对一个节点进行rehash&lt;/p>
&lt;p>服务器闲，可批量rehash(100节点)&lt;/p>
&lt;p>应用场景：&lt;/p>
&lt;ol>
&lt;li>主数据库的K-V数据存储&lt;/li>
&lt;li>散列表对象（hash）&lt;/li>
&lt;li>哨兵模式中的主从节点管理&lt;/li>
&lt;/ol>
&lt;h4 id="压缩列表">压缩列表&lt;/h4>
&lt;p>压缩列表（ziplist）是由一系列特殊编码的连续内存块组成的顺序型数据结构&lt;/p>
&lt;p>节省内存&lt;/p>
&lt;p>是一个字节数组，可以包含多个节点（entry）。每个节点可以保存一个字节数组或一个整数。&lt;/p>
&lt;p>压缩列表的数据结构如下：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/a/20210119-151024-0359.png" alt="20210119-151024-0359.png">&lt;/p>
&lt;p>zlbytes：压缩列表的字节长度&lt;/p>
&lt;p>zltail：压缩列表尾元素相对于压缩列表起始地址的偏移量&lt;/p>
&lt;p>zllen：压缩列表的元素个数&lt;/p>
&lt;p>entry1..entryX : 压缩列表的各个节点&lt;/p>
&lt;p>zlend：压缩列表的结尾，占一个字节，恒为0xFF（255）&lt;/p>
&lt;p>entryX元素的编码结构：&lt;/p>
&lt;p>previous_entry_length：前一个元素的字节长度&lt;/p>
&lt;p>encoding:表示当前元素的编码&lt;/p>
&lt;p>content:数据内容&lt;/p>
&lt;p>ziplist结构体如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">struct&lt;/span> &lt;span class="n">ziplist&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">zlbytes&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ziplist的长度字节数，包含头部、所有entry和zipend。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">zloffset&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 从ziplist的头指针到指向最后一个entry的偏移量，用于快速反向查询
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">short&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">zllength&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// entry元素个数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 元素值
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">zlend&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// ziplist结束符，值固定为0xFF
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">zlentry&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">prevrawlensize&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//previous_entry_length字段的长度
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">prevrawlen&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//previous_entry_length字段存储的内容
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">lensize&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//encoding字段的长度
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//数据内容长度
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">headersize&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//当前元素的首部长度，即previous_entry_length字段长度与encoding字段长度之和。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">encoding&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//数据类型
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//当前元素首地址
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="n">zlentry&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>应用场景：&lt;/p>
&lt;p>sorted-set和hash元素个数少且是小整数或短字符串（直接使用）&lt;/p>
&lt;p>list用快速链表(quicklist)数据结构存储，而快速链表是双向列表与压缩列表的组合。（间接使用）&lt;/p>
&lt;h4 id="整数集合">整数集合&lt;/h4>
&lt;p>整数集合(intset)是一个有序的（整数升序）、存储整数的连续存储结构。&lt;/p>
&lt;p>当Redis集合类型的元素都是整数并且都处在64位有符号整数范围内（2^64），使用该结构体存储。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;gt; 127.0.0.1@6379 connected!
&amp;gt; sadd set:001 &lt;span class="m">1&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="m">6&lt;/span> &lt;span class="m">2&lt;/span>
&lt;span class="m">5&lt;/span>
&amp;gt; object encoding set:001
intset
&amp;gt; sadd set:004 &lt;span class="m">1&lt;/span> &lt;span class="m">100000000000000000000000000&lt;/span> &lt;span class="m">9999999999&lt;/span>
&lt;span class="m">3&lt;/span>
&amp;gt; object encoding set:004
hashtable
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">insert&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//编码方式
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">unit32_t&lt;/span> &lt;span class="n">encoding&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">//集合包括的元素数量
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">unit32_t&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">//保存元素的数组
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int8_t&lt;/span> &lt;span class="n">contents&lt;/span>&lt;span class="p">[];&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="n">intset&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>应用场景：&lt;/p>
&lt;p>可以保存类型为int16_t、int32_t 或者int64_t 的整数值，并且保证集合中不会出现重复元素。&lt;/p>
&lt;h4 id="快速列表重要">快速列表（重要）&lt;/h4>
&lt;p>快速列表（quicklist）是Redis底层重要的数据结构。是列表的底层实现。（在Redis3.2之前，Redis采用双向链表（adlist）和压缩列表（ziplist）实现。）在Redis3.2以后结合adlist和ziplist的优势Redis设 计出了quicklist。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;gt; lpush list:001 &lt;span class="m">1&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="m">3&lt;/span>
&lt;span class="m">5&lt;/span>
&amp;gt; object encoding list:001
quicklist
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>双向列表（adlist）&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/a/20210119-154937-0508.png" alt="20210119-154937-0508.png">&lt;/p>
&lt;p>双向链表优势：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>双向：链表具有前置节点和后置节点的引用，获取这两个节点时间复杂度都为O(1)。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>普通链表（单链表）：节点类保留下一节点的引用。链表类只保留头节点的引用，只能从头节点插 入删除&lt;/p>
&lt;/li>
&lt;li>
&lt;p>无环：表头节点的 prev 指针和表尾节点的 next 指针都指向 NULL,对链表的访问都是以 NULL 结 束。&lt;/p>
&lt;p>环状：头的前一个节点指向尾节点&lt;/p>
&lt;/li>
&lt;li>
&lt;p>带链表长度计数器：通过 len 属性获取链表长度的时间复杂度为 O(1)。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>多态：链表节点使用 void* 指针来保存节点值，可以保存各种不同类型的值。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>快速列表&lt;/strong>&lt;/p>
&lt;p>quicklist是一个双向链表，链表中的每个节点时一个ziplist结构。quicklist中的每个节点ziplist都能够存 储多个数据元素。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/a/20210119-155539-0326.png" alt="20210119-155539-0326.png">&lt;/p>
&lt;p>quicklist的结构定义如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">quicklist&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">quicklistNode&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">head&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 指向quicklist的头部
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">quicklistNode&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">tail&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 指向quicklist的尾部
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 列表中所有数据项的个数总和
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// quicklist节点的个数，即ziplist的个数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nl">fill&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ziplist大小限定，由list-max-ziplist-size给定(Redis设定)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nl">compress&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 节点压缩深度设置，由list-compress-depth给定(Redis设定)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="n">quicklist&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>quicklistNode的结构定义如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">quicklistNode&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">quicklistNode&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">prev&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 指向上一个ziplist节点
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">quicklistNode&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 指向下一个ziplist节点
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">zl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 数据指针，如果没有被压缩，就指向ziplist结构，反之指向
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">sz&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 表示指向ziplist结构的总长度(内存占用长度)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nl">count&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 表示ziplist中的数据项个数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nl">encoding&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 编码方式，1--ziplist，2--quicklistLZF
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nl">container&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 预留字段，存放数据的方式，1--NONE，2--ziplist
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nl">recompress&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 解压标记，当查看一个被压缩的数据时，需要暂时解压，标记此参数为1，之后再重新进行压缩
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nl">attempted_compress&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 测试相关
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nl">extra&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 扩展字段，暂时没用
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="n">quicklistNode&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>数据压缩&lt;/strong>&lt;/p>
&lt;p>quicklist每个节点的实际数据存储结构为ziplist，这种结构的优势在于节省存储空间。为了进一步降低 ziplist的存储空间，还可以对ziplist进行压缩。Redis采用的压缩算法是LZF。其基本思想是：数据与前面重复的记录重复位置及长度，不重复的记录原始数据。&lt;/p>
&lt;p>压缩过后的数据可以分成多个片段，每个片段有两个部分：解释字段和数据字段。quicklistLZF的结构 体如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">typeof&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">quicklistLZF&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">sz&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// LZF压缩后占用的字节数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">compressed&lt;/span>&lt;span class="p">[];&lt;/span> &lt;span class="c1">// 柔性数组，指向数据部分
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="n">quicklistLZF&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>应用场景&lt;/p>
&lt;p>列表(List)的底层实现、发布与订阅、慢查询、监视器等功能。&lt;/p>
&lt;h4 id="流对象">流对象&lt;/h4>
&lt;p>stream主要由：消息、生产者、消费者和消费组构成。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/a/20210119-151847-0035.png" alt="20210119-151847-0035.png">&lt;/p>
&lt;p>Redis Stream的底层主要使用了listpack（紧凑列表）和Rax树（基数树）。&lt;/p>
&lt;p>&lt;strong>listpack&lt;/strong>&lt;/p>
&lt;p>listpack表示一个字符串列表的序列化，listpack可用于存储字符串或整数。用于存储stream的消息内容。&lt;/p>
&lt;p>结构如下图：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/a/20210119-160703-0717.png" alt="20210119-160703-0717.png">&lt;/p>
&lt;p>&lt;strong>Rax树&lt;/strong>&lt;/p>
&lt;p>Rax 是一个有序字典树 (基数树 Radix Tree)，按照 key 的字典序排列，支持快速地定位、插入和删除操作。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/a/20210119-163307-0334.png" alt="20210119-163307-0334.png">&lt;/p>
&lt;p>Rax 被用在 Redis Stream 结构里面用于存储消息队列，在 Stream 里面消息 ID 的前缀是时间戳 + 序号，这样的消息可以理解为时间序列消息。使用 Rax 结构 进行存储就可以快速地根据消息 ID 定位到具 体的消息，然后继续遍历指定消息 之后的所有消息。&lt;/p>
&lt;p>应用场景：&lt;/p>
&lt;p>stream的底层实现&lt;/p>
&lt;h3 id="10种encoding">10种encoding&lt;/h3>
&lt;p>encoding 表示对象的内部编码，占 4 位。&lt;/p>
&lt;p>Redis通过 encoding 属性为对象设置不同的编码&lt;/p>
&lt;p>对于少的和小的数据，Redis采用小的和压缩的存储方式，体现Redis的灵活性&lt;/p>
&lt;p>大大提高了 Redis 的存储量和执行效率&lt;/p>
&lt;p>比如Set对象：&lt;/p>
&lt;p>intset ： 元素是64位以内的整数&lt;/p>
&lt;p>hashtable：元素是64位以外的整数&lt;/p>
&lt;p>如下所示：&lt;/p>
&lt;pre>&lt;code>&amp;gt; sadd set:001 1 3 5 6 2
0
&amp;gt; object encoding set:001
intset
&amp;gt; sadd set:004 1 100000000000000000000000000 9999999999
0
&amp;gt; object encoding set:004
hashtable
&lt;/code>&lt;/pre>&lt;p>&lt;strong>String&lt;/strong>&lt;/p>
&lt;p>int、raw、embstr&lt;/p>
&lt;p>&lt;strong>int&lt;/strong>&lt;/p>
&lt;p>REDIS_ENCODING_INT（int类型的整数）&lt;/p>
&lt;pre>&lt;code>&amp;gt; set n1 123
OK
&amp;gt; object encoding n1
int
&lt;/code>&lt;/pre>&lt;p>&lt;strong>embstr&lt;/strong>&lt;/p>
&lt;p>REDIS_ENCODING_EMBSTR(编码的简单动态字符串)&lt;/p>
&lt;p>小字符串 长度小于44个字节&lt;/p>
&lt;pre>&lt;code>&amp;gt; set name:001 zhangfei
OK
&amp;gt; object encoding name:001
embstr
&lt;/code>&lt;/pre>&lt;p>&lt;strong>raw&lt;/strong>&lt;/p>
&lt;p>REDIS_ENCODING_RAW （简单动态字符串）&lt;/p>
&lt;p>大字符串 长度大于44个字节&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;gt; &lt;span class="nb">set&lt;/span> address:001 asdasdasdasdasdasdsadasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdas
OK
&amp;gt; object encoding address:001
raw
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>list&lt;/strong>&lt;/p>
&lt;p>列表的编码是quicklist。 REDIS_ENCODING_QUICKLIST（快速列表）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;gt; lpush list:001 &lt;span class="m">1&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="m">3&lt;/span>
&lt;span class="m">10&lt;/span>
&amp;gt; object encoding list:001
quicklist
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>hash&lt;/strong>&lt;/p>
&lt;p>散列的编码是字典和压缩列表&lt;/p>
&lt;p>&lt;strong>dict&lt;/strong>&lt;/p>
&lt;p>REDIS_ENCODING_HT（字典）&lt;/p>
&lt;p>当散列表元素的个数比较多或元素不是小整数或短字符串时。&lt;/p>
&lt;pre>&lt;code>&amp;gt; hmset user:003 username111111111111111111111111111111111111111111111111111111111111111111111111 11111111111111111111111111111111 zhangfei password 111 num 2300000000000000000000000000000000000000000000000000 OK
OK
&amp;gt; object encoding user:003
hashtable
&lt;/code>&lt;/pre>&lt;p>&lt;strong>ziplist&lt;/strong>&lt;/p>
&lt;p>REDIS_ENCODING_ZIPLIST（压缩列表）&lt;/p>
&lt;p>当散列表元素的个数比较少，且元素都是小整数或短字符串时。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;gt; hmset user:001 username zhangfei password &lt;span class="m">111&lt;/span> age &lt;span class="m">23&lt;/span> sex M
OK
&amp;gt; object encoding user:001
ziplist
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>set&lt;/strong>&lt;/p>
&lt;p>集合的编码是整形集合和字典&lt;/p>
&lt;p>&lt;strong>insert&lt;/strong>&lt;/p>
&lt;p>REDIS_ENCODING_INTSET（整数集合）&lt;/p>
&lt;p>当Redis集合类型的元素都是整数并且都处在64位有符号整数范围内（&amp;lt;18446744073709551616）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;gt; sadd set:001 &lt;span class="m">1&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="m">6&lt;/span> &lt;span class="m">2&lt;/span>
&lt;span class="m">0&lt;/span>
&amp;gt; object encoding set:001
intset
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>dict&lt;/strong>&lt;/p>
&lt;p>REDIS_ENCODING_HT（字典）&lt;/p>
&lt;p>当Redis集合类型的元素都是整数并且都处在64位有符号整数范围外（&amp;gt;18446744073709551616）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;gt; sadd set:004 &lt;span class="m">1&lt;/span> &lt;span class="m">100000000000000000000000000&lt;/span> &lt;span class="m">9999999999&lt;/span>
&lt;span class="m">0&lt;/span>
&amp;gt; object encoding set:004
hashtable
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>zset&lt;/strong>&lt;/p>
&lt;p>有序集合的编码是压缩列表和跳跃表+字典&lt;/p>
&lt;p>&lt;strong>ziplist&lt;/strong>&lt;/p>
&lt;p>REDIS_ENCODING_ZIPLIST（压缩列表）&lt;/p>
&lt;p>当元素的个数比较少，且元素都是小整数或短字符串时。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;gt; zadd hit:1 &lt;span class="m">100&lt;/span> item1 &lt;span class="m">20&lt;/span> item2 &lt;span class="m">45&lt;/span> item3
&lt;span class="m">3&lt;/span>
&amp;gt; object encoding hit:1
ziplist
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>skiplist + dict&lt;/strong>&lt;/p>
&lt;p>REDIS_ENCODING_SKIPLIST（跳跃表+字典）&lt;/p>
&lt;p>当元素的个数比较多或元素不是小整数或短字符串时。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;gt; zadd hit:2 &lt;span class="m">100&lt;/span> item1111111111111111111111111111111111111111111111111111111111111111111111111111 &lt;span class="m">1111111111111111111111111111111111&lt;/span> &lt;span class="m">20&lt;/span> item2 &lt;span class="m">45&lt;/span> item3
&lt;span class="m">1&lt;/span>
&amp;gt; object encoding hit:2
skiplist
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/cache/">cache</category><category domain="https://chuchin.cn/tech/cache/redis/">redis</category><category domain="https://chuchin.cn/tags/redis/">Redis</category></item><item><title>Zookeeper 应用场景</title><link>https://chuchin.cn/tech/distributed-micro-service/zookeeper/zookeeper-04/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/zookeeper/zookeeper-04/</guid><pubDate>Wed, 04 Mar 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/zookeeper/">zookeeper</category><category domain="https://chuchin.cn/tags/zookeeper/">Zookeeper</category></item><item><title>Redis 客户端访问</title><link>https://chuchin.cn/tech/cache/redis/redis-03/</link><guid isPermaLink="true">https://chuchin.cn/tech/cache/redis/redis-03/</guid><pubDate>Tue, 03 Mar 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h2 id="java-程序访问-redis">Java 程序访问 Redis&lt;/h2>
&lt;p>采用jedis API进行访问即可&lt;/p>
&lt;ol>
&lt;li>
&lt;p>关闭RedisServer端的防火墙&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">systemctl stop firewalld&lt;span class="o">(&lt;/span>默认&lt;span class="o">)&lt;/span>
systemctl disable firewalld.service&lt;span class="o">(&lt;/span>设置开启不启动&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>新建maven项目后导入Jedis包&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>redis.clients&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>jedis&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>2.9.0&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>测试&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">JedisTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Jedis&lt;/span> &lt;span class="n">jedis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Jedis&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;127.0.0.1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">6379&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">jedis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jedis:name:1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="s">&amp;#34;cn-chuchin&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jedis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jedis:name:1&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">jedis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lpush&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jedis:list:1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;3&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;4&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;5&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jedis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">llen&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jedis:list:1&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="spring-访问-redis">Spring 访问 Redis&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>新建项目，添加依赖&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-beans&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>5.2.5.RELEASE&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-core&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>5.2.5.RELEASE&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-context&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>5.2.5.RELEASE&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-test&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>5.2.5.RELEASE&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>junit&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>junit&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>4.12&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;scope&amp;gt;&lt;/span>test&lt;span class="nt">&amp;lt;/scope&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>redis依赖&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.data&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-data-redis&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.0.3.RELEASE&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>添加Spring配置文件&lt;/p>
&lt;p>redis.xml&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="cp">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;beans&lt;/span> &lt;span class="na">xmlns=&lt;/span>&lt;span class="s">&amp;#34;http://www.springframework.org/schema/beans&amp;#34;&lt;/span>
&lt;span class="na">xmlns:xsi=&lt;/span>&lt;span class="s">&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span>
&lt;span class="na">xsi:schemaLocation=&lt;/span>&lt;span class="s">&amp;#34;http://www.springframework.org/schema/beans
&lt;/span>&lt;span class="s">http://www.springframework.org/schema/beans/spring-beans.xsd&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;bean&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;propertyConfigurer&amp;#34;&lt;/span>
&lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;org.springframework.beans.factory.config.PropertyPlaceholderConfigur
&lt;/span>&lt;span class="s">er&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;locations&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;list&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;value&amp;gt;&lt;/span>classpath:redis.properties&lt;span class="nt">&amp;lt;/value&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/list&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/bean&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- redis config --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;bean&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;jedisPoolConfig&amp;#34;&lt;/span> &lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;redis.clients.jedis.JedisPoolConfig&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;maxActive&amp;#34;&lt;/span> &lt;span class="na">value=&lt;/span>&lt;span class="s">&amp;#34;${redis.pool.maxActive}&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;maxIdle&amp;#34;&lt;/span> &lt;span class="na">value=&lt;/span>&lt;span class="s">&amp;#34;${redis.pool.maxIdle}&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;maxWait&amp;#34;&lt;/span> &lt;span class="na">value=&lt;/span>&lt;span class="s">&amp;#34;${redis.pool.maxWait}&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;testOnBorrow&amp;#34;&lt;/span> &lt;span class="na">value=&lt;/span>&lt;span class="s">&amp;#34;${redis.pool.testOnBorrow}&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/bean&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;bean&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;jedisConnectionFactory&amp;#34;&lt;/span>
&lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;org.springframework.data.redis.connection.jedis.JedisConnectionFactor
&lt;/span>&lt;span class="s">y&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;hostName&amp;#34;&lt;/span> &lt;span class="na">value=&lt;/span>&lt;span class="s">&amp;#34;${redis.server}&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;port&amp;#34;&lt;/span> &lt;span class="na">value=&lt;/span>&lt;span class="s">&amp;#34;${redis.port}&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;timeout&amp;#34;&lt;/span> &lt;span class="na">value=&lt;/span>&lt;span class="s">&amp;#34;${redis.timeout}&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;poolConfig&amp;#34;&lt;/span> &lt;span class="na">ref=&lt;/span>&lt;span class="s">&amp;#34;jedisPoolConfig&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/bean&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;bean&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;redisTemplate&amp;#34;&lt;/span>
&lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;org.springframework.data.redis.core.RedisTemplate&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;connectionFactory&amp;#34;&lt;/span> &lt;span class="na">ref=&lt;/span>&lt;span class="s">&amp;#34;jedisConnectionFactory&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;KeySerializer&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;bean&lt;/span>
&lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;org.springframework.data.redis.serializer.StringRedisSerializer&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/bean&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;ValueSerializer&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;bean&lt;/span>
&lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;org.springframework.data.redis.serializer.StringRedisSerializer&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/bean&amp;gt;&lt;/span>
/property&amp;gt;
&lt;span class="nt">&amp;lt;/bean&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/beans&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>添加properties文件&lt;/p>
&lt;p>redis.properties&lt;/p>
&lt;pre>&lt;code class="language-properties" data-lang="properties">redis.pool.maxActive=100
redis.pool.maxIdle=50
redis.pool.maxWait=1000
redis.pool.testOnBorrow=true
redis.timeout=50000
redis.server=192.168.72.128
redis.port=6379
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>编写测试用例&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.junit.Test&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.beans.factory.annotation.Autowired&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.data.redis.core.RedisTemplate&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.test.context.ContextConfiguration&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span>
&lt;span class="nn">org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.io.Serializable&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@ContextConfiguration&lt;/span>&lt;span class="o">({&lt;/span> &lt;span class="s">&amp;#34;classpath:redis.xml&amp;#34;&lt;/span> &lt;span class="o">})&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RedisTest&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">AbstractJUnit4SpringContextTests&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">RedisTemplate&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Serializable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Serializable&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">rt&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Test&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">testConn&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">rt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">opsForValue&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="s">&amp;#34;zhangfei&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">opsForValue&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="spring-boot-访问-redis">Spring Boot 访问 Redis&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>新建Spring Boot 项目，勾选spring web，添加依赖&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-data-redis&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>添加配置文件 application.yml&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">redis&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">host&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">192.168.72.128&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">6379&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">jedis&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">pool&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">min-idle&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">max-idle&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">max-active&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">max-wait&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">30000&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">timeout&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3000&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>添加配置类 RedisConfig&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.beans.factory.annotation.Autowired&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.context.annotation.Bean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.context.annotation.Configuration&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.data.redis.connection.RedisConnectionFactory&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.data.redis.core.RedisTemplate&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.data.redis.serializer.StringRedisSerializer&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RedisConfig&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">RedisConnectionFactory&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">RedisTemplate&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">redisTemplate&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">RedisTemplate&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">redisTemplate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RedisTemplate&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="n">redisTemplate&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setKeySerializer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">StringRedisSerializer&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">redisTemplate&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setHashKeySerializer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">StringRedisSerializer&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">redisTemplate&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setHashValueSerializer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">StringRedisSerializer&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">redisTemplate&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setValueSerializer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">StringRedisSerializer&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">redisTemplate&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setConnectionFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">factory&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">redisTemplate&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>添加 RedisController&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.beans.factory.annotation.Autowired&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.data.redis.core.RedisTemplate&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.web.bind.annotation.GetMapping&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.web.bind.annotation.RequestMapping&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.web.bind.annotation.RequestParam&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.web.bind.annotation.RestController&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.concurrent.TimeUnit&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@RestController&lt;/span>
&lt;span class="nd">@RequestMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;/redis&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RedisController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="n">RedisTemplate&lt;/span> &lt;span class="n">redisTemplate&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@GetMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/put&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@RequestParam&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">required&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="nd">@RequestParam&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">required&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//设置过期时间为20秒
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">redisTemplate&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">opsForValue&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">20&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SECONDS&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;Success&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@GetMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/get&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@RequestParam&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">required&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">redisTemplate&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">opsForValue&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>修改Application并运行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.boot.SpringApplication&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.cache.annotation.EnableCaching&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@SpringBootApplication&lt;/span>
&lt;span class="nd">@EnableCaching&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SpringbootRedisApplication&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SpringApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SpringbootRedisApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/cache/">cache</category><category domain="https://chuchin.cn/tech/cache/redis/">redis</category><category domain="https://chuchin.cn/tags/redis/">Redis</category></item><item><title>Zookeeper 基本使用</title><link>https://chuchin.cn/tech/distributed-micro-service/zookeeper/zookeeper-03/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/zookeeper/zookeeper-03/</guid><pubDate>Tue, 03 Mar 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/zookeeper/">zookeeper</category><category domain="https://chuchin.cn/tags/zookeeper/">Zookeeper</category></item><item><title>Redis 数据类型和应用场景</title><link>https://chuchin.cn/tech/cache/redis/redis-02/</link><guid isPermaLink="true">https://chuchin.cn/tech/cache/redis/redis-02/</guid><pubDate>Mon, 02 Mar 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>Redis是一个Key-Value的存储系统，使用ANSI C语言编写。 key的类型是字符串。 value的数据类型有：
常用的：string字符串类型、list列表类型、set集合类型、sortedset（zset）有序集合类型、hash类 型。
不常见的：bitmap位图类型、geo地理位置类型。 Redis5.0新增一种：stream类型 注意：Redis中命令是忽略大小写，（set SET），key是不忽略大小写的 （NAME name）&lt;/p>
&lt;h2 id="redis的key的设计">Redis的Key的设计&lt;/h2>
&lt;ol>
&lt;li>用 : 分割&lt;/li>
&lt;li>把表明转换为key前缀，比如：user:&lt;/li>
&lt;li>第二段放置主键值&lt;/li>
&lt;li>第三段放置列名&lt;/li>
&lt;/ol>
&lt;p>比如：用户表user, 转换为redis的key-value存储&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>userid&lt;/th>
&lt;th>username&lt;/th>
&lt;th>password&lt;/th>
&lt;th>email&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>9&lt;/td>
&lt;td>demo&lt;/td>
&lt;td>11111&lt;/td>
&lt;td>&lt;a href="mailto:demo@demo.com">demo@demo.com&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>username的key：user:9:username&lt;/p>
&lt;p>email的key：user:9:email&lt;/p>
&lt;p>表示明确：看key知道意思&lt;/p>
&lt;p>不易被覆盖&lt;/p>
&lt;h2 id="string字符串类型">string字符串类型&lt;/h2>
&lt;p>Redis的String能表达3种值的类型：字符串、整数、浮点数 100.01 是个六位的串&lt;/p>
&lt;p>常见操作命令如下&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">命令名称&lt;/th>
&lt;th>语法&lt;/th>
&lt;th style="text-align:center">命令描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">set&lt;/td>
&lt;td>set key value&lt;/td>
&lt;td style="text-align:center">赋值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">get&lt;/td>
&lt;td>get key&lt;/td>
&lt;td style="text-align:center">取值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">getset&lt;/td>
&lt;td>getset key value&lt;/td>
&lt;td style="text-align:center">取值并赋值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">setnx&lt;/td>
&lt;td>setnx key value&lt;/td>
&lt;td style="text-align:center">当value不存在时采用赋值 set key value NX PX 3000 原子操作，px 设置毫秒数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">append&lt;/td>
&lt;td>append key value&lt;/td>
&lt;td style="text-align:center">向尾部追加值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">strlen&lt;/td>
&lt;td>strlen key&lt;/td>
&lt;td style="text-align:center">获取字符串长度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">incr&lt;/td>
&lt;td>incr key&lt;/td>
&lt;td style="text-align:center">递增数字&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">incrby&lt;/td>
&lt;td>incrby key increment&lt;/td>
&lt;td style="text-align:center">增加指定的整数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">decr&lt;/td>
&lt;td>decr key&lt;/td>
&lt;td style="text-align:center">递减数字&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">decrby&lt;/td>
&lt;td>decrby key decrement&lt;/td>
&lt;td style="text-align:center">减少指定的整数&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>应用场景：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>key和命令是字符串&lt;/p>
&lt;/li>
&lt;li>
&lt;p>普通的赋值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>incr用于乐观锁&lt;/p>
&lt;p>incr：递增数字，可用于实现乐观锁 watch(事务)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>setnx用于分布式锁&lt;/p>
&lt;p>当value不存在时采用赋值，可用于实现分布式锁&lt;/p>
&lt;p>setnx:&lt;/p>
&lt;pre>&lt;code>127.0.0.1:6379&amp;gt; setnx name zhangf #如果name不存在赋值
(integer) 1
127.0.0.1:6379&amp;gt; setnx name zhaoyun #再次赋值失败
(integer) 0
127.0.0.1:6379&amp;gt; get name
&amp;quot;zhangf&amp;quot;
&lt;/code>&lt;/pre>&lt;p>set:&lt;/p>
&lt;pre>&lt;code>127.0.0.1:6379&amp;gt; set age 18 NX PX 10000 #如果不存在赋值 有效期10秒
OK
127.0.0.1:6379&amp;gt; set age 20 NX #赋值失败
(nil)
127.0.0.1:6379&amp;gt; get age #age失效
(nil)
127.0.0.1:6379&amp;gt; set age 30 NX PX 10000 #赋值成功
OK
127.0.0.1:6379&amp;gt; get age
&amp;quot;30&amp;quot;
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h2 id="list列表类型">list列表类型&lt;/h2>
&lt;p>list列表类型可以存储有序、可重复的元素&lt;/p>
&lt;p>获取头部或尾部附近的记录是极快的&lt;/p>
&lt;p>list的元素个数最多为2^32-1个（40亿）&lt;/p>
&lt;p>常见操作命令如下表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令&lt;/th>
&lt;th>命令格式&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>lpush&lt;/td>
&lt;td>lpush key v1 v2 v3 ...&lt;/td>
&lt;td>从左侧插入&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lpop&lt;/td>
&lt;td>lpop key&lt;/td>
&lt;td>从左侧取出&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>rpush&lt;/td>
&lt;td>rpush key v1 v2 v3 ...&lt;/td>
&lt;td>从右侧插入&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>rpop&lt;/td>
&lt;td>rpop key&lt;/td>
&lt;td>从右侧取出&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lpushx&lt;/td>
&lt;td>lpushx key value&lt;/td>
&lt;td>将值插入列表头部&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>rpushx&lt;/td>
&lt;td>rpushx key value&lt;/td>
&lt;td>将值插入列表尾部&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>blpop&lt;/td>
&lt;td>blpop key timeout&lt;/td>
&lt;td>从列表左侧取出，当列表为空时阻塞，可以设置最大阻塞时间，单位为秒&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>brpop&lt;/td>
&lt;td>brpop key timeout&lt;/td>
&lt;td>从列表右侧取出，当列表为空时阻塞，可以设置最大阻塞时间，单位为秒&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>llen&lt;/td>
&lt;td>llen key&lt;/td>
&lt;td>获得列表中元素个数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lindex&lt;/td>
&lt;td>lindex key index&lt;/td>
&lt;td>获得列表中下表为index的元素index从0开始&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lrange&lt;/td>
&lt;td>lrange key start end&lt;/td>
&lt;td>返回列表中指定区间的元素，区间通过start和end指定&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lrem&lt;/td>
&lt;td>lrem key count value&lt;/td>
&lt;td>删除列表中与value相等的元素 当count&amp;gt;0时， lrem会从列表左边开始删除;当count&amp;lt;0时， lrem会从列表后边开始删除;当count=0时， lrem删除所有值 为value的元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lset&lt;/td>
&lt;td>lset key index value&lt;/td>
&lt;td>将列表index位置的元素设置成value的值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ltrim&lt;/td>
&lt;td>ltrim key start end&lt;/td>
&lt;td>对列表进行修剪，只保留start到end区间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>rpoplpush&lt;/td>
&lt;td>rpoplpush key1 key2&lt;/td>
&lt;td>从key1列表右侧弹出并插入到key2列表左侧&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>brpoplpush&lt;/td>
&lt;td>brpoplpush key1 key2&lt;/td>
&lt;td>从key1列表右侧弹出并插入到key2列表左侧，会阻塞&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>linsert&lt;/td>
&lt;td>linsert key BEFORE/AFTER pivot value&lt;/td>
&lt;td>将value插入到列表，且位于值pivot之前或之后&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>应用场景：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>作为栈或队列使用 列表有序可以作为栈和队列使用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可用于各种列表，比如用户列表、商品列表、评论列表等&lt;/p>
&lt;pre>&lt;code>127.0.0.1:6379&amp;gt; lpush list:1 1 2 3 4 5 3
(integer) 5
127.0.0.1:6379&amp;gt; lrange list:1 0 -1
1) &amp;quot;5&amp;quot;
2) &amp;quot;4&amp;quot;
3) &amp;quot;3&amp;quot;
4) &amp;quot;2&amp;quot;
5) &amp;quot;1&amp;quot;
127.0.0.1:6379&amp;gt; lpop list:1 # 从0开始
&amp;quot;5&amp;quot;
127.0.0.1:6379&amp;gt; rpop list:1
&amp;quot;1&amp;quot;
127.0.0.1:6379&amp;gt; lindex list:1 1
&amp;quot;3&amp;quot;
127.0.0.1:6379&amp;gt; lrange list:1 0 -1
1) &amp;quot;4&amp;quot;
2) &amp;quot;3&amp;quot;
3) &amp;quot;2&amp;quot;
127.0.0.1:6379&amp;gt; lindex list:1 1
&amp;quot;3&amp;quot;
127.0.0.1:6379&amp;gt; rpoplpush list:1 list:2
&amp;quot;2&amp;quot;
127.0.0.1:6379&amp;gt; lrange list:2 0 -1
1) &amp;quot;2&amp;quot;
127.0.0.1:6379&amp;gt; lrange list:1 0 -1
1) &amp;quot;4&amp;quot;
2) &amp;quot;3&amp;quot;
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h2 id="set集合类型">set集合类型&lt;/h2>
&lt;p>Set：无序、唯一元素&lt;/p>
&lt;p>集合中最大的成员数为 2^32 - 1&lt;/p>
&lt;p>常见操作命令如下表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令名称&lt;/th>
&lt;th>命令格式&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>sadd&lt;/td>
&lt;td>sadd key mem1 mem2 ...&lt;/td>
&lt;td>为集合添加新成员&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>srem&lt;/td>
&lt;td>srem key mem1 mem2 ....&lt;/td>
&lt;td>删除集合中指定成员&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>smembers&lt;/td>
&lt;td>smembers key&lt;/td>
&lt;td>获得集合中所有元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>spop&lt;/td>
&lt;td>spop key&lt;/td>
&lt;td>返回集合中一个随机元素，并将该元素删除&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>srandmember&lt;/td>
&lt;td>srandmember key&lt;/td>
&lt;td>返回集合中一个随机元素，不会删除该元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>scard&lt;/td>
&lt;td>scard key&lt;/td>
&lt;td>获得集合中元素的数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sismember&lt;/td>
&lt;td>sismember key member&lt;/td>
&lt;td>判断元素是否在集合内&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sinter&lt;/td>
&lt;td>sinter key1 key2 key3&lt;/td>
&lt;td>求多集合的交集&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sdiff&lt;/td>
&lt;td>sdiff key1 key2 key3&lt;/td>
&lt;td>求多集合的差集&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sunion&lt;/td>
&lt;td>sunion key1 key2 key3&lt;/td>
&lt;td>求多集合的并集&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>应用场景：
适用于不能重复的且不需要顺序的数据结构&lt;/p>
&lt;p>比如：关注的用户，还可以通过spop进行随机抽奖&lt;/p>
&lt;p>举例：&lt;/p>
&lt;pre>&lt;code>127.0.0.1:6379&amp;gt; sadd set:1 a b c d
(integer) 4
127.0.0.1:6379&amp;gt; smembers set:1
1) &amp;quot;d&amp;quot;
2) &amp;quot;b&amp;quot;
3) &amp;quot;a&amp;quot;
4) &amp;quot;c&amp;quot;
127.0.0.1:6379&amp;gt; srandmember set:1
&amp;quot;c&amp;quot;
127.0.0.1:6379&amp;gt; srandmember set:1
&amp;quot;b&amp;quot;
127.0.0.1:6379&amp;gt; sadd set:2 b c r f
(integer) 4
127.0.0.1:6379&amp;gt; sinter set:1 set:2
1) &amp;quot;b&amp;quot;
2) &amp;quot;c&amp;quot;
127.0.0.1:6379&amp;gt; spop set:1
&amp;quot;d&amp;quot;
127.0.0.1:6379&amp;gt; smembers set:1
1) &amp;quot;b&amp;quot;
2) &amp;quot;a&amp;quot;
3) &amp;quot;c&amp;quot;
&lt;/code>&lt;/pre>&lt;h2 id="sortedset有序集合类型">sortedset有序集合类型&lt;/h2>
&lt;p>SortedSet(ZSet) 有序集合：&lt;/p>
&lt;p>元素本身是无序不重复的&lt;/p>
&lt;p>每个元素关联一个分数(score)&lt;/p>
&lt;p>可按分数排序，分数可重复&lt;/p>
&lt;p>常见操作命令如下表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令名称&lt;/th>
&lt;th>命令格式&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>zadd&lt;/td>
&lt;td>zadd key score1 member1 score2 member2 ...&lt;/td>
&lt;td>为有序集合添加新成员&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>zrem&lt;/td>
&lt;td>zrem key mem1 mem2 ....&lt;/td>
&lt;td>删除有序集合中指定成员&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>zcard&lt;/td>
&lt;td>zcard key&lt;/td>
&lt;td>获得有序集合中的元素数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>zcount&lt;/td>
&lt;td>zcount key min max&lt;/td>
&lt;td>返回集合中score值在[min,max]区间 的元素数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>zincrby&lt;/td>
&lt;td>zincrby key increment member&lt;/td>
&lt;td>在集合的member分值上加increment&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>zscore&lt;/td>
&lt;td>zscore key member&lt;/td>
&lt;td>获得集合中member的分值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>zrank&lt;/td>
&lt;td>zrank key member&lt;/td>
&lt;td>获得集合中member的排名（按分值从 小到大）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>zrevrank&lt;/td>
&lt;td>zrevrank key member&lt;/td>
&lt;td>获得集合中member的排名（按分值从 大到小）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>zrange&lt;/td>
&lt;td>zrange key start end&lt;/td>
&lt;td>获得集合中指定区间成员，按分数递增 排序&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>zrevrange&lt;/td>
&lt;td>zrevrange key start end&lt;/td>
&lt;td>获得集合中指定区间成员，按分数递减 排序&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>应用场景：&lt;/p>
&lt;p>由于可以按照分值排序，所以适用于各种排行榜。比如：点击排行榜、销量排行榜、关注排行榜等。&lt;/p>
&lt;p>举例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">127.0.0.1:6379&amp;gt; zadd hit:1 &lt;span class="m">100&lt;/span> item1 &lt;span class="m">20&lt;/span> item2 &lt;span class="m">45&lt;/span> item3
&lt;span class="o">(&lt;/span>integer&lt;span class="o">)&lt;/span> &lt;span class="m">3&lt;/span>
127.0.0.1:6379&amp;gt; zcard hit:1
&lt;span class="o">(&lt;/span>integer&lt;span class="o">)&lt;/span> &lt;span class="m">3&lt;/span>
127.0.0.1:6379&amp;gt; zscore hit:1 item3
&lt;span class="s2">&amp;#34;45&amp;#34;&lt;/span>
127.0.0.1:6379&amp;gt; zrevrange hit:1 &lt;span class="m">0&lt;/span> -1
1&lt;span class="o">)&lt;/span> &lt;span class="s2">&amp;#34;item1&amp;#34;&lt;/span>
2&lt;span class="o">)&lt;/span> &lt;span class="s2">&amp;#34;item3&amp;#34;&lt;/span>
3&lt;span class="o">)&lt;/span> &lt;span class="s2">&amp;#34;item2&amp;#34;&lt;/span>
127.0.0.1:6379&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="hash类型散列表">hash类型（散列表）&lt;/h2>
&lt;p>Redis hash 是一个 string 类型的 field 和 value 的映射表，它提供了字段和字段值的映射。&lt;/p>
&lt;p>每个 hash 可以存储 2^32 - 1 键值对（40多亿）。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201225-143917-0198.png" alt="20201225-143917-0198.png">&lt;/p>
&lt;p>常见操作命令如下表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令名称&lt;/th>
&lt;th>命令格式&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>hset&lt;/td>
&lt;td>hset key field value&lt;/td>
&lt;td>赋值，不区别新增或修改&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>hmset&lt;/td>
&lt;td>hmset key field1 value1 field2 value2&lt;/td>
&lt;td>批量赋值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>hsetnx&lt;/td>
&lt;td>hsetnx key field value&lt;/td>
&lt;td>赋值，如果filed存在则不操作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>hexists&lt;/td>
&lt;td>hexists key filed&lt;/td>
&lt;td>查看某个field是否存在&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>hget&lt;/td>
&lt;td>hget key field&lt;/td>
&lt;td>获取一个字段值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>hmget&lt;/td>
&lt;td>hmget key field1 field2 ...&lt;/td>
&lt;td>获取多个字段值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>hgetall&lt;/td>
&lt;td>hgetall key&lt;/td>
&lt;td>返回 key 指定的哈希集中所有的字段和值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>hdel&lt;/td>
&lt;td>hdel key field1 field2...&lt;/td>
&lt;td>删除指定字段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>hincrby&lt;/td>
&lt;td>hincrby key field increment&lt;/td>
&lt;td>指定字段自增increment&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>hlen&lt;/td>
&lt;td>hlen key&lt;/td>
&lt;td>获得字段数量&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>应用场景： 对象的存储 ，表数据的映射&lt;/p>
&lt;p>举例：&lt;/p>
&lt;pre>&lt;code>127.0.0.1:6379&amp;gt; hmset user:001 username zhangfei password 111 age 23 sex M
OK
127.0.0.1:6379&amp;gt; hgetall user:001
1) &amp;quot;username&amp;quot;
2) &amp;quot;zhangfei&amp;quot;
3) &amp;quot;password&amp;quot;
4) &amp;quot;111&amp;quot;
5) &amp;quot;age&amp;quot;
6) &amp;quot;23&amp;quot;
7) &amp;quot;sex&amp;quot;
8) &amp;quot;M&amp;quot;
127.0.0.1:6379&amp;gt; hget user:001 username
&amp;quot;zhangfei&amp;quot;
127.0.0.1:6379&amp;gt; hincrby user:001 age
(integer) 24
127.0.0.1:6379&amp;gt; hlen user:001
(integer) 4
&lt;/code>&lt;/pre>&lt;p>Jedis客户端操作，安装启动卸载&lt;/p>
&lt;p>普通命令&lt;/p>
&lt;h2 id="bitmap位图类型">bitmap位图类型&lt;/h2>
&lt;p>bitmap是进行位操作的&lt;/p>
&lt;p>通过一个bit位来表示某个元素对应的值或者状态,其中的key就是对应元素本身。&lt;/p>
&lt;p>bitmap本身会极大的节省储存空间。&lt;/p>
&lt;p>常见操作命令如下表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令名称&lt;/th>
&lt;th>命令格式&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>setbit&lt;/td>
&lt;td>setbit key offset value&lt;/td>
&lt;td>设置key在offset处的bit值(只能是0或者 1)。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>getbit&lt;/td>
&lt;td>getbit key offset&lt;/td>
&lt;td>获得key在offset处的bit值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bitcount&lt;/td>
&lt;td>bitcount key&lt;/td>
&lt;td>获得key的bit位为1的个数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bitpos&lt;/td>
&lt;td>bitpos key value&lt;/td>
&lt;td>返回第一个被设置为bit值的索引值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bitop&lt;/td>
&lt;td>bitop and[or/xor/not] destkey key [key …]&lt;/td>
&lt;td>对多个key 进行逻辑运算后存入destkey 中&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>应用场景：&lt;/p>
&lt;ol>
&lt;li>用户每月签到，用户id为key ， 日期作为偏移量 1表示签到&lt;/li>
&lt;li>统计活跃用户, 日期为key，用户id为偏移量 1表示活跃&lt;/li>
&lt;li>查询用户在线状态， 日期为key，用户id为偏移量 1表示在线&lt;/li>
&lt;/ol>
&lt;p>举例：&lt;/p>
&lt;pre>&lt;code>127.0.0.1:6379&amp;gt; setbit user:sign:1000 20200101 1 #id为1000的用户20200101签到
(integer) 0
127.0.0.1:6379&amp;gt; setbit user:sign:1000 20200103 1 #id为1000的用户20200103签到
(integer) 0
127.0.0.1:6379&amp;gt; getbit user:sign:1000 20200101 #获得id为1000的用户20200101签到状态 1 表示签到 (integer) 1
127.0.0.1:6379&amp;gt; getbit user:sign:1000 20200102 #获得id为1000的用户20200102签到状态 0表示未签到 (integer) 0
127.0.0.1:6379&amp;gt; bitcount user:sign:1000 # 获得id为1000的用户签到次数
(integer) 2
127.0.0.1:6379&amp;gt; bitpos user:sign:1000 1 #id为1000的用户第一次签到的日期
(integer) 20200101
127.0.0.1:6379&amp;gt; setbit 20200201 1000 1 #20200201的1000号用户上线
(integer) 0
127.0.0.1:6379&amp;gt; setbit 20200202 1001 1 #20200202的1000号用户上线
(integer) 0
127.0.0.1:6379&amp;gt; setbit 20200201 1002 1 #20200201的1002号用户上线
(integer) 0
127.0.0.1:6379&amp;gt; bitcount 20200201 #20200201的上线用户有2个
(integer) 2
127.0.0.1:6379&amp;gt; bitop or desk1 20200201 20200202 #合并20200201的用户和20200202上线了的用户个数(integer) 126
127.0.0.1:6379&amp;gt; bitcount desk1
(integer) 3
&lt;/code>&lt;/pre>&lt;h2 id="geo地理位置类型">geo地理位置类型&lt;/h2>
&lt;p>geo是Redis用来处理位置信息的。在Redis3.2中正式使用。主要是利用了Z阶曲线、Base32编码和 geohash算法&lt;/p>
&lt;p>&lt;strong>Z阶曲线&lt;/strong>&lt;/p>
&lt;p>在x轴和y轴上将十进制数转化为二进制数，采用x轴和y轴对应的二进制数依次交叉后得到一个六位数编码。把数字从小到大依次连起来的曲线称为Z阶曲线，Z阶曲线是把多维转换成一维的一种方法。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201225-142636-0750.png" alt="20201225-142636-0750.png">&lt;/p>
&lt;p>&lt;strong>Base32编码&lt;/strong>&lt;/p>
&lt;p>Base32这种数据编码机制，主要用来把二进制数据编码成可见的字符串，其编码规则是：任意给定一 个二进制数据，以5个位(bit)为一组进行切分(base64以6个位(bit)为一组)，对切分而成的每个组进行编 码得到1个可见字符。Base32编码表字符集中的字符总数为32个（0-9、b-z去掉a、i、l、o），这也是 Base32名字的由来。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201225-141937-0688.png" alt="20201225-141937-0688.png">&lt;/p>
&lt;p>&lt;strong>geohash算法&lt;/strong>&lt;/p>
&lt;p>Gustavo在2008年2月上线了geohash.org网站。Geohash是一种地理位置信息编码方法。 经过 geohash映射后，地球上任意位置的经纬度坐标可以表示成一个较短的字符串。可以方便的存储在数据 库中，附在邮件上，以及方便的使用在其他服务中。以北京的坐标举例，[39.928167,116.389550]可以 转换成wx4g0s8q3jf9。&lt;/p>
&lt;p>Redis中经纬度使用52位的整数进行编码，放进zset中，zset的value元素是key，score是GeoHash的 52位整数值。在使用Redis进行Geo查询时，其内部对应的操作其实只是zset(skiplist)的操作。通过zset 的score进行排序就可以得到坐标附近的其它元素，通过将score还原成坐标值就可以得到元素的原始坐标。&lt;/p>
&lt;p>常见操作命令如下表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令名称&lt;/th>
&lt;th>命令格式&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>geoadd&lt;/td>
&lt;td>geoadd key 经度 纬度 成员名称1 经度1 纬度1 成 员名称2 经度2 纬度 2 ...&lt;/td>
&lt;td>添加地理坐标&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>geohash&lt;/td>
&lt;td>geohash key 成员名称1 成员名称2...&lt;/td>
&lt;td>返回标准的 geohash串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>geopos&lt;/td>
&lt;td>geopos key 成员名称1 成员名称2...&lt;/td>
&lt;td>返回成员经纬度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>geodist&lt;/td>
&lt;td>geodist key 成员1 成员2 单位&lt;/td>
&lt;td>计算成员间距离&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>georadiusbymember&lt;/td>
&lt;td>georadiusbymember key 成员 值单位 count 数 asc[desc]&lt;/td>
&lt;td>根据成员查找附 近的成员&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>应用场景：&lt;/p>
&lt;ol>
&lt;li>记录地理位置&lt;/li>
&lt;li>计算距离&lt;/li>
&lt;li>查找附近的人&lt;/li>
&lt;/ol>
&lt;p>举例：&lt;/p>
&lt;pre>&lt;code>127.0.0.1:6379&amp;gt; geoadd user:addr 116.31 40.05 zhangf 116.38 39.88 zhaoyun 116.47 40.00 diaochan #添加用户地址 zhangf、zhaoyun、diaochan的经纬度
(integer) 3
127.0.0.1:6379&amp;gt; geohash user:addr zhangf diaochan #获得zhangf和diaochan的geohash 码
1) &amp;quot;wx4eydyk5m0&amp;quot;
2) &amp;quot;wx4gd3fbgs0&amp;quot;
127.0.0.1:6379&amp;gt; geopos user:addr zhaoyun #获得zhaoyun的经纬度
1) 1) &amp;quot;116.38000041246414185&amp;quot;
2) &amp;quot;39.88000114172373145&amp;quot;
127.0.0.1:6379&amp;gt; geodist user:addr zhangf diaochan #计算zhangf到diaochan的距离,单位m
&amp;quot;14718.6972&amp;quot;
127.0.0.1:6379&amp;gt; geodist user:addr zhangf diaochan km
&amp;quot;14.7187&amp;quot;
127.0.0.1:6379&amp;gt; geodist user:addr zhangf zhaoyun km
&amp;quot;19.8276&amp;quot;
# 获得距离zhangf20km以内的按由近到远的顺序排出前三名的成员名称、距离及经纬度
#withcoord ： 获得经纬度 withdist：获得距离 withhash：获得geohash码
127.0.0.1:6379&amp;gt; georadiusbymember user:addr zhangf 20 km withcoord withdist count 3 asc 1) 1) &amp;quot;zhangf&amp;quot;
2) &amp;quot;0.0000&amp;quot;
3) 1) &amp;quot;116.31000012159347534&amp;quot;
2) &amp;quot;40.04999982043828055&amp;quot;
2) 1) &amp;quot;diaochan&amp;quot;
2) &amp;quot;14.7187&amp;quot;
3) 1) &amp;quot;116.46999925374984741&amp;quot;
2) &amp;quot;39.99999991084916218&amp;quot;
3) 1) &amp;quot;zhaoyun&amp;quot;
2) &amp;quot;19.8276&amp;quot;
3) 1) &amp;quot;116.38000041246414185&amp;quot;
2) &amp;quot;39.88000114172373145&amp;quot;
&lt;/code>&lt;/pre>&lt;h2 id="stream数据流类型">stream数据流类型&lt;/h2>
&lt;p>stream是Redis5.0后新增的数据结构，用于可持久化的消息队列。&lt;/p>
&lt;p>几乎满足了消息队列具备的全部内容，包括：&lt;/p>
&lt;ul>
&lt;li>消息ID的序列化生成&lt;/li>
&lt;li>消息遍历&lt;/li>
&lt;li>消息的阻塞和非阻塞读取&lt;/li>
&lt;li>消息的分组消费&lt;/li>
&lt;li>未完成消息的处理&lt;/li>
&lt;li>消息队列监控&lt;/li>
&lt;/ul>
&lt;p>每个Stream都有唯一的名称，它就是Redis的key，首次使用xadd指令追加消息时自动创建。&lt;/p>
&lt;p>常见操作命令如下表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令名称&lt;/th>
&lt;th>命令格式&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>xadd&lt;/td>
&lt;td>xadd key id &amp;lt;*&amp;gt; field1 value1....&lt;/td>
&lt;td>将指定消息数据追加到指定队列(key)中，* 表示最新生成的id（当前时间+序列号）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>xread&lt;/td>
&lt;td>xread [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] ID [ID ...]&lt;/td>
&lt;td>从消息队列中读取，COUNT：读取条数， BLOCK：阻塞读（默认不阻塞）key：队列 名称 id：消息id&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>xrange&lt;/td>
&lt;td>xrange key start end [COUNT]&lt;/td>
&lt;td>读取队列中给定ID范围的消息 COUNT：返 回消息条数（消息id从小到大）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>xrevrange&lt;/td>
&lt;td>xrevrange key start end [COUNT]&lt;/td>
&lt;td>读取队列中给定ID范围的消息 COUNT：返 回消息条数（消息id从大到小）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>xdel&lt;/td>
&lt;td>xdel key id&lt;/td>
&lt;td>删除队列的消息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>xgroup&lt;/td>
&lt;td>xgroup create key groupname id&lt;/td>
&lt;td>创建一个新的消费组&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>xgroup&lt;/td>
&lt;td>xgroup destory key groupname&lt;/td>
&lt;td>删除指定消费组&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>xgroup&lt;/td>
&lt;td>xgroup delconsumer key groupname cname&lt;/td>
&lt;td>删除指定消费组中的某个消费者&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>xgroup&lt;/td>
&lt;td>xgroup setid key id&lt;/td>
&lt;td>修改指定消息的最大id&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>xreadgroup&lt;/td>
&lt;td>xreadgroup group groupname consumer COUNT streams key&lt;/td>
&lt;td>从队列中的消费组中创建消费者并消费数据 （consumer不存在则创建）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>应用场景：&lt;/p>
&lt;p>消息队列的使用&lt;/p>
&lt;pre>&lt;code>127.0.0.1:6379&amp;gt; xadd topic:001 * name zhangfei age 23
&amp;quot;1591151905088-0&amp;quot;
127.0.0.1:6379&amp;gt; xadd topic:001 * name zhaoyun age 24 name diaochan age 16
&amp;quot;1591151912113-0&amp;quot;
127.0.0.1:6379&amp;gt; xrange topic:001 - +
1) 1) &amp;quot;1591151905088-0&amp;quot;
2) 1) &amp;quot;name&amp;quot;
2) &amp;quot;zhangfei&amp;quot;
3) &amp;quot;age&amp;quot;
4) &amp;quot;23&amp;quot;
2) 1) &amp;quot;1591151912113-0&amp;quot;
2) 1) &amp;quot;name&amp;quot;
2) &amp;quot;zhaoyun&amp;quot;
3) &amp;quot;age&amp;quot;
4) &amp;quot;24&amp;quot;
5) &amp;quot;name&amp;quot;
6) &amp;quot;diaochan&amp;quot;
7) &amp;quot;age&amp;quot;
8) &amp;quot;16&amp;quot;
127.0.0.1:6379&amp;gt; xread COUNT 1 streams topic:001 0
1) 1) &amp;quot;topic:001&amp;quot;
2) 1) 1) &amp;quot;1591151905088-0&amp;quot;
2) 1) &amp;quot;name&amp;quot;
2) &amp;quot;zhangfei&amp;quot;
3) &amp;quot;age&amp;quot;
4) &amp;quot;23&amp;quot;
#创建的group1
127.0.0.1:6379&amp;gt; xgroup create topic:001 group1 0
OK
# 创建cus1加入到group1 消费 没有被消费过的消息 消费第一条
127.0.0.1:6379&amp;gt; xreadgroup group group1 cus1 count 1 streams topic:001 &amp;gt;
1) 1) &amp;quot;topic:001&amp;quot;
2) 1) 1) &amp;quot;1591151905088-0&amp;quot;
2) 1) &amp;quot;name&amp;quot;
2) &amp;quot;zhangfei&amp;quot;
3) &amp;quot;age&amp;quot;
4) &amp;quot;23&amp;quot;
#继续消费 第二条
127.0.0.1:6379&amp;gt; xreadgroup group group1 cus1 count 1 streams topic:001 &amp;gt;
1) 1) &amp;quot;topic:001&amp;quot;
2) 1) 1) &amp;quot;1591151912113-0&amp;quot;
2) 1) &amp;quot;name&amp;quot;
2) &amp;quot;zhaoyun&amp;quot;
3) &amp;quot;age&amp;quot;
4) &amp;quot;24&amp;quot;
5) &amp;quot;name&amp;quot;
6) &amp;quot;diaochan&amp;quot;
7) &amp;quot;age&amp;quot;
8) &amp;quot;16&amp;quot;
#没有可消费
127.0.0.1:6379&amp;gt; xreadgroup group group1 cus1 count 1 streams topic:001 &amp;gt;
(nil)
&lt;/code>&lt;/pre></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/cache/">cache</category><category domain="https://chuchin.cn/tech/cache/redis/">redis</category><category domain="https://chuchin.cn/tags/redis/">Redis</category></item><item><title>Zookeeper 环境搭建</title><link>https://chuchin.cn/tech/distributed-micro-service/zookeeper/zookeeper-02/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/zookeeper/zookeeper-02/</guid><pubDate>Mon, 02 Mar 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/zookeeper/">zookeeper</category><category domain="https://chuchin.cn/tags/zookeeper/">Zookeeper</category></item><item><title>Zookeeper 简介</title><link>https://chuchin.cn/tech/distributed-micro-service/zookeeper/zookeeper-01/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/zookeeper/zookeeper-01/</guid><pubDate>Sun, 01 Mar 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/zookeeper/">zookeeper</category><category domain="https://chuchin.cn/tags/zookeeper/">Zookeeper</category></item><item><title>缓存原理与设计</title><link>https://chuchin.cn/tech/cache/redis/redis-01/</link><guid isPermaLink="true">https://chuchin.cn/tech/cache/redis/redis-01/</guid><pubDate>Sun, 01 Mar 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h2 id="缓存基本思想">缓存基本思想&lt;/h2>
&lt;h3 id="缓存的使用场景">缓存的使用场景&lt;/h3>
&lt;h4 id="db缓存减轻服务器压力">DB缓存，减轻服务器压力&lt;/h4>
&lt;p>一般情况下数据存在数据库中，应用程序直接操作数据库。&lt;/p>
&lt;p>当访问量上万，数据库压力增大，可以采取的方案有：&lt;/p>
&lt;p>读写分离，分库分表&lt;/p>
&lt;p>当访问量达到10万、百万，需要引入缓存。&lt;/p>
&lt;p>将已经访问过的内容或数据存储起来，当再次访问时先找缓存，缓存命中返回数据。&lt;/p>
&lt;p>不命中再找数据库，并回填缓存。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201225-100001-0091.png" alt="20201225-100001-0091.png">&lt;/p>
&lt;h4 id="提高系统响应">提高系统响应&lt;/h4>
&lt;p>数据库的数据是存在文件里，也就是硬盘。与内存做交换（swap）&lt;/p>
&lt;p>在大量瞬间访问时（高并发）MySQL单机会因为频繁IO而造成无法响应。MySQL的InnoDB是有行锁&lt;/p>
&lt;p>将数据缓存在Redis中，也就是存在了内存中。&lt;/p>
&lt;p>内存天然支持高并发访问。可以瞬间处理大量请求。&lt;/p>
&lt;p>qps到达10万读请求&lt;/p>
&lt;h4 id="做session分离">做Session分离&lt;/h4>
&lt;p>传统的session是由tomcat自己进行维护和管理。&lt;/p>
&lt;p>集群或分布式环境，不同的tomcat管理各自的session。&lt;/p>
&lt;p>只能在各个tomcat之间，通过网络和Io进行session的复制，极大的影响了系统的性能。&lt;/p>
&lt;p>将登录成功后的Session信息，存放在Redis中，这样多个服务器(Tomcat)可以共享Session信息。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201225-105803-0981.png" alt="20201225-105803-0981.png">&lt;/p>
&lt;h4 id="做分布式锁redis">做分布式锁（Redis）&lt;/h4>
&lt;p>一般讲锁是多线程的锁，是在一个进程中的&lt;/p>
&lt;p>多个进程（JVM）在并发时也会产生问题，也要控制时序性 可以采用分布式锁。&lt;/p>
&lt;p>使用Redis实现 sexNX&lt;/p>
&lt;h4 id="做乐观锁redis">做乐观锁（Redis）&lt;/h4>
&lt;p>同步锁和数据库中的行锁、表锁都是悲观锁&lt;/p>
&lt;p>悲观锁的性能是比较低的，响应性比较差&lt;/p>
&lt;p>高性能、高响应（秒杀）采用乐观锁&lt;/p>
&lt;p>Redis可以实现乐观锁 watch + incr&lt;/p>
&lt;h3 id="什么是缓存">什么是缓存？&lt;/h3>
&lt;p>缓存原指CPU上的一种高速存储器，它先于内存与CPU交换数据，速度很快 现在泛指存储在计算机上的原始数据的复制集，便于快速访问。 在互联网技术中，缓存是系统快速响应的关键技术之一&lt;/p>
&lt;h3 id="大型网站中缓存的使用">大型网站中缓存的使用&lt;/h3>
&lt;p>单机架构LAMP（Linux+apache+MySQL+PHP）、JavaEE（SSM）&lt;/p>
&lt;p>访问量越大，响应力越差，用户体验越差&lt;/p>
&lt;p>引入缓存、示意图如下：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201225-102706-0298.png" alt="20201225-102706-0298.png">&lt;/p>
&lt;p>在大型网站中从浏览器到网络，再到应用服务器，再到数据库，通过在各个层面应用缓存技术，大大提升了系统性能和用户体验。&lt;/p>
&lt;h3 id="常见缓存分类">常见缓存分类&lt;/h3>
&lt;h4 id="客户端缓存">客户端缓存&lt;/h4>
&lt;p>传统互联网：页面缓存和浏览器缓存&lt;/p>
&lt;p>移动互联网：APP缓存&lt;/p>
&lt;h5 id="页面缓存">页面缓存&lt;/h5>
&lt;p>页面缓存：页面自身对某些元素或全部元素进行存储，并保存成文件。&lt;/p>
&lt;p>html5：Cookie、WebStorage（SessionStorage和LocalStorage）、WebSql、indexDB、Application Cache等&lt;/p>
&lt;p>开启步骤：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>设置manifest描述文件&lt;/p>
&lt;pre>&lt;code>CACHE MANIFEST
#comment
js/index.js
img/bg.png
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>html关联manifest属性&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span> &lt;span class="na">manifest&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;demo.appcache&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用LocalStorage进行本地的数据存储，示例代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nx">localStorage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setItem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Name&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;张飞&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">localStorage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getItem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Name&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">localStorage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">removeItem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Name&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">localStorage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">clear&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h5 id="浏览器缓存">浏览器缓存&lt;/h5>
&lt;p>当客户端向服务器请求资源时，会先抵达浏览器缓存，如果浏览器有“要请求资源”的副本，就可以直接从浏览器缓存中提取而不是从原始服务器中提取这个资源。&lt;/p>
&lt;p>浏览器缓存可分为强制缓存和协商缓存。&lt;/p>
&lt;p>强制缓存：直接使用浏览器的缓存数据&lt;/p>
&lt;p>条件：Cache-Control的max-age没有过期或者Expires的缓存时间没有过期&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">http-equiv&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Cache-Control&amp;#34;&lt;/span> &lt;span class="na">content&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;max-age=7200&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">http-equiv&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Expires&amp;#34;&lt;/span> &lt;span class="na">content&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Mon, 20 Aug 2010 23:00:00 GMT&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>协商缓存：服务器资源未修改，使用浏览器的缓存（304）；反之，使用服务器资源（200）。&lt;/p>
&lt;pre>&lt;code>&amp;lt;meta http-equiv=&amp;quot;cache-control&amp;quot; content=&amp;quot;no-cache&amp;quot;&amp;gt;
&lt;/code>&lt;/pre>&lt;h5 id="app缓存">APP缓存&lt;/h5>
&lt;p>原生APP中把数据缓存在内存、文件或本地数据库（SQLite）中。比如图片文件。&lt;/p>
&lt;h4 id="网络端缓存">网络端缓存&lt;/h4>
&lt;p>通过代理的方式响应客户端请求，对重复的请求返回缓存中的数据资源。&lt;/p>
&lt;h5 id="web代理缓存">Web代理缓存&lt;/h5>
&lt;p>可以缓存原生服务器的静态资源，比如样式、图片等。&lt;/p>
&lt;p>常见的反向代理服务器比如大名鼎鼎的Nginx。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201225-103818-0543.png" alt="20201225-103818-0543.png">&lt;/p>
&lt;h5 id="边缘缓存">边缘缓存&lt;/h5>
&lt;p>边缘缓存中典型的商业化服务就是CDN了。&lt;/p>
&lt;p>CDN的全称是Content Delivery Network，即内容分发网络。&lt;/p>
&lt;p>CDN通过部署在各地的边缘服务器，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。&lt;/p>
&lt;p>CDN的关键技术主要有内容存储和分发技术。现在一般的公有云服务商都提供CDN服务。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201225-104119-0259.png" alt="20201225-104119-0259.png">&lt;/p>
&lt;h4 id="服务端缓存">服务端缓存&lt;/h4>
&lt;p>服务器端缓存是整个缓存体系的核心。包括数据库级缓存、平台级缓存和应用级缓存。&lt;/p>
&lt;h5 id="数据库级缓存">数据库级缓存&lt;/h5>
&lt;p>数据库是用来存储和管理数据的。&lt;/p>
&lt;p>MySQL在Server层使用查询缓存机制。将查询后的数据缓存起来。&lt;/p>
&lt;p>K-V结构，Key：select语句的hash值，Value：查询结果&lt;/p>
&lt;p>InnoDB存储引擎中的buffer-pool用于缓存InnoDB索引及数据块。&lt;/p>
&lt;h5 id="平台级缓存">平台级缓存&lt;/h5>
&lt;p>平台级缓存指的是带有缓存特性的应用框架。&lt;/p>
&lt;p>比如：GuavaCache 、EhCache、OSCache等。&lt;/p>
&lt;p>部署在应用服务器上，也称为服务器本地缓存。&lt;/p>
&lt;h5 id="应用级缓存重点">应用级缓存（重点）&lt;/h5>
&lt;p>具有缓存功能的中间件：Redis、Memcached、EVCache、Tair等。&lt;/p>
&lt;p>采用K-V形式存储。&lt;/p>
&lt;p>利用集群支持高可用、高性能、高并发、高扩展。&lt;/p>
&lt;p>分布式缓存&lt;/p>
&lt;h2 id="缓存的优势代价">缓存的优势、代价&lt;/h2>
&lt;h3 id="使用缓存的优势">使用缓存的优势&lt;/h3>
&lt;h4 id="提升用户体验">提升用户体验&lt;/h4>
&lt;p>用户体验（User Experience）：用户在使用产品过程中建立起来的一种纯主观感受。&lt;/p>
&lt;p>缓存的使用可以提升系统的响应能力，大大提升了用户体验。&lt;/p>
&lt;h4 id="减轻服务器压力">减轻服务器压力&lt;/h4>
&lt;p>客户端缓存、网络端缓存减轻应用服务器压力。&lt;/p>
&lt;p>服务端缓存减轻数据库服务器的压力。&lt;/p>
&lt;h4 id="提升系统性能">提升系统性能&lt;/h4>
&lt;p>系统性能指标：响应时间、延迟时间、吞吐量、并发用户数和资源利用率等。&lt;/p>
&lt;p>缓存技术可以：&lt;/p>
&lt;ul>
&lt;li>缩短系统的响应时间&lt;/li>
&lt;li>减少网络传输时间和应用延迟时间&lt;/li>
&lt;li>提高系统的吞吐量&lt;/li>
&lt;li>增加系统的并发用户数&lt;/li>
&lt;li>提高了数据库资源的利用率&lt;/li>
&lt;/ul>
&lt;h3 id="使用缓存的代价">使用缓存的代价&lt;/h3>
&lt;h4 id="额外的硬件支出">额外的硬件支出&lt;/h4>
&lt;p>缓存是一种软件系统中以空间换时间的技术&lt;/p>
&lt;p>需要额外的磁盘空间和内存空间来存储数据&lt;/p>
&lt;p>搭建缓存服务器集群需要额外的服务器&lt;/p>
&lt;p>采用云服务器的缓存服务就不用额外的服务器了&lt;/p>
&lt;p>阿里云，百度云，提供缓存服务&lt;/p>
&lt;h4 id="高并发缓存失效">高并发缓存失效&lt;/h4>
&lt;p>在高并发场景下会出现缓存失效（缓存穿透、缓存雪崩、缓存击穿）&lt;/p>
&lt;p>造成瞬间数据库访问量增大，甚至崩溃&lt;/p>
&lt;h4 id="缓存与数据库数据同步">缓存与数据库数据同步&lt;/h4>
&lt;p>缓存与数据库无法做到数据的时时同步&lt;/p>
&lt;p>Redis无法做到主从时时数据同步&lt;/p>
&lt;h4 id="缓存并发竞争">缓存并发竞争&lt;/h4>
&lt;p>多个redis的客户端同时对一个key进行set值得时候由于执行顺序引起的并发问题&lt;/p>
&lt;h2 id="缓存的读写模式">缓存的读写模式&lt;/h2>
&lt;p>缓存有三种读写模式&lt;/p>
&lt;h3 id="cache-aside-pattern常用">Cache Aside Pattern（常用）&lt;/h3>
&lt;p>Cache Aside Pattern（旁路缓存），是最经典的缓存+数据库读写模式。&lt;/p>
&lt;p>读的时候，先读缓存，缓存没有的话，就读数据库，然后取出数据后放入缓存，同时返回响应。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201225-103137-0211.png" alt="20201225-103137-0211.png">&lt;/p>
&lt;p>更新的时候，先更新数据库，然后再删除缓存。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201225-101439-0610.png" alt="20201225-101439-0610.png">&lt;/p>
&lt;p>为什么是删除缓存，而不是更新缓存呢？&lt;/p>
&lt;ol>
&lt;li>
&lt;p>缓存的值是一个结构：hash、list，更新数据需要遍历&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201225-104440-0857.png" alt="20201225-104440-0857.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>懒加载，使用的时候才更新缓存&lt;/p>
&lt;p>也可以采用异步的方式填充缓存&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>高并发脏读的三种情况&lt;/p>
&lt;ol>
&lt;li>
&lt;p>先更新数据库，再更新缓存&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201225-104650-0351.png" alt="20201225-104650-0351.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>先删除缓存，再更新数据库&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201225-103151-0981.png" alt="20201225-103151-0981.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>先更新数据库，再删除缓存（推荐）&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201225-100453-0678.png" alt="20201225-100453-0678.png">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="readwrite-through-pattern">Read/Write Through Pattern&lt;/h3>
&lt;p>应用程序只操作缓存，缓存操作数据库。&lt;/p>
&lt;p>Read-Through（穿透读模式/直读模式）：应用程序读缓存，缓存没有，由缓存回源到数据库，并写入缓存。 Write-Through（穿透写模式/直写模式）：应用程序写缓存，缓存写数据库。&lt;/p>
&lt;p>该种模式需要提供数据库的handler，开发较为复杂。&lt;/p>
&lt;h3 id="write-behind-caching-pattern">Write Behind Caching Pattern&lt;/h3>
&lt;p>应用程序只更新缓存。&lt;/p>
&lt;p>缓存通过异步的方式将数据批量或合并后更新到DB中&lt;/p>
&lt;p>不能时时同步，甚至会丢数据&lt;/p>
&lt;h2 id="缓存架构的设计思想">缓存架构的设计思想&lt;/h2>
&lt;p>缓存的整体设计思路包括：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>多层次&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201225-103956-0984.png" alt="20201225-103956-0984.png">&lt;/p>
&lt;p>分布式缓存宕机，本地缓存还可以使用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据类型&lt;/p>
&lt;ul>
&lt;li>
&lt;p>简单数据类型&lt;/p>
&lt;p>Value是字符串或整数 Value的值比较大（大于100K）&lt;/p>
&lt;p>只进行setter和getter&lt;/p>
&lt;p>可采用Memcached Memcached纯内存缓存，多线程&lt;/p>
&lt;/li>
&lt;li>
&lt;p>复杂数据类型 Value是hash、set、list、zset&lt;/p>
&lt;p>需要存储关系，聚合，计算&lt;/p>
&lt;p>可采用Redis&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>要做集群&lt;/p>
&lt;p>分布式缓存集群方案（Redis）&lt;/p>
&lt;p>哨兵+主从&lt;/p>
&lt;p>RedisCluster&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缓存的数据结构设计&lt;/p>
&lt;ul>
&lt;li>
&lt;p>与数据库表一致&lt;/p>
&lt;p>数据库表和缓存是一一对应的&lt;/p>
&lt;p>缓存的字段会比数据库表少一些&lt;/p>
&lt;p>缓存的数据是经常访问的&lt;/p>
&lt;p>用户表，商品表&lt;/p>
&lt;/li>
&lt;li>
&lt;p>与数据库表不一致&lt;/p>
&lt;p>需要存储关系，聚合，计算等&lt;/p>
&lt;p>比如某个用户的帖子、用户的评论。&lt;/p>
&lt;p>以用户评论为例，DB结构如下：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201225-112902-0254.png" alt="20201225-112902-0254.png">&lt;/p>
&lt;p>如果要取出UID为1000的用户的评论，原始的表的数据结构显然是不行的。&lt;/p>
&lt;p>我们应做如下设计：&lt;/p>
&lt;p>key：UID+时间戳(精确到天) 评论一般以天为计算单位&lt;/p>
&lt;p>value：Redis的Hash类型。field为 id和content&lt;/p>
&lt;p>expire：设置为一天&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="案例设计招聘网站首页缓存职位列表热门职位">案例：设计招聘网站首页缓存职位列表、热门职位&lt;/h2>
&lt;p>首页分析：&lt;/p>
&lt;p>职位时时变化，不能使用静态html （模板技术）&lt;/p>
&lt;p>数据在服务端拿出，不能为空&lt;/p>
&lt;p>数据不一定时时&lt;/p>
&lt;p>架构图如下：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201225-110608-0790.png" alt="20201225-110608-0790.png">&lt;/p>
&lt;ol>
&lt;li>
&lt;p>静态文件&lt;/p>
&lt;p>在nginx中，放置静态文件，比如css，js， 图片等&lt;/p>
&lt;pre>&lt;code> server {
listen 80 default_server;
server_name localhost;
root / mnt / blog /;
location / {}
#要缓存文件的后缀，可以在以下设置。
location ~ .*\.(gif | jpg | png | css | js) (. *){
proxy_pass http://ip地址:90;
proxy_redirect off;
proxy_set_header Host $host;
proxy_cache cache_one;
proxy_cache_valid 200 302 24h;
proxy_cache_valid 301 30d;
proxy_cache_valid any 5m;
expires 90d;
add_header wall &amp;quot;hello lagou.&amp;quot;;
}
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>职位列表&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201225-115712-0565.png" alt="20201225-115712-0565.png">&lt;/p>
&lt;p>数据特点：
固定数据，一次性读取&lt;/p>
&lt;p>方案：
在服务器开启时一次性初始化到服务器本地缓存&lt;/p>
&lt;p>采用Guava Cache，Guava Cache用于存储频繁使用的少量数据，支持高并发访问&lt;/p>
&lt;p>也可以使用JDK的CurrentHashMap，需要自行实现&lt;/p>
&lt;/li>
&lt;li>
&lt;p>热门职位&lt;/p>
&lt;p>&lt;img src="https://gitee.com/chuchin/img/raw/master/20201225-111214-0847.png" alt="20201225-111214-0847.png">&lt;/p>
&lt;p>数据特点：
频繁变化，不必时时同步&lt;/p>
&lt;p>但一定要有数据，不能为空&lt;/p>
&lt;p>方案：
数据从服务层读取（dubbo），然后放到本地缓存中（Guava），如果出现超时或读取为空，则返回原来本地缓存的数据。
注意：不同的客户端看到的数据有可能不一样。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据回填&lt;/p>
&lt;p>从Dubbo中读取数据时，先读取Redis集群的缓存，如果缓存命中则直接返回。&lt;/p>
&lt;p>如果缓存不命中则返回本地缓存，不能直接读取数据库。&lt;/p>
&lt;p>采用异步的形式从数据库刷入到缓存中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>热点策略&lt;/p>
&lt;p>对于热点数据我们采用本地缓存策略，而不采用服务熔断策略，因为首页数据可以不准确，但不能不响应。&lt;/p>
&lt;/li>
&lt;/ol></description><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/cache/">cache</category><category domain="https://chuchin.cn/tech/cache/redis/">redis</category><category domain="https://chuchin.cn/tags/%E7%BC%93%E5%AD%98/">缓存</category></item><item><title>分布式 session共享</title><link>https://chuchin.cn/tech/distributed-micro-service/distributed-theory/distributed-theory-09/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/distributed-theory/distributed-theory-09/</guid><pubDate>Sun, 09 Feb 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/distributed-theory/">distributed-theory</category><category domain="https://chuchin.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/">分布式</category></item><item><title>分布式 任务调度</title><link>https://chuchin.cn/tech/distributed-micro-service/distributed-theory/distributed-theory-08/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/distributed-theory/distributed-theory-08/</guid><pubDate>Sat, 08 Feb 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/distributed-theory/">distributed-theory</category><category domain="https://chuchin.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/">分布式</category></item><item><title>分布式 ID解决方案</title><link>https://chuchin.cn/tech/distributed-micro-service/distributed-theory/distributed-theory-07/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/distributed-theory/distributed-theory-07/</guid><pubDate>Fri, 07 Feb 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/distributed-theory/">distributed-theory</category><category domain="https://chuchin.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/">分布式</category></item><item><title>分布式 集群时钟同步</title><link>https://chuchin.cn/tech/distributed-micro-service/distributed-theory/distributed-theory-06/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/distributed-theory/distributed-theory-06/</guid><pubDate>Thu, 06 Feb 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/distributed-theory/">distributed-theory</category><category domain="https://chuchin.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/">分布式</category></item><item><title>分布式 一致性Hash</title><link>https://chuchin.cn/tech/distributed-micro-service/distributed-theory/distributed-theory-05/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/distributed-theory/distributed-theory-05/</guid><pubDate>Wed, 05 Feb 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/distributed-theory/">distributed-theory</category><category domain="https://chuchin.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/">分布式</category></item><item><title>分布式 网络通信</title><link>https://chuchin.cn/tech/distributed-micro-service/distributed-theory/distributed-theory-04/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/distributed-theory/distributed-theory-04/</guid><pubDate>Tue, 04 Feb 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/distributed-theory/">distributed-theory</category><category domain="https://chuchin.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/">分布式</category></item><item><title>分布式 网络通信</title><link>https://chuchin.cn/tech/distributed-micro-service/distributed-theory/distributed-theory-03/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/distributed-theory/distributed-theory-03/</guid><pubDate>Mon, 03 Feb 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/distributed-theory/">distributed-theory</category><category domain="https://chuchin.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/">分布式</category></item><item><title>分布式 设计策略</title><link>https://chuchin.cn/tech/distributed-micro-service/distributed-theory/distributed-theory-02-/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/distributed-theory/distributed-theory-02-/</guid><pubDate>Sun, 02 Feb 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/distributed-theory/">distributed-theory</category><category domain="https://chuchin.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/">分布式</category></item><item><title>分布式 理论</title><link>https://chuchin.cn/tech/distributed-micro-service/distributed-theory/distributed-theory-01/</link><guid isPermaLink="true">https://chuchin.cn/tech/distributed-micro-service/distributed-theory/distributed-theory-01/</guid><pubDate>Sat, 01 Feb 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/distributed-micro-service/">distributed-micro-service</category><category domain="https://chuchin.cn/tech/distributed-micro-service/distributed-theory/">distributed-theory</category><category domain="https://chuchin.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/">分布式</category></item><item><title>SpringDataJPA 应用</title><link>https://chuchin.cn/tech/frame/springdatajpa/springdatajpa-02/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/springdatajpa/springdatajpa-02/</guid><pubDate>Thu, 02 Jan 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/springdatajpa/">springdatajpa</category><category domain="https://chuchin.cn/tags/springboot/">SpringBoot</category></item><item><title>SpringDataJPA 概述</title><link>https://chuchin.cn/tech/frame/springdatajpa/springdatajpa-01/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/springdatajpa/springdatajpa-01/</guid><pubDate>Wed, 01 Jan 2020 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/springdatajpa/">springdatajpa</category><category domain="https://chuchin.cn/tags/springboot/">SpringBoot</category></item><item><title>SpringBoot 缓存管理</title><link>https://chuchin.cn/tech/frame/springboot/springboot-04/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/springboot/springboot-04/</guid><pubDate>Wed, 04 Dec 2019 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/springboot/">springboot</category><category domain="https://chuchin.cn/tags/springboot/">SpringBoot</category></item><item><title>SpringBoot 视图技术</title><link>https://chuchin.cn/tech/frame/springboot/springboot-03/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/springboot/springboot-03/</guid><pubDate>Tue, 03 Dec 2019 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/springboot/">springboot</category><category domain="https://chuchin.cn/tags/springboot/">SpringBoot</category></item><item><title>SpringBoot 数据访问</title><link>https://chuchin.cn/tech/frame/springboot/springboot-02/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/springboot/springboot-02/</guid><pubDate>Mon, 02 Dec 2019 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/springboot/">springboot</category><category domain="https://chuchin.cn/tags/springboot/">SpringBoot</category></item><item><title>SpringBoot 基础</title><link>https://chuchin.cn/tech/frame/springboot/springboot-01/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/springboot/springboot-01/</guid><pubDate>Sun, 01 Dec 2019 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/springboot/">springboot</category><category domain="https://chuchin.cn/tags/springboot/">SpringBoot</category></item><item><title>SpringMVC 设计模式</title><link>https://chuchin.cn/tech/frame/springmvc/springmvc-06/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/springmvc/springmvc-06/</guid><pubDate>Wed, 06 Nov 2019 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/springmvc/">springmvc</category><category domain="https://chuchin.cn/tags/springmvc/">SpringMVC</category></item><item><title>SpringMVC 乱码解决</title><link>https://chuchin.cn/tech/frame/springmvc/springmvc-05/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/springmvc/springmvc-05/</guid><pubDate>Tue, 05 Nov 2019 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/springmvc/">springmvc</category><category domain="https://chuchin.cn/tags/springmvc/">SpringMVC</category></item><item><title>SpringMVC SSM整合</title><link>https://chuchin.cn/tech/frame/springmvc/springmvc-04/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/springmvc/springmvc-04/</guid><pubDate>Mon, 04 Nov 2019 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/springmvc/">springmvc</category><category domain="https://chuchin.cn/tags/springmvc/">SpringMVC</category></item><item><title>SpringMVC 手写MVC框架</title><link>https://chuchin.cn/tech/frame/springmvc/springmvc-03/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/springmvc/springmvc-03/</guid><pubDate>Sun, 03 Nov 2019 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/springmvc/">springmvc</category><category domain="https://chuchin.cn/tags/springmvc/">SpringMVC</category></item><item><title>SpringMVC 常用技术</title><link>https://chuchin.cn/tech/frame/springmvc/springmvc-02/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/springmvc/springmvc-02/</guid><pubDate>Sat, 02 Nov 2019 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/springmvc/">springmvc</category><category domain="https://chuchin.cn/tags/springmvc/">SpringMVC</category></item><item><title>SpringMVC 应用</title><link>https://chuchin.cn/tech/frame/springmvc/springmvc-01/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/springmvc/springmvc-01/</guid><pubDate>Fri, 01 Nov 2019 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/springmvc/">springmvc</category><category domain="https://chuchin.cn/tags/springmvc/">SpringMVC</category></item><item><title>Spring AOP应用</title><link>https://chuchin.cn/tech/frame/spring/spring-05/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/spring/spring-05/</guid><pubDate>Sat, 05 Oct 2019 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/spring/">spring</category><category domain="https://chuchin.cn/tags/spring/">Spring</category></item><item><title>Spring IOC应用</title><link>https://chuchin.cn/tech/frame/spring/spring-04/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/spring/spring-04/</guid><pubDate>Fri, 04 Oct 2019 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/spring/">spring</category><category domain="https://chuchin.cn/tags/spring/">Spring</category></item><item><title>Spring 手写IOC和AOP</title><link>https://chuchin.cn/tech/frame/spring/spring-03/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/spring/spring-03/</guid><pubDate>Thu, 03 Oct 2019 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/spring/">spring</category><category domain="https://chuchin.cn/tags/spring/">Spring</category></item><item><title>Spring 核心思想</title><link>https://chuchin.cn/tech/frame/spring/spring-02/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/spring/spring-02/</guid><pubDate>Wed, 02 Oct 2019 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/spring/">spring</category><category domain="https://chuchin.cn/tags/spring/">Spring</category></item><item><title>Spring 概述</title><link>https://chuchin.cn/tech/frame/spring/spring-01/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/spring/spring-01/</guid><pubDate>Tue, 01 Oct 2019 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/spring/">spring</category><category domain="https://chuchin.cn/tags/spring/">Spring</category></item><item><title>Mybatis 设计模式</title><link>https://chuchin.cn/tech/frame/mybatis/myabtis-09/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/mybatis/myabtis-09/</guid><pubDate>Mon, 09 Sep 2019 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/mybatis/">mybatis</category><category domain="https://chuchin.cn/tags/mybatis/">Mybatis</category></item><item><title>Mybatis 架构原理</title><link>https://chuchin.cn/tech/frame/mybatis/myabtis-08/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/mybatis/myabtis-08/</guid><pubDate>Sun, 08 Sep 2019 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/mybatis/">mybatis</category><category domain="https://chuchin.cn/tags/mybatis/">Mybatis</category></item><item><title>Mybatis 插件</title><link>https://chuchin.cn/tech/frame/mybatis/myabtis-07/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/mybatis/myabtis-07/</guid><pubDate>Sat, 07 Sep 2019 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/mybatis/">mybatis</category><category domain="https://chuchin.cn/tags/mybatis/">Mybatis</category></item><item><title>Mybatis 缓存</title><link>https://chuchin.cn/tech/frame/mybatis/myabtis-06/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/mybatis/myabtis-06/</guid><pubDate>Fri, 06 Sep 2019 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/mybatis/">mybatis</category><category domain="https://chuchin.cn/tags/mybatis/">Mybatis</category></item><item><title>Mybatis 注解开发</title><link>https://chuchin.cn/tech/frame/mybatis/myabtis-05/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/mybatis/myabtis-05/</guid><pubDate>Thu, 05 Sep 2019 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/mybatis/">mybatis</category><category domain="https://chuchin.cn/tags/mybatis/">Mybatis</category></item><item><title>Mybatis 复杂映射开发</title><link>https://chuchin.cn/tech/frame/mybatis/myabtis-04/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/mybatis/myabtis-04/</guid><pubDate>Wed, 04 Sep 2019 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/mybatis/">mybatis</category><category domain="https://chuchin.cn/tags/mybatis/">Mybatis</category></item><item><title>Mybatis 配置文件</title><link>https://chuchin.cn/tech/frame/mybatis/myabtis-03/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/mybatis/myabtis-03/</guid><pubDate>Tue, 03 Sep 2019 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/mybatis/">mybatis</category><category domain="https://chuchin.cn/tags/mybatis/">Mybatis</category></item><item><title>Mybatis 相关概念</title><link>https://chuchin.cn/tech/frame/mybatis/myabtis-02/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/mybatis/myabtis-02/</guid><pubDate>Mon, 02 Sep 2019 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/mybatis/">mybatis</category><category domain="https://chuchin.cn/tags/mybatis/">Mybatis</category></item><item><title>Mybatis 自定义框架</title><link>https://chuchin.cn/tech/frame/mybatis/myabtis-01/</link><guid isPermaLink="true">https://chuchin.cn/tech/frame/mybatis/myabtis-01/</guid><pubDate>Sun, 01 Sep 2019 10:21:43 +0800</pubDate><author>edmond1122@foxmail.com (Chu)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description/><category domain="https://chuchin.cn/tech/">tech</category><category domain="https://chuchin.cn/tech/frame/">frame</category><category domain="https://chuchin.cn/tech/frame/mybatis/">mybatis</category><category domain="https://chuchin.cn/tags/mybatis/">Mybatis</category></item></channel></rss>